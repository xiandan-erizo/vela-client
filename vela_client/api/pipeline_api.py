# coding: utf-8

"""
    Kubevela api doc

    Kubevela api doc  # noqa: E501

    OpenAPI spec version: v1beta1
    Contact: feedback@mail.kubevela.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from vela_client.api_client import ApiClient


class PipelineApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_context_value(self, body, project_name, pipeline_name, **kwargs):  # noqa: E501
        """create pipeline context values  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_context_value(body, project_name, pipeline_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1CreateContextValuesRequest body: (required)
        :param str project_name: project name (required)
        :param str pipeline_name: pipeline name (required)
        :return: V1Context
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_context_value_with_http_info(body, project_name, pipeline_name, **kwargs)  # noqa: E501
        else:
            (data) = self.create_context_value_with_http_info(body, project_name, pipeline_name, **kwargs)  # noqa: E501
            return data

    def create_context_value_with_http_info(self, body, project_name, pipeline_name, **kwargs):  # noqa: E501
        """create pipeline context values  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_context_value_with_http_info(body, project_name, pipeline_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1CreateContextValuesRequest body: (required)
        :param str project_name: project name (required)
        :param str pipeline_name: pipeline name (required)
        :return: V1Context
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'project_name', 'pipeline_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_context_value" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_context_value`")  # noqa: E501
        # verify the required parameter 'project_name' is set
        if ('project_name' not in params or
                params['project_name'] is None):
            raise ValueError("Missing the required parameter `project_name` when calling `create_context_value`")  # noqa: E501
        # verify the required parameter 'pipeline_name' is set
        if ('pipeline_name' not in params or
                params['pipeline_name'] is None):
            raise ValueError("Missing the required parameter `pipeline_name` when calling `create_context_value`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_name' in params:
            path_params['projectName'] = params['project_name']  # noqa: E501
        if 'pipeline_name' in params:
            path_params['pipelineName'] = params['pipeline_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ["BearerToken"]  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/projects/{projectName}/pipelines/{pipelineName}/contexts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1Context',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_pipeline(self, body, project_name, **kwargs):  # noqa: E501
        """create pipeline  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_pipeline(body, project_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1CreatePipelineRequest body: (required)
        :param str project_name: project name (required)
        :return: V1PipelineBase
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_pipeline_with_http_info(body, project_name, **kwargs)  # noqa: E501
        else:
            (data) = self.create_pipeline_with_http_info(body, project_name, **kwargs)  # noqa: E501
            return data

    def create_pipeline_with_http_info(self, body, project_name, **kwargs):  # noqa: E501
        """create pipeline  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_pipeline_with_http_info(body, project_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1CreatePipelineRequest body: (required)
        :param str project_name: project name (required)
        :return: V1PipelineBase
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'project_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_pipeline" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_pipeline`")  # noqa: E501
        # verify the required parameter 'project_name' is set
        if ('project_name' not in params or
                params['project_name'] is None):
            raise ValueError("Missing the required parameter `project_name` when calling `create_pipeline`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_name' in params:
            path_params['projectName'] = params['project_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ["BearerToken"]  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/projects/{projectName}/pipelines', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1PipelineBase',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_context_value(self, project_name, pipeline_name, context_name, **kwargs):  # noqa: E501
        """delete pipeline context value  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_context_value(project_name, pipeline_name, context_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_name: project name (required)
        :param str pipeline_name: pipeline name (required)
        :param str context_name: pipeline context name (required)
        :return: V1ContextNameResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_context_value_with_http_info(project_name, pipeline_name, context_name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_context_value_with_http_info(project_name, pipeline_name, context_name, **kwargs)  # noqa: E501
            return data

    def delete_context_value_with_http_info(self, project_name, pipeline_name, context_name, **kwargs):  # noqa: E501
        """delete pipeline context value  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_context_value_with_http_info(project_name, pipeline_name, context_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_name: project name (required)
        :param str pipeline_name: pipeline name (required)
        :param str context_name: pipeline context name (required)
        :return: V1ContextNameResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_name', 'pipeline_name', 'context_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_context_value" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_name' is set
        if ('project_name' not in params or
                params['project_name'] is None):
            raise ValueError("Missing the required parameter `project_name` when calling `delete_context_value`")  # noqa: E501
        # verify the required parameter 'pipeline_name' is set
        if ('pipeline_name' not in params or
                params['pipeline_name'] is None):
            raise ValueError("Missing the required parameter `pipeline_name` when calling `delete_context_value`")  # noqa: E501
        # verify the required parameter 'context_name' is set
        if ('context_name' not in params or
                params['context_name'] is None):
            raise ValueError("Missing the required parameter `context_name` when calling `delete_context_value`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_name' in params:
            path_params['projectName'] = params['project_name']  # noqa: E501
        if 'pipeline_name' in params:
            path_params['pipelineName'] = params['pipeline_name']  # noqa: E501
        if 'context_name' in params:
            path_params['contextName'] = params['context_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ["BearerToken"]  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/projects/{projectName}/pipelines/{pipelineName}/contexts/{contextName}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ContextNameResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_pipeline(self, project_name, pipeline_name, **kwargs):  # noqa: E501
        """delete pipeline  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pipeline(project_name, pipeline_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_name: project name (required)
        :param str pipeline_name: pipeline name (required)
        :return: V1PipelineMetaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_pipeline_with_http_info(project_name, pipeline_name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_pipeline_with_http_info(project_name, pipeline_name, **kwargs)  # noqa: E501
            return data

    def delete_pipeline_with_http_info(self, project_name, pipeline_name, **kwargs):  # noqa: E501
        """delete pipeline  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pipeline_with_http_info(project_name, pipeline_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_name: project name (required)
        :param str pipeline_name: pipeline name (required)
        :return: V1PipelineMetaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_name', 'pipeline_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_pipeline" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_name' is set
        if ('project_name' not in params or
                params['project_name'] is None):
            raise ValueError("Missing the required parameter `project_name` when calling `delete_pipeline`")  # noqa: E501
        # verify the required parameter 'pipeline_name' is set
        if ('pipeline_name' not in params or
                params['pipeline_name'] is None):
            raise ValueError("Missing the required parameter `pipeline_name` when calling `delete_pipeline`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_name' in params:
            path_params['projectName'] = params['project_name']  # noqa: E501
        if 'pipeline_name' in params:
            path_params['pipelineName'] = params['pipeline_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ["BearerToken"]  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/projects/{projectName}/pipelines/{pipelineName}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1PipelineMetaResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_pipeline_run(self, project_name, pipeline_name, run_name, **kwargs):  # noqa: E501
        """delete pipeline run  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pipeline_run(project_name, pipeline_name, run_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_name: project name (required)
        :param str pipeline_name: pipeline name (required)
        :param str run_name: pipeline run name (required)
        :return: V1PipelineRunMeta
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_pipeline_run_with_http_info(project_name, pipeline_name, run_name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_pipeline_run_with_http_info(project_name, pipeline_name, run_name, **kwargs)  # noqa: E501
            return data

    def delete_pipeline_run_with_http_info(self, project_name, pipeline_name, run_name, **kwargs):  # noqa: E501
        """delete pipeline run  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pipeline_run_with_http_info(project_name, pipeline_name, run_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_name: project name (required)
        :param str pipeline_name: pipeline name (required)
        :param str run_name: pipeline run name (required)
        :return: V1PipelineRunMeta
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_name', 'pipeline_name', 'run_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_pipeline_run" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_name' is set
        if ('project_name' not in params or
                params['project_name'] is None):
            raise ValueError("Missing the required parameter `project_name` when calling `delete_pipeline_run`")  # noqa: E501
        # verify the required parameter 'pipeline_name' is set
        if ('pipeline_name' not in params or
                params['pipeline_name'] is None):
            raise ValueError("Missing the required parameter `pipeline_name` when calling `delete_pipeline_run`")  # noqa: E501
        # verify the required parameter 'run_name' is set
        if ('run_name' not in params or
                params['run_name'] is None):
            raise ValueError("Missing the required parameter `run_name` when calling `delete_pipeline_run`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_name' in params:
            path_params['projectName'] = params['project_name']  # noqa: E501
        if 'pipeline_name' in params:
            path_params['pipelineName'] = params['pipeline_name']  # noqa: E501
        if 'run_name' in params:
            path_params['runName'] = params['run_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ["BearerToken"]  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/projects/{projectName}/pipelines/{pipelineName}/runs/{runName}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1PipelineRunMeta',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pipeline(self, pipeline_name, project_name, **kwargs):  # noqa: E501
        """get pipeline  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pipeline(pipeline_name, project_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pipeline_name: pipeline name (required)
        :param str project_name: project name (required)
        :return: V1GetPipelineResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_pipeline_with_http_info(pipeline_name, project_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_pipeline_with_http_info(pipeline_name, project_name, **kwargs)  # noqa: E501
            return data

    def get_pipeline_with_http_info(self, pipeline_name, project_name, **kwargs):  # noqa: E501
        """get pipeline  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pipeline_with_http_info(pipeline_name, project_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pipeline_name: pipeline name (required)
        :param str project_name: project name (required)
        :return: V1GetPipelineResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pipeline_name', 'project_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pipeline" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pipeline_name' is set
        if ('pipeline_name' not in params or
                params['pipeline_name'] is None):
            raise ValueError("Missing the required parameter `pipeline_name` when calling `get_pipeline`")  # noqa: E501
        # verify the required parameter 'project_name' is set
        if ('project_name' not in params or
                params['project_name'] is None):
            raise ValueError("Missing the required parameter `project_name` when calling `get_pipeline`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pipeline_name' in params:
            path_params['pipelineName'] = params['pipeline_name']  # noqa: E501
        if 'project_name' in params:
            path_params['projectName'] = params['project_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ["BearerToken"]  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/projects/{projectName}/pipelines/{pipelineName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1GetPipelineResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pipeline_run(self, project_name, pipeline_name, run_name, **kwargs):  # noqa: E501
        """get pipeline run  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pipeline_run(project_name, pipeline_name, run_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_name: project name (required)
        :param str pipeline_name: pipeline name (required)
        :param str run_name: pipeline run name (required)
        :return: V1PipelineRunBase
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_pipeline_run_with_http_info(project_name, pipeline_name, run_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_pipeline_run_with_http_info(project_name, pipeline_name, run_name, **kwargs)  # noqa: E501
            return data

    def get_pipeline_run_with_http_info(self, project_name, pipeline_name, run_name, **kwargs):  # noqa: E501
        """get pipeline run  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pipeline_run_with_http_info(project_name, pipeline_name, run_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_name: project name (required)
        :param str pipeline_name: pipeline name (required)
        :param str run_name: pipeline run name (required)
        :return: V1PipelineRunBase
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_name', 'pipeline_name', 'run_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pipeline_run" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_name' is set
        if ('project_name' not in params or
                params['project_name'] is None):
            raise ValueError("Missing the required parameter `project_name` when calling `get_pipeline_run`")  # noqa: E501
        # verify the required parameter 'pipeline_name' is set
        if ('pipeline_name' not in params or
                params['pipeline_name'] is None):
            raise ValueError("Missing the required parameter `pipeline_name` when calling `get_pipeline_run`")  # noqa: E501
        # verify the required parameter 'run_name' is set
        if ('run_name' not in params or
                params['run_name'] is None):
            raise ValueError("Missing the required parameter `run_name` when calling `get_pipeline_run`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_name' in params:
            path_params['projectName'] = params['project_name']  # noqa: E501
        if 'pipeline_name' in params:
            path_params['pipelineName'] = params['pipeline_name']  # noqa: E501
        if 'run_name' in params:
            path_params['runName'] = params['run_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ["BearerToken"]  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/projects/{projectName}/pipelines/{pipelineName}/runs/{runName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1PipelineRunBase',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pipeline_run_input(self, step, project_name, pipeline_name, run_name, **kwargs):  # noqa: E501
        """get pipeline run input  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pipeline_run_input(step, project_name, pipeline_name, run_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str step: query by specific step name (required)
        :param str project_name: project name (required)
        :param str pipeline_name: pipeline name (required)
        :param str run_name: pipeline run name (required)
        :return: V1GetPipelineRunInputResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_pipeline_run_input_with_http_info(step, project_name, pipeline_name, run_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_pipeline_run_input_with_http_info(step, project_name, pipeline_name, run_name, **kwargs)  # noqa: E501
            return data

    def get_pipeline_run_input_with_http_info(self, step, project_name, pipeline_name, run_name, **kwargs):  # noqa: E501
        """get pipeline run input  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pipeline_run_input_with_http_info(step, project_name, pipeline_name, run_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str step: query by specific step name (required)
        :param str project_name: project name (required)
        :param str pipeline_name: pipeline name (required)
        :param str run_name: pipeline run name (required)
        :return: V1GetPipelineRunInputResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['step', 'project_name', 'pipeline_name', 'run_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pipeline_run_input" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'step' is set
        if ('step' not in params or
                params['step'] is None):
            raise ValueError("Missing the required parameter `step` when calling `get_pipeline_run_input`")  # noqa: E501
        # verify the required parameter 'project_name' is set
        if ('project_name' not in params or
                params['project_name'] is None):
            raise ValueError("Missing the required parameter `project_name` when calling `get_pipeline_run_input`")  # noqa: E501
        # verify the required parameter 'pipeline_name' is set
        if ('pipeline_name' not in params or
                params['pipeline_name'] is None):
            raise ValueError("Missing the required parameter `pipeline_name` when calling `get_pipeline_run_input`")  # noqa: E501
        # verify the required parameter 'run_name' is set
        if ('run_name' not in params or
                params['run_name'] is None):
            raise ValueError("Missing the required parameter `run_name` when calling `get_pipeline_run_input`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_name' in params:
            path_params['projectName'] = params['project_name']  # noqa: E501
        if 'pipeline_name' in params:
            path_params['pipelineName'] = params['pipeline_name']  # noqa: E501
        if 'run_name' in params:
            path_params['runName'] = params['run_name']  # noqa: E501

        query_params = []
        if 'step' in params:
            query_params.append(('step', params['step']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ["BearerToken"]  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/projects/{projectName}/pipelines/{pipelineName}/runs/{runName}/input', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1GetPipelineRunInputResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pipeline_run_log(self, project_name, pipeline_name, run_name, **kwargs):  # noqa: E501
        """get pipeline run log  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pipeline_run_log(project_name, pipeline_name, run_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_name: project name (required)
        :param str pipeline_name: pipeline name (required)
        :param str run_name: pipeline run name (required)
        :param str step: query by specific step name
        :return: V1GetPipelineRunLogResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_pipeline_run_log_with_http_info(project_name, pipeline_name, run_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_pipeline_run_log_with_http_info(project_name, pipeline_name, run_name, **kwargs)  # noqa: E501
            return data

    def get_pipeline_run_log_with_http_info(self, project_name, pipeline_name, run_name, **kwargs):  # noqa: E501
        """get pipeline run log  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pipeline_run_log_with_http_info(project_name, pipeline_name, run_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_name: project name (required)
        :param str pipeline_name: pipeline name (required)
        :param str run_name: pipeline run name (required)
        :param str step: query by specific step name
        :return: V1GetPipelineRunLogResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_name', 'pipeline_name', 'run_name', 'step']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pipeline_run_log" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_name' is set
        if ('project_name' not in params or
                params['project_name'] is None):
            raise ValueError("Missing the required parameter `project_name` when calling `get_pipeline_run_log`")  # noqa: E501
        # verify the required parameter 'pipeline_name' is set
        if ('pipeline_name' not in params or
                params['pipeline_name'] is None):
            raise ValueError("Missing the required parameter `pipeline_name` when calling `get_pipeline_run_log`")  # noqa: E501
        # verify the required parameter 'run_name' is set
        if ('run_name' not in params or
                params['run_name'] is None):
            raise ValueError("Missing the required parameter `run_name` when calling `get_pipeline_run_log`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_name' in params:
            path_params['projectName'] = params['project_name']  # noqa: E501
        if 'pipeline_name' in params:
            path_params['pipelineName'] = params['pipeline_name']  # noqa: E501
        if 'run_name' in params:
            path_params['runName'] = params['run_name']  # noqa: E501

        query_params = []
        if 'step' in params:
            query_params.append(('step', params['step']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ["BearerToken"]  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/projects/{projectName}/pipelines/{pipelineName}/runs/{runName}/log', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1GetPipelineRunLogResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pipeline_run_output(self, step, project_name, pipeline_name, run_name, **kwargs):  # noqa: E501
        """get pipeline run output  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pipeline_run_output(step, project_name, pipeline_name, run_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str step: query by specific step name (required)
        :param str project_name: project name (required)
        :param str pipeline_name: pipeline name (required)
        :param str run_name: pipeline run name (required)
        :return: V1GetPipelineRunOutputResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_pipeline_run_output_with_http_info(step, project_name, pipeline_name, run_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_pipeline_run_output_with_http_info(step, project_name, pipeline_name, run_name, **kwargs)  # noqa: E501
            return data

    def get_pipeline_run_output_with_http_info(self, step, project_name, pipeline_name, run_name, **kwargs):  # noqa: E501
        """get pipeline run output  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pipeline_run_output_with_http_info(step, project_name, pipeline_name, run_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str step: query by specific step name (required)
        :param str project_name: project name (required)
        :param str pipeline_name: pipeline name (required)
        :param str run_name: pipeline run name (required)
        :return: V1GetPipelineRunOutputResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['step', 'project_name', 'pipeline_name', 'run_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pipeline_run_output" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'step' is set
        if ('step' not in params or
                params['step'] is None):
            raise ValueError("Missing the required parameter `step` when calling `get_pipeline_run_output`")  # noqa: E501
        # verify the required parameter 'project_name' is set
        if ('project_name' not in params or
                params['project_name'] is None):
            raise ValueError("Missing the required parameter `project_name` when calling `get_pipeline_run_output`")  # noqa: E501
        # verify the required parameter 'pipeline_name' is set
        if ('pipeline_name' not in params or
                params['pipeline_name'] is None):
            raise ValueError("Missing the required parameter `pipeline_name` when calling `get_pipeline_run_output`")  # noqa: E501
        # verify the required parameter 'run_name' is set
        if ('run_name' not in params or
                params['run_name'] is None):
            raise ValueError("Missing the required parameter `run_name` when calling `get_pipeline_run_output`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_name' in params:
            path_params['projectName'] = params['project_name']  # noqa: E501
        if 'pipeline_name' in params:
            path_params['pipelineName'] = params['pipeline_name']  # noqa: E501
        if 'run_name' in params:
            path_params['runName'] = params['run_name']  # noqa: E501

        query_params = []
        if 'step' in params:
            query_params.append(('step', params['step']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ["BearerToken"]  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/projects/{projectName}/pipelines/{pipelineName}/runs/{runName}/output', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1GetPipelineRunOutputResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pipeline_run_status(self, project_name, pipeline_name, run_name, **kwargs):  # noqa: E501
        """get pipeline run status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pipeline_run_status(project_name, pipeline_name, run_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_name: project name (required)
        :param str pipeline_name: pipeline name (required)
        :param str run_name: pipeline run name (required)
        :return: V1alpha1WorkflowRunStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_pipeline_run_status_with_http_info(project_name, pipeline_name, run_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_pipeline_run_status_with_http_info(project_name, pipeline_name, run_name, **kwargs)  # noqa: E501
            return data

    def get_pipeline_run_status_with_http_info(self, project_name, pipeline_name, run_name, **kwargs):  # noqa: E501
        """get pipeline run status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pipeline_run_status_with_http_info(project_name, pipeline_name, run_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_name: project name (required)
        :param str pipeline_name: pipeline name (required)
        :param str run_name: pipeline run name (required)
        :return: V1alpha1WorkflowRunStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_name', 'pipeline_name', 'run_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pipeline_run_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_name' is set
        if ('project_name' not in params or
                params['project_name'] is None):
            raise ValueError("Missing the required parameter `project_name` when calling `get_pipeline_run_status`")  # noqa: E501
        # verify the required parameter 'pipeline_name' is set
        if ('pipeline_name' not in params or
                params['pipeline_name'] is None):
            raise ValueError("Missing the required parameter `pipeline_name` when calling `get_pipeline_run_status`")  # noqa: E501
        # verify the required parameter 'run_name' is set
        if ('run_name' not in params or
                params['run_name'] is None):
            raise ValueError("Missing the required parameter `run_name` when calling `get_pipeline_run_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_name' in params:
            path_params['projectName'] = params['project_name']  # noqa: E501
        if 'pipeline_name' in params:
            path_params['pipelineName'] = params['pipeline_name']  # noqa: E501
        if 'run_name' in params:
            path_params['runName'] = params['run_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ["BearerToken"]  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/projects/{projectName}/pipelines/{pipelineName}/runs/{runName}/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1alpha1WorkflowRunStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_context_values(self, project_name, pipeline_name, **kwargs):  # noqa: E501
        """list pipeline context values  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_context_values(project_name, pipeline_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_name: project name (required)
        :param str pipeline_name: pipeline name (required)
        :return: V1ListContextValueResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_context_values_with_http_info(project_name, pipeline_name, **kwargs)  # noqa: E501
        else:
            (data) = self.list_context_values_with_http_info(project_name, pipeline_name, **kwargs)  # noqa: E501
            return data

    def list_context_values_with_http_info(self, project_name, pipeline_name, **kwargs):  # noqa: E501
        """list pipeline context values  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_context_values_with_http_info(project_name, pipeline_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_name: project name (required)
        :param str pipeline_name: pipeline name (required)
        :return: V1ListContextValueResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_name', 'pipeline_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_context_values" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_name' is set
        if ('project_name' not in params or
                params['project_name'] is None):
            raise ValueError("Missing the required parameter `project_name` when calling `list_context_values`")  # noqa: E501
        # verify the required parameter 'pipeline_name' is set
        if ('pipeline_name' not in params or
                params['pipeline_name'] is None):
            raise ValueError("Missing the required parameter `pipeline_name` when calling `list_context_values`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_name' in params:
            path_params['projectName'] = params['project_name']  # noqa: E501
        if 'pipeline_name' in params:
            path_params['pipelineName'] = params['pipeline_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ["BearerToken"]  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/projects/{projectName}/pipelines/{pipelineName}/contexts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ListContextValueResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_pipeline_runs(self, project_name, pipeline_name, **kwargs):  # noqa: E501
        """list pipeline runs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_pipeline_runs(project_name, pipeline_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_name: project name (required)
        :param str pipeline_name: pipeline name (required)
        :param str status: query identifier of the status
        :return: V1ListPipelineRunResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_pipeline_runs_with_http_info(project_name, pipeline_name, **kwargs)  # noqa: E501
        else:
            (data) = self.list_pipeline_runs_with_http_info(project_name, pipeline_name, **kwargs)  # noqa: E501
            return data

    def list_pipeline_runs_with_http_info(self, project_name, pipeline_name, **kwargs):  # noqa: E501
        """list pipeline runs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_pipeline_runs_with_http_info(project_name, pipeline_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_name: project name (required)
        :param str pipeline_name: pipeline name (required)
        :param str status: query identifier of the status
        :return: V1ListPipelineRunResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_name', 'pipeline_name', 'status']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_pipeline_runs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_name' is set
        if ('project_name' not in params or
                params['project_name'] is None):
            raise ValueError("Missing the required parameter `project_name` when calling `list_pipeline_runs`")  # noqa: E501
        # verify the required parameter 'pipeline_name' is set
        if ('pipeline_name' not in params or
                params['pipeline_name'] is None):
            raise ValueError("Missing the required parameter `pipeline_name` when calling `list_pipeline_runs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_name' in params:
            path_params['projectName'] = params['project_name']  # noqa: E501
        if 'pipeline_name' in params:
            path_params['pipelineName'] = params['pipeline_name']  # noqa: E501

        query_params = []
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ["BearerToken"]  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/projects/{projectName}/pipelines/{pipelineName}/runs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ListPipelineRunResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_pipelines(self, **kwargs):  # noqa: E501
        """list pipelines  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_pipelines(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: Fuzzy search based on name or description
        :param str project_name: query pipelines within a project
        :param object detailed: query pipelines with detail
        :return: V1ListPipelineResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_pipelines_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_pipelines_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_pipelines_with_http_info(self, **kwargs):  # noqa: E501
        """list pipelines  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_pipelines_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: Fuzzy search based on name or description
        :param str project_name: query pipelines within a project
        :param object detailed: query pipelines with detail
        :return: V1ListPipelineResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['query', 'project_name', 'detailed']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_pipelines" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'query' in params:
            query_params.append(('query', params['query']))  # noqa: E501
        if 'project_name' in params:
            query_params.append(('projectName', params['project_name']))  # noqa: E501
        if 'detailed' in params:
            query_params.append(('detailed', params['detailed']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ["BearerToken"]  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/pipelines', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ListPipelineResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resume_pipeline_run(self, project_name, pipeline_name, run_name, **kwargs):  # noqa: E501
        """resume suspend pipeline run  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resume_pipeline_run(project_name, pipeline_name, run_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_name: project name (required)
        :param str pipeline_name: pipeline name (required)
        :param str run_name: pipeline run name (required)
        :return: V1EmptyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.resume_pipeline_run_with_http_info(project_name, pipeline_name, run_name, **kwargs)  # noqa: E501
        else:
            (data) = self.resume_pipeline_run_with_http_info(project_name, pipeline_name, run_name, **kwargs)  # noqa: E501
            return data

    def resume_pipeline_run_with_http_info(self, project_name, pipeline_name, run_name, **kwargs):  # noqa: E501
        """resume suspend pipeline run  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resume_pipeline_run_with_http_info(project_name, pipeline_name, run_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_name: project name (required)
        :param str pipeline_name: pipeline name (required)
        :param str run_name: pipeline run name (required)
        :return: V1EmptyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_name', 'pipeline_name', 'run_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resume_pipeline_run" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_name' is set
        if ('project_name' not in params or
                params['project_name'] is None):
            raise ValueError("Missing the required parameter `project_name` when calling `resume_pipeline_run`")  # noqa: E501
        # verify the required parameter 'pipeline_name' is set
        if ('pipeline_name' not in params or
                params['pipeline_name'] is None):
            raise ValueError("Missing the required parameter `pipeline_name` when calling `resume_pipeline_run`")  # noqa: E501
        # verify the required parameter 'run_name' is set
        if ('run_name' not in params or
                params['run_name'] is None):
            raise ValueError("Missing the required parameter `run_name` when calling `resume_pipeline_run`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_name' in params:
            path_params['projectName'] = params['project_name']  # noqa: E501
        if 'pipeline_name' in params:
            path_params['pipelineName'] = params['pipeline_name']  # noqa: E501
        if 'run_name' in params:
            path_params['runName'] = params['run_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ["BearerToken"]  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/projects/{projectName}/pipelines/{pipelineName}/runs/{runName}/resume', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1EmptyResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def run_pipeline(self, body, project_name, pipeline_name, **kwargs):  # noqa: E501
        """run pipeline  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.run_pipeline(body, project_name, pipeline_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1RunPipelineRequest body: (required)
        :param str project_name: project name (required)
        :param str pipeline_name: pipeline name (required)
        :return: V1PipelineRun
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.run_pipeline_with_http_info(body, project_name, pipeline_name, **kwargs)  # noqa: E501
        else:
            (data) = self.run_pipeline_with_http_info(body, project_name, pipeline_name, **kwargs)  # noqa: E501
            return data

    def run_pipeline_with_http_info(self, body, project_name, pipeline_name, **kwargs):  # noqa: E501
        """run pipeline  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.run_pipeline_with_http_info(body, project_name, pipeline_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1RunPipelineRequest body: (required)
        :param str project_name: project name (required)
        :param str pipeline_name: pipeline name (required)
        :return: V1PipelineRun
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'project_name', 'pipeline_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method run_pipeline" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `run_pipeline`")  # noqa: E501
        # verify the required parameter 'project_name' is set
        if ('project_name' not in params or
                params['project_name'] is None):
            raise ValueError("Missing the required parameter `project_name` when calling `run_pipeline`")  # noqa: E501
        # verify the required parameter 'pipeline_name' is set
        if ('pipeline_name' not in params or
                params['pipeline_name'] is None):
            raise ValueError("Missing the required parameter `pipeline_name` when calling `run_pipeline`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_name' in params:
            path_params['projectName'] = params['project_name']  # noqa: E501
        if 'pipeline_name' in params:
            path_params['pipelineName'] = params['pipeline_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ["BearerToken"]  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/projects/{projectName}/pipelines/{pipelineName}/run', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1PipelineRun',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def stop_pipeline(self, project_name, pipeline_name, run_name, **kwargs):  # noqa: E501
        """stop pipeline run  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stop_pipeline(project_name, pipeline_name, run_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_name: project name (required)
        :param str pipeline_name: pipeline name (required)
        :param str run_name: pipeline run name (required)
        :return: V1PipelineRunMeta
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.stop_pipeline_with_http_info(project_name, pipeline_name, run_name, **kwargs)  # noqa: E501
        else:
            (data) = self.stop_pipeline_with_http_info(project_name, pipeline_name, run_name, **kwargs)  # noqa: E501
            return data

    def stop_pipeline_with_http_info(self, project_name, pipeline_name, run_name, **kwargs):  # noqa: E501
        """stop pipeline run  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stop_pipeline_with_http_info(project_name, pipeline_name, run_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_name: project name (required)
        :param str pipeline_name: pipeline name (required)
        :param str run_name: pipeline run name (required)
        :return: V1PipelineRunMeta
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_name', 'pipeline_name', 'run_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stop_pipeline" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_name' is set
        if ('project_name' not in params or
                params['project_name'] is None):
            raise ValueError("Missing the required parameter `project_name` when calling `stop_pipeline`")  # noqa: E501
        # verify the required parameter 'pipeline_name' is set
        if ('pipeline_name' not in params or
                params['pipeline_name'] is None):
            raise ValueError("Missing the required parameter `pipeline_name` when calling `stop_pipeline`")  # noqa: E501
        # verify the required parameter 'run_name' is set
        if ('run_name' not in params or
                params['run_name'] is None):
            raise ValueError("Missing the required parameter `run_name` when calling `stop_pipeline`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_name' in params:
            path_params['projectName'] = params['project_name']  # noqa: E501
        if 'pipeline_name' in params:
            path_params['pipelineName'] = params['pipeline_name']  # noqa: E501
        if 'run_name' in params:
            path_params['runName'] = params['run_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ["BearerToken"]  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/projects/{projectName}/pipelines/{pipelineName}/runs/{runName}/stop', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1PipelineRunMeta',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def terminate_pipeline_run(self, project_name, pipeline_name, run_name, **kwargs):  # noqa: E501
        """resume suspend pipeline run  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.terminate_pipeline_run(project_name, pipeline_name, run_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_name: project name (required)
        :param str pipeline_name: pipeline name (required)
        :param str run_name: pipeline run name (required)
        :return: V1EmptyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.terminate_pipeline_run_with_http_info(project_name, pipeline_name, run_name, **kwargs)  # noqa: E501
        else:
            (data) = self.terminate_pipeline_run_with_http_info(project_name, pipeline_name, run_name, **kwargs)  # noqa: E501
            return data

    def terminate_pipeline_run_with_http_info(self, project_name, pipeline_name, run_name, **kwargs):  # noqa: E501
        """resume suspend pipeline run  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.terminate_pipeline_run_with_http_info(project_name, pipeline_name, run_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_name: project name (required)
        :param str pipeline_name: pipeline name (required)
        :param str run_name: pipeline run name (required)
        :return: V1EmptyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_name', 'pipeline_name', 'run_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method terminate_pipeline_run" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_name' is set
        if ('project_name' not in params or
                params['project_name'] is None):
            raise ValueError("Missing the required parameter `project_name` when calling `terminate_pipeline_run`")  # noqa: E501
        # verify the required parameter 'pipeline_name' is set
        if ('pipeline_name' not in params or
                params['pipeline_name'] is None):
            raise ValueError("Missing the required parameter `pipeline_name` when calling `terminate_pipeline_run`")  # noqa: E501
        # verify the required parameter 'run_name' is set
        if ('run_name' not in params or
                params['run_name'] is None):
            raise ValueError("Missing the required parameter `run_name` when calling `terminate_pipeline_run`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_name' in params:
            path_params['projectName'] = params['project_name']  # noqa: E501
        if 'pipeline_name' in params:
            path_params['pipelineName'] = params['pipeline_name']  # noqa: E501
        if 'run_name' in params:
            path_params['runName'] = params['run_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ["BearerToken"]  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/projects/{projectName}/pipelines/{pipelineName}/runs/{runName}/terminate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1EmptyResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_context_value(self, body, project_name, pipeline_name, context_name, **kwargs):  # noqa: E501
        """update pipeline context value  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_context_value(body, project_name, pipeline_name, context_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1UpdateContextValuesRequest body: (required)
        :param str project_name: project name (required)
        :param str pipeline_name: pipeline name (required)
        :param str context_name: pipeline context name (required)
        :return: V1Context
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_context_value_with_http_info(body, project_name, pipeline_name, context_name, **kwargs)  # noqa: E501
        else:
            (data) = self.update_context_value_with_http_info(body, project_name, pipeline_name, context_name, **kwargs)  # noqa: E501
            return data

    def update_context_value_with_http_info(self, body, project_name, pipeline_name, context_name, **kwargs):  # noqa: E501
        """update pipeline context value  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_context_value_with_http_info(body, project_name, pipeline_name, context_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1UpdateContextValuesRequest body: (required)
        :param str project_name: project name (required)
        :param str pipeline_name: pipeline name (required)
        :param str context_name: pipeline context name (required)
        :return: V1Context
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'project_name', 'pipeline_name', 'context_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_context_value" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_context_value`")  # noqa: E501
        # verify the required parameter 'project_name' is set
        if ('project_name' not in params or
                params['project_name'] is None):
            raise ValueError("Missing the required parameter `project_name` when calling `update_context_value`")  # noqa: E501
        # verify the required parameter 'pipeline_name' is set
        if ('pipeline_name' not in params or
                params['pipeline_name'] is None):
            raise ValueError("Missing the required parameter `pipeline_name` when calling `update_context_value`")  # noqa: E501
        # verify the required parameter 'context_name' is set
        if ('context_name' not in params or
                params['context_name'] is None):
            raise ValueError("Missing the required parameter `context_name` when calling `update_context_value`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_name' in params:
            path_params['projectName'] = params['project_name']  # noqa: E501
        if 'pipeline_name' in params:
            path_params['pipelineName'] = params['pipeline_name']  # noqa: E501
        if 'context_name' in params:
            path_params['contextName'] = params['context_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ["BearerToken"]  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/projects/{projectName}/pipelines/{pipelineName}/contexts/{contextName}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1Context',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_pipeline(self, body, project_name, pipeline_name, **kwargs):  # noqa: E501
        """update pipeline  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_pipeline(body, project_name, pipeline_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1UpdatePipelineRequest body: (required)
        :param str project_name: project name (required)
        :param str pipeline_name: pipeline name (required)
        :return: V1PipelineBase
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_pipeline_with_http_info(body, project_name, pipeline_name, **kwargs)  # noqa: E501
        else:
            (data) = self.update_pipeline_with_http_info(body, project_name, pipeline_name, **kwargs)  # noqa: E501
            return data

    def update_pipeline_with_http_info(self, body, project_name, pipeline_name, **kwargs):  # noqa: E501
        """update pipeline  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_pipeline_with_http_info(body, project_name, pipeline_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1UpdatePipelineRequest body: (required)
        :param str project_name: project name (required)
        :param str pipeline_name: pipeline name (required)
        :return: V1PipelineBase
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'project_name', 'pipeline_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_pipeline" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_pipeline`")  # noqa: E501
        # verify the required parameter 'project_name' is set
        if ('project_name' not in params or
                params['project_name'] is None):
            raise ValueError("Missing the required parameter `project_name` when calling `update_pipeline`")  # noqa: E501
        # verify the required parameter 'pipeline_name' is set
        if ('pipeline_name' not in params or
                params['pipeline_name'] is None):
            raise ValueError("Missing the required parameter `pipeline_name` when calling `update_pipeline`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_name' in params:
            path_params['projectName'] = params['project_name']  # noqa: E501
        if 'pipeline_name' in params:
            path_params['pipelineName'] = params['pipeline_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ["BearerToken"]  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/projects/{projectName}/pipelines/{pipelineName}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1PipelineBase',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

# coding: utf-8

"""
    Kubevela api doc

    Kubevela api doc  # noqa: E501

    OpenAPI spec version: v1beta1
    Contact: feedback@mail.kubevela.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from vela_client.api_client import ApiClient


class ApplicationApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_application_trait(self, body, app_name, comp_name, **kwargs):  # noqa: E501
        """add trait for a component  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_application_trait(body, app_name, comp_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1CreateApplicationTraitRequest body: (required)
        :param str app_name: identifier of the application (required)
        :param str comp_name: identifier of the component (required)
        :return: V1EmptyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_application_trait_with_http_info(body, app_name, comp_name, **kwargs)  # noqa: E501
        else:
            (data) = self.add_application_trait_with_http_info(body, app_name, comp_name, **kwargs)  # noqa: E501
            return data

    def add_application_trait_with_http_info(self, body, app_name, comp_name, **kwargs):  # noqa: E501
        """add trait for a component  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_application_trait_with_http_info(body, app_name, comp_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1CreateApplicationTraitRequest body: (required)
        :param str app_name: identifier of the application (required)
        :param str comp_name: identifier of the component (required)
        :return: V1EmptyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'app_name', 'comp_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_application_trait" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_application_trait`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `add_application_trait`")  # noqa: E501
        # verify the required parameter 'comp_name' is set
        if ('comp_name' not in params or
                params['comp_name'] is None):
            raise ValueError("Missing the required parameter `comp_name` when calling `add_application_trait`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['appName'] = params['app_name']  # noqa: E501
        if 'comp_name' in params:
            path_params['compName'] = params['comp_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ["BearerToken"]  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/applications/{appName}/components/{compName}/traits', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1EmptyResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def application_statistics(self, app_name, **kwargs):  # noqa: E501
        """detail one application   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.application_statistics(app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: identifier of the application  (required)
        :return: V1ApplicationStatisticsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.application_statistics_with_http_info(app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.application_statistics_with_http_info(app_name, **kwargs)  # noqa: E501
            return data

    def application_statistics_with_http_info(self, app_name, **kwargs):  # noqa: E501
        """detail one application   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.application_statistics_with_http_info(app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: identifier of the application  (required)
        :return: V1ApplicationStatisticsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method application_statistics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `application_statistics`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['appName'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ["BearerToken"]  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/applications/{appName}/statistics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ApplicationStatisticsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def compare_app(self, body, app_name, **kwargs):  # noqa: E501
        """compare application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.compare_app(body, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1AppCompareReq body: (required)
        :param str app_name: identifier of the application  (required)
        :return: V1AppCompareResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.compare_app_with_http_info(body, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.compare_app_with_http_info(body, app_name, **kwargs)  # noqa: E501
            return data

    def compare_app_with_http_info(self, body, app_name, **kwargs):  # noqa: E501
        """compare application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.compare_app_with_http_info(body, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1AppCompareReq body: (required)
        :param str app_name: identifier of the application  (required)
        :return: V1AppCompareResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method compare_app" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `compare_app`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `compare_app`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['appName'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ["BearerToken"]  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/applications/{appName}/compare', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1AppCompareResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_application(self, body, **kwargs):  # noqa: E501
        """create one application   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_application(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1CreateApplicationRequest body: (required)
        :return: V1ApplicationBase
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_application_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_application_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_application_with_http_info(self, body, **kwargs):  # noqa: E501
        """create one application   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_application_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1CreateApplicationRequest body: (required)
        :return: V1ApplicationBase
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_application" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_application`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ["BearerToken"]  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/applications', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ApplicationBase',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_application_env(self, body, app_name, **kwargs):  # noqa: E501
        """creating an application environment   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_application_env(body, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1CreateApplicationEnvbindingRequest body: (required)
        :param str app_name: identifier of the application  (required)
        :return: V1EnvBinding
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_application_env_with_http_info(body, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.create_application_env_with_http_info(body, app_name, **kwargs)  # noqa: E501
            return data

    def create_application_env_with_http_info(self, body, app_name, **kwargs):  # noqa: E501
        """creating an application environment   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_application_env_with_http_info(body, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1CreateApplicationEnvbindingRequest body: (required)
        :param str app_name: identifier of the application  (required)
        :return: V1EnvBinding
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_application_env" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_application_env`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `create_application_env`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['appName'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ["BearerToken"]  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/applications/{appName}/envs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1EnvBinding',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_application_policy(self, body, app_name, **kwargs):  # noqa: E501
        """create policy for application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_application_policy(body, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1CreatePolicyRequest body: (required)
        :param str app_name: identifier of the application (required)
        :return: V1PolicyBase
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_application_policy_with_http_info(body, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.create_application_policy_with_http_info(body, app_name, **kwargs)  # noqa: E501
            return data

    def create_application_policy_with_http_info(self, body, app_name, **kwargs):  # noqa: E501
        """create policy for application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_application_policy_with_http_info(body, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1CreatePolicyRequest body: (required)
        :param str app_name: identifier of the application (required)
        :return: V1PolicyBase
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_application_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_application_policy`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `create_application_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['appName'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ["BearerToken"]  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/applications/{appName}/policies', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1PolicyBase',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_application_trigger(self, body, app_name, **kwargs):  # noqa: E501
        """create one application trigger  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_application_trigger(body, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1CreateApplicationTriggerRequest body: (required)
        :param str app_name: identifier of the application  (required)
        :return: V1ApplicationTriggerBase
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_application_trigger_with_http_info(body, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.create_application_trigger_with_http_info(body, app_name, **kwargs)  # noqa: E501
            return data

    def create_application_trigger_with_http_info(self, body, app_name, **kwargs):  # noqa: E501
        """create one application trigger  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_application_trigger_with_http_info(body, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1CreateApplicationTriggerRequest body: (required)
        :param str app_name: identifier of the application  (required)
        :return: V1ApplicationTriggerBase
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_application_trigger" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_application_trigger`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `create_application_trigger`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['appName'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ["BearerToken"]  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/applications/{appName}/triggers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ApplicationTriggerBase',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_component(self, body, app_name, **kwargs):  # noqa: E501
        """create component  for application   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_component(body, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1CreateComponentRequest body: (required)
        :param str app_name: identifier of the application  (required)
        :return: V1ComponentBase
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_component_with_http_info(body, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.create_component_with_http_info(body, app_name, **kwargs)  # noqa: E501
            return data

    def create_component_with_http_info(self, body, app_name, **kwargs):  # noqa: E501
        """create component  for application   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_component_with_http_info(body, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1CreateComponentRequest body: (required)
        :param str app_name: identifier of the application  (required)
        :return: V1ComponentBase
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_component" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_component`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `create_component`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['appName'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ["BearerToken"]  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/applications/{appName}/components', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ComponentBase',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_or_update_application_workflow(self, body, app_name, **kwargs):  # noqa: E501
        """create application workflow  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_or_update_application_workflow(body, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1CreateWorkflowRequest body: (required)
        :param str app_name: identifier of the application. (required)
        :return: V1SimpleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_or_update_application_workflow_with_http_info(body, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.create_or_update_application_workflow_with_http_info(body, app_name, **kwargs)  # noqa: E501
            return data

    def create_or_update_application_workflow_with_http_info(self, body, app_name, **kwargs):  # noqa: E501
        """create application workflow  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_or_update_application_workflow_with_http_info(body, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1CreateWorkflowRequest body: (required)
        :param str app_name: identifier of the application. (required)
        :return: V1SimpleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_or_update_application_workflow" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_or_update_application_workflow`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `create_or_update_application_workflow`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['appName'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ["BearerToken"]  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/applications/{appName}/workflows', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1SimpleResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_application(self, app_name, **kwargs):  # noqa: E501
        """delete one application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_application(app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: identifier of the application  (required)
        :return: V1EmptyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_application_with_http_info(app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_application_with_http_info(app_name, **kwargs)  # noqa: E501
            return data

    def delete_application_with_http_info(self, app_name, **kwargs):  # noqa: E501
        """delete one application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_application_with_http_info(app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: identifier of the application  (required)
        :return: V1EmptyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_application" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `delete_application`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['appName'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ["BearerToken"]  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/applications/{appName}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1EmptyResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_application_env(self, app_name, env_name, **kwargs):  # noqa: E501
        """delete an application environment   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_application_env(app_name, env_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: identifier of the application  (required)
        :param str env_name: identifier of the envBinding  (required)
        :return: V1EmptyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_application_env_with_http_info(app_name, env_name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_application_env_with_http_info(app_name, env_name, **kwargs)  # noqa: E501
            return data

    def delete_application_env_with_http_info(self, app_name, env_name, **kwargs):  # noqa: E501
        """delete an application environment   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_application_env_with_http_info(app_name, env_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: identifier of the application  (required)
        :param str env_name: identifier of the envBinding  (required)
        :return: V1EmptyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_name', 'env_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_application_env" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `delete_application_env`")  # noqa: E501
        # verify the required parameter 'env_name' is set
        if ('env_name' not in params or
                params['env_name'] is None):
            raise ValueError("Missing the required parameter `env_name` when calling `delete_application_env`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['appName'] = params['app_name']  # noqa: E501
        if 'env_name' in params:
            path_params['envName'] = params['env_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ["BearerToken"]  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/applications/{appName}/envs/{envName}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1EmptyResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_application_policy(self, app_name, policy_name, **kwargs):  # noqa: E501
        """detail policy for application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_application_policy(app_name, policy_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: identifier of the application (required)
        :param str policy_name: identifier of the application policy (required)
        :param bool force: Force delete the policy and all references
        :return: V1EmptyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_application_policy_with_http_info(app_name, policy_name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_application_policy_with_http_info(app_name, policy_name, **kwargs)  # noqa: E501
            return data

    def delete_application_policy_with_http_info(self, app_name, policy_name, **kwargs):  # noqa: E501
        """detail policy for application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_application_policy_with_http_info(app_name, policy_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: identifier of the application (required)
        :param str policy_name: identifier of the application policy (required)
        :param bool force: Force delete the policy and all references
        :return: V1EmptyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_name', 'policy_name', 'force']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_application_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `delete_application_policy`")  # noqa: E501
        # verify the required parameter 'policy_name' is set
        if ('policy_name' not in params or
                params['policy_name'] is None):
            raise ValueError("Missing the required parameter `policy_name` when calling `delete_application_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['appName'] = params['app_name']  # noqa: E501
        if 'policy_name' in params:
            path_params['policyName'] = params['policy_name']  # noqa: E501

        query_params = []
        if 'force' in params:
            query_params.append(('force', params['force']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ["BearerToken"]  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/applications/{appName}/policies/{policyName}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1EmptyResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_application_trait(self, app_name, comp_name, trait_type, **kwargs):  # noqa: E501
        """delete trait from a component  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_application_trait(app_name, comp_name, trait_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: identifier of the application (required)
        :param str comp_name: identifier of the component (required)
        :param str trait_type: identifier of the type of trait (required)
        :return: V1ApplicationTrait
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_application_trait_with_http_info(app_name, comp_name, trait_type, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_application_trait_with_http_info(app_name, comp_name, trait_type, **kwargs)  # noqa: E501
            return data

    def delete_application_trait_with_http_info(self, app_name, comp_name, trait_type, **kwargs):  # noqa: E501
        """delete trait from a component  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_application_trait_with_http_info(app_name, comp_name, trait_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: identifier of the application (required)
        :param str comp_name: identifier of the component (required)
        :param str trait_type: identifier of the type of trait (required)
        :return: V1ApplicationTrait
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_name', 'comp_name', 'trait_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_application_trait" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `delete_application_trait`")  # noqa: E501
        # verify the required parameter 'comp_name' is set
        if ('comp_name' not in params or
                params['comp_name'] is None):
            raise ValueError("Missing the required parameter `comp_name` when calling `delete_application_trait`")  # noqa: E501
        # verify the required parameter 'trait_type' is set
        if ('trait_type' not in params or
                params['trait_type'] is None):
            raise ValueError("Missing the required parameter `trait_type` when calling `delete_application_trait`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['appName'] = params['app_name']  # noqa: E501
        if 'comp_name' in params:
            path_params['compName'] = params['comp_name']  # noqa: E501
        if 'trait_type' in params:
            path_params['traitType'] = params['trait_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ["BearerToken"]  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/applications/{appName}/components/{compName}/traits/{traitType}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ApplicationTrait',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_application_trigger(self, app_name, token, **kwargs):  # noqa: E501
        """delete one application trigger  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_application_trigger(app_name, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: identifier of the application  (required)
        :param str token: identifier of the trigger (required)
        :return: V1EmptyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_application_trigger_with_http_info(app_name, token, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_application_trigger_with_http_info(app_name, token, **kwargs)  # noqa: E501
            return data

    def delete_application_trigger_with_http_info(self, app_name, token, **kwargs):  # noqa: E501
        """delete one application trigger  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_application_trigger_with_http_info(app_name, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: identifier of the application  (required)
        :param str token: identifier of the trigger (required)
        :return: V1EmptyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_name', 'token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_application_trigger" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `delete_application_trigger`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `delete_application_trigger`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['appName'] = params['app_name']  # noqa: E501
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ["BearerToken"]  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/applications/{appName}/triggers/{token}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1EmptyResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_component(self, app_name, comp_name, **kwargs):  # noqa: E501
        """delete a component  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_component(app_name, comp_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: identifier of the application (required)
        :param str comp_name: identifier of the component (required)
        :return: V1EmptyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_component_with_http_info(app_name, comp_name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_component_with_http_info(app_name, comp_name, **kwargs)  # noqa: E501
            return data

    def delete_component_with_http_info(self, app_name, comp_name, **kwargs):  # noqa: E501
        """delete a component  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_component_with_http_info(app_name, comp_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: identifier of the application (required)
        :param str comp_name: identifier of the component (required)
        :return: V1EmptyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_name', 'comp_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_component" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `delete_component`")  # noqa: E501
        # verify the required parameter 'comp_name' is set
        if ('comp_name' not in params or
                params['comp_name'] is None):
            raise ValueError("Missing the required parameter `comp_name` when calling `delete_component`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['appName'] = params['app_name']  # noqa: E501
        if 'comp_name' in params:
            path_params['compName'] = params['comp_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ["BearerToken"]  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/applications/{appName}/components/{compName}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1EmptyResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_workflow(self, app_name, workflow_name, **kwargs):  # noqa: E501
        """deletet workflow  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_workflow(app_name, workflow_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: identifier of the application. (required)
        :param str workflow_name: identifier of the workflow (required)
        :return: V1SimpleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_workflow_with_http_info(app_name, workflow_name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_workflow_with_http_info(app_name, workflow_name, **kwargs)  # noqa: E501
            return data

    def delete_workflow_with_http_info(self, app_name, workflow_name, **kwargs):  # noqa: E501
        """deletet workflow  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_workflow_with_http_info(app_name, workflow_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: identifier of the application. (required)
        :param str workflow_name: identifier of the workflow (required)
        :return: V1SimpleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_name', 'workflow_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_workflow" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `delete_workflow`")  # noqa: E501
        # verify the required parameter 'workflow_name' is set
        if ('workflow_name' not in params or
                params['workflow_name'] is None):
            raise ValueError("Missing the required parameter `workflow_name` when calling `delete_workflow`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['appName'] = params['app_name']  # noqa: E501
        if 'workflow_name' in params:
            path_params['workflowName'] = params['workflow_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ["BearerToken"]  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/applications/{appName}/workflows/{workflowName}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1SimpleResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def deploy_application(self, body, app_name, **kwargs):  # noqa: E501
        """deploy or upgrade the application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.deploy_application(body, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1ApplicationDeployRequest body: (required)
        :param str app_name: identifier of the application  (required)
        :return: V1ApplicationDeployResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.deploy_application_with_http_info(body, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.deploy_application_with_http_info(body, app_name, **kwargs)  # noqa: E501
            return data

    def deploy_application_with_http_info(self, body, app_name, **kwargs):  # noqa: E501
        """deploy or upgrade the application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.deploy_application_with_http_info(body, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1ApplicationDeployRequest body: (required)
        :param str app_name: identifier of the application  (required)
        :return: V1ApplicationDeployResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method deploy_application" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `deploy_application`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `deploy_application`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['appName'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ["BearerToken"]  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/applications/{appName}/deploy', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ApplicationDeployResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def detail_application(self, app_name, **kwargs):  # noqa: E501
        """detail one application   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.detail_application(app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: identifier of the application  (required)
        :return: V1DetailApplicationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.detail_application_with_http_info(app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.detail_application_with_http_info(app_name, **kwargs)  # noqa: E501
            return data

    def detail_application_with_http_info(self, app_name, **kwargs):  # noqa: E501
        """detail one application   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.detail_application_with_http_info(app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: identifier of the application  (required)
        :return: V1DetailApplicationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method detail_application" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `detail_application`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['appName'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ["BearerToken"]  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/applications/{appName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1DetailApplicationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def detail_application_policy(self, app_name, policy_name, **kwargs):  # noqa: E501
        """detail policy for application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.detail_application_policy(app_name, policy_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: identifier of the application (required)
        :param str policy_name: identifier of the application policy (required)
        :return: V1DetailPolicyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.detail_application_policy_with_http_info(app_name, policy_name, **kwargs)  # noqa: E501
        else:
            (data) = self.detail_application_policy_with_http_info(app_name, policy_name, **kwargs)  # noqa: E501
            return data

    def detail_application_policy_with_http_info(self, app_name, policy_name, **kwargs):  # noqa: E501
        """detail policy for application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.detail_application_policy_with_http_info(app_name, policy_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: identifier of the application (required)
        :param str policy_name: identifier of the application policy (required)
        :return: V1DetailPolicyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_name', 'policy_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method detail_application_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `detail_application_policy`")  # noqa: E501
        # verify the required parameter 'policy_name' is set
        if ('policy_name' not in params or
                params['policy_name'] is None):
            raise ValueError("Missing the required parameter `policy_name` when calling `detail_application_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['appName'] = params['app_name']  # noqa: E501
        if 'policy_name' in params:
            path_params['policyName'] = params['policy_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ["BearerToken"]  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/applications/{appName}/policies/{policyName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1DetailPolicyResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def detail_application_revision(self, app_name, revision, **kwargs):  # noqa: E501
        """detail revision for application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.detail_application_revision(app_name, revision, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: identifier of the application (required)
        :param str revision: identifier of the application revision (required)
        :return: V1DetailRevisionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.detail_application_revision_with_http_info(app_name, revision, **kwargs)  # noqa: E501
        else:
            (data) = self.detail_application_revision_with_http_info(app_name, revision, **kwargs)  # noqa: E501
            return data

    def detail_application_revision_with_http_info(self, app_name, revision, **kwargs):  # noqa: E501
        """detail revision for application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.detail_application_revision_with_http_info(app_name, revision, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: identifier of the application (required)
        :param str revision: identifier of the application revision (required)
        :return: V1DetailRevisionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_name', 'revision']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method detail_application_revision" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `detail_application_revision`")  # noqa: E501
        # verify the required parameter 'revision' is set
        if ('revision' not in params or
                params['revision'] is None):
            raise ValueError("Missing the required parameter `revision` when calling `detail_application_revision`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['appName'] = params['app_name']  # noqa: E501
        if 'revision' in params:
            path_params['revision'] = params['revision']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ["BearerToken"]  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/applications/{appName}/revisions/{revision}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1DetailRevisionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def detail_component(self, app_name, comp_name, **kwargs):  # noqa: E501
        """detail component for application   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.detail_component(app_name, comp_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: identifier of the application  (required)
        :param str comp_name: identifier of the component (required)
        :return: V1DetailComponentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.detail_component_with_http_info(app_name, comp_name, **kwargs)  # noqa: E501
        else:
            (data) = self.detail_component_with_http_info(app_name, comp_name, **kwargs)  # noqa: E501
            return data

    def detail_component_with_http_info(self, app_name, comp_name, **kwargs):  # noqa: E501
        """detail component for application   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.detail_component_with_http_info(app_name, comp_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: identifier of the application  (required)
        :param str comp_name: identifier of the component (required)
        :return: V1DetailComponentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_name', 'comp_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method detail_component" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `detail_component`")  # noqa: E501
        # verify the required parameter 'comp_name' is set
        if ('comp_name' not in params or
                params['comp_name'] is None):
            raise ValueError("Missing the required parameter `comp_name` when calling `detail_component`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['appName'] = params['app_name']  # noqa: E501
        if 'comp_name' in params:
            path_params['compName'] = params['comp_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ["BearerToken"]  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/applications/{appName}/components/{compName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1DetailComponentResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def detail_workflow(self, app_name, workflow_name, **kwargs):  # noqa: E501
        """detail application workflow  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.detail_workflow(app_name, workflow_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: identifier of the application. (required)
        :param str workflow_name: identifier of the workfloc. (required)
        :return: V1SimpleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.detail_workflow_with_http_info(app_name, workflow_name, **kwargs)  # noqa: E501
        else:
            (data) = self.detail_workflow_with_http_info(app_name, workflow_name, **kwargs)  # noqa: E501
            return data

    def detail_workflow_with_http_info(self, app_name, workflow_name, **kwargs):  # noqa: E501
        """detail application workflow  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.detail_workflow_with_http_info(app_name, workflow_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: identifier of the application. (required)
        :param str workflow_name: identifier of the workfloc. (required)
        :return: V1SimpleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_name', 'workflow_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method detail_workflow" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `detail_workflow`")  # noqa: E501
        # verify the required parameter 'workflow_name' is set
        if ('workflow_name' not in params or
                params['workflow_name'] is None):
            raise ValueError("Missing the required parameter `workflow_name` when calling `detail_workflow`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['appName'] = params['app_name']  # noqa: E501
        if 'workflow_name' in params:
            path_params['workflowName'] = params['workflow_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ["BearerToken"]  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/applications/{appName}/workflows/{workflowName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1SimpleResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def detail_workflow_record(self, app_name, workflow_name, record, **kwargs):  # noqa: E501
        """query application workflow execution record detail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.detail_workflow_record(app_name, workflow_name, record, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: identifier of the application. (required)
        :param str workflow_name: identifier of the workflow (required)
        :param str record: identifier of the workflow record (required)
        :return: V1SimpleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.detail_workflow_record_with_http_info(app_name, workflow_name, record, **kwargs)  # noqa: E501
        else:
            (data) = self.detail_workflow_record_with_http_info(app_name, workflow_name, record, **kwargs)  # noqa: E501
            return data

    def detail_workflow_record_with_http_info(self, app_name, workflow_name, record, **kwargs):  # noqa: E501
        """query application workflow execution record detail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.detail_workflow_record_with_http_info(app_name, workflow_name, record, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: identifier of the application. (required)
        :param str workflow_name: identifier of the workflow (required)
        :param str record: identifier of the workflow record (required)
        :return: V1SimpleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_name', 'workflow_name', 'record']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method detail_workflow_record" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `detail_workflow_record`")  # noqa: E501
        # verify the required parameter 'workflow_name' is set
        if ('workflow_name' not in params or
                params['workflow_name'] is None):
            raise ValueError("Missing the required parameter `workflow_name` when calling `detail_workflow_record`")  # noqa: E501
        # verify the required parameter 'record' is set
        if ('record' not in params or
                params['record'] is None):
            raise ValueError("Missing the required parameter `record` when calling `detail_workflow_record`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['appName'] = params['app_name']  # noqa: E501
        if 'workflow_name' in params:
            path_params['workflowName'] = params['workflow_name']  # noqa: E501
        if 'record' in params:
            path_params['record'] = params['record']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ["BearerToken"]  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/applications/{appName}/workflows/{workflowName}/records/{record}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1SimpleResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dry_run_app_or_revision(self, body, app_name, **kwargs):  # noqa: E501
        """dry-run application to latest revision  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dry_run_app_or_revision(body, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1AppDryRunReq body: (required)
        :param str app_name: identifier of the application  (required)
        :return: V1AppDryRunResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dry_run_app_or_revision_with_http_info(body, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.dry_run_app_or_revision_with_http_info(body, app_name, **kwargs)  # noqa: E501
            return data

    def dry_run_app_or_revision_with_http_info(self, body, app_name, **kwargs):  # noqa: E501
        """dry-run application to latest revision  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dry_run_app_or_revision_with_http_info(body, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1AppDryRunReq body: (required)
        :param str app_name: identifier of the application  (required)
        :return: V1AppDryRunResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dry_run_app_or_revision" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `dry_run_app_or_revision`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `dry_run_app_or_revision`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['appName'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ["BearerToken"]  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/applications/{appName}/dry-run', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1AppDryRunResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_application_status(self, app_name, env_name, **kwargs):  # noqa: E501
        """get application status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_application_status(app_name, env_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: identifier of the application  (required)
        :param str env_name: identifier of the application envbinding (required)
        :return: V1ApplicationStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_application_status_with_http_info(app_name, env_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_application_status_with_http_info(app_name, env_name, **kwargs)  # noqa: E501
            return data

    def get_application_status_with_http_info(self, app_name, env_name, **kwargs):  # noqa: E501
        """get application status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_application_status_with_http_info(app_name, env_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: identifier of the application  (required)
        :param str env_name: identifier of the application envbinding (required)
        :return: V1ApplicationStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_name', 'env_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_application_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `get_application_status`")  # noqa: E501
        # verify the required parameter 'env_name' is set
        if ('env_name' not in params or
                params['env_name'] is None):
            raise ValueError("Missing the required parameter `env_name` when calling `get_application_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['appName'] = params['app_name']  # noqa: E501
        if 'env_name' in params:
            path_params['envName'] = params['env_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ["BearerToken"]  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/applications/{appName}/envs/{envName}/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ApplicationStatusResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_application_components(self, app_name, **kwargs):  # noqa: E501
        """gets the list of application components  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_application_components(app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: identifier of the application  (required)
        :param str env_name: list components that deployed in define env
        :return: V1ComponentListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_application_components_with_http_info(app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.list_application_components_with_http_info(app_name, **kwargs)  # noqa: E501
            return data

    def list_application_components_with_http_info(self, app_name, **kwargs):  # noqa: E501
        """gets the list of application components  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_application_components_with_http_info(app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: identifier of the application  (required)
        :param str env_name: list components that deployed in define env
        :return: V1ComponentListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_name', 'env_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_application_components" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `list_application_components`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['appName'] = params['app_name']  # noqa: E501

        query_params = []
        if 'env_name' in params:
            query_params.append(('envName', params['env_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ["BearerToken"]  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/applications/{appName}/components', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ComponentListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_application_envs(self, app_name, **kwargs):  # noqa: E501
        """list policy for application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_application_envs(app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: identifier of the application  (required)
        :return: V1ListApplicationEnvBinding
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_application_envs_with_http_info(app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.list_application_envs_with_http_info(app_name, **kwargs)  # noqa: E501
            return data

    def list_application_envs_with_http_info(self, app_name, **kwargs):  # noqa: E501
        """list policy for application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_application_envs_with_http_info(app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: identifier of the application  (required)
        :return: V1ListApplicationEnvBinding
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_application_envs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `list_application_envs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['appName'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ["BearerToken"]  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/applications/{appName}/envs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ListApplicationEnvBinding',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_application_policies(self, app_name, **kwargs):  # noqa: E501
        """list policy for application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_application_policies(app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: identifier of the application  (required)
        :return: V1ListApplicationPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_application_policies_with_http_info(app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.list_application_policies_with_http_info(app_name, **kwargs)  # noqa: E501
            return data

    def list_application_policies_with_http_info(self, app_name, **kwargs):  # noqa: E501
        """list policy for application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_application_policies_with_http_info(app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: identifier of the application  (required)
        :return: V1ListApplicationPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_application_policies" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `list_application_policies`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['appName'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ["BearerToken"]  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/applications/{appName}/policies', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ListApplicationPolicy',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_application_records(self, app_name, **kwargs):  # noqa: E501
        """list application records  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_application_records(app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: identifier of the application. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_application_records_with_http_info(app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.list_application_records_with_http_info(app_name, **kwargs)  # noqa: E501
            return data

    def list_application_records_with_http_info(self, app_name, **kwargs):  # noqa: E501
        """list application records  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_application_records_with_http_info(app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: identifier of the application. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_application_records" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `list_application_records`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['appName'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ["BearerToken"]  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/applications/{appName}/records', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_application_revisions(self, app_name, **kwargs):  # noqa: E501
        """list revisions for application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_application_revisions(app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: identifier of the application  (required)
        :param str env_name: query identifier of the env
        :param str status: query identifier of the status
        :param int page: query the page number
        :param int page_size: query the page size number
        :return: V1ListRevisionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_application_revisions_with_http_info(app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.list_application_revisions_with_http_info(app_name, **kwargs)  # noqa: E501
            return data

    def list_application_revisions_with_http_info(self, app_name, **kwargs):  # noqa: E501
        """list revisions for application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_application_revisions_with_http_info(app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: identifier of the application  (required)
        :param str env_name: query identifier of the env
        :param str status: query identifier of the status
        :param int page: query the page number
        :param int page_size: query the page size number
        :return: V1ListRevisionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_name', 'env_name', 'status', 'page', 'page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_application_revisions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `list_application_revisions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['appName'] = params['app_name']  # noqa: E501

        query_params = []
        if 'env_name' in params:
            query_params.append(('envName', params['env_name']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ["BearerToken"]  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/applications/{appName}/revisions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ListRevisionsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_application_triggers(self, app_name, **kwargs):  # noqa: E501
        """list application triggers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_application_triggers(app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: identifier of the application  (required)
        :return: V1ListApplicationTriggerResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_application_triggers_with_http_info(app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.list_application_triggers_with_http_info(app_name, **kwargs)  # noqa: E501
            return data

    def list_application_triggers_with_http_info(self, app_name, **kwargs):  # noqa: E501
        """list application triggers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_application_triggers_with_http_info(app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: identifier of the application  (required)
        :return: V1ListApplicationTriggerResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_application_triggers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `list_application_triggers`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['appName'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ["BearerToken"]  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/applications/{appName}/triggers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ListApplicationTriggerResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_application_workflows(self, app_name, **kwargs):  # noqa: E501
        """list application workflow  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_application_workflows(app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: identifier of the application. (required)
        :return: V1SimpleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_application_workflows_with_http_info(app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.list_application_workflows_with_http_info(app_name, **kwargs)  # noqa: E501
            return data

    def list_application_workflows_with_http_info(self, app_name, **kwargs):  # noqa: E501
        """list application workflow  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_application_workflows_with_http_info(app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: identifier of the application. (required)
        :return: V1SimpleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_application_workflows" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `list_application_workflows`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['appName'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ["BearerToken"]  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/applications/{appName}/workflows', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1SimpleResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_applications(self, **kwargs):  # noqa: E501
        """list all applications  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_applications(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: Fuzzy search based on name or description
        :param str project: search base on project name
        :param str env: search base on env name
        :param str target_name: Name of the application delivery target
        :return: V1ListApplicationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_applications_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_applications_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_applications_with_http_info(self, **kwargs):  # noqa: E501
        """list all applications  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_applications_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: Fuzzy search based on name or description
        :param str project: search base on project name
        :param str env: search base on env name
        :param str target_name: Name of the application delivery target
        :return: V1ListApplicationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['query', 'project', 'env', 'target_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_applications" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'query' in params:
            query_params.append(('query', params['query']))  # noqa: E501
        if 'project' in params:
            query_params.append(('project', params['project']))  # noqa: E501
        if 'env' in params:
            query_params.append(('env', params['env']))  # noqa: E501
        if 'target_name' in params:
            query_params.append(('targetName', params['target_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ["BearerToken"]  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/applications', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ListApplicationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_workflow_records(self, app_name, workflow_name, **kwargs):  # noqa: E501
        """query application workflow execution record  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_workflow_records(app_name, workflow_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: identifier of the application. (required)
        :param str workflow_name: identifier of the workflow (required)
        :param int page: query the page number
        :param int page_size: query the page size number
        :return: V1SimpleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_workflow_records_with_http_info(app_name, workflow_name, **kwargs)  # noqa: E501
        else:
            (data) = self.list_workflow_records_with_http_info(app_name, workflow_name, **kwargs)  # noqa: E501
            return data

    def list_workflow_records_with_http_info(self, app_name, workflow_name, **kwargs):  # noqa: E501
        """query application workflow execution record  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_workflow_records_with_http_info(app_name, workflow_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: identifier of the application. (required)
        :param str workflow_name: identifier of the workflow (required)
        :param int page: query the page number
        :param int page_size: query the page size number
        :return: V1SimpleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_name', 'workflow_name', 'page', 'page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_workflow_records" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `list_workflow_records`")  # noqa: E501
        # verify the required parameter 'workflow_name' is set
        if ('workflow_name' not in params or
                params['workflow_name'] is None):
            raise ValueError("Missing the required parameter `workflow_name` when calling `list_workflow_records`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['appName'] = params['app_name']  # noqa: E501
        if 'workflow_name' in params:
            path_params['workflowName'] = params['workflow_name']  # noqa: E501

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ["BearerToken"]  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/applications/{appName}/workflows/{workflowName}/records', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1SimpleResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def publish_application_template(self, body, app_name, **kwargs):  # noqa: E501
        """create one application template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.publish_application_template(body, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1CreateApplicationTemplateRequest body: (required)
        :param str app_name: identifier of the application  (required)
        :return: V1ApplicationTemplateBase
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.publish_application_template_with_http_info(body, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.publish_application_template_with_http_info(body, app_name, **kwargs)  # noqa: E501
            return data

    def publish_application_template_with_http_info(self, body, app_name, **kwargs):  # noqa: E501
        """create one application template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.publish_application_template_with_http_info(body, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1CreateApplicationTemplateRequest body: (required)
        :param str app_name: identifier of the application  (required)
        :return: V1ApplicationTemplateBase
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method publish_application_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `publish_application_template`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `publish_application_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['appName'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ["BearerToken"]  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/applications/{appName}/template', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ApplicationTemplateBase',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def recycle_application_env(self, app_name, env_name, **kwargs):  # noqa: E501
        """get application status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.recycle_application_env(app_name, env_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: identifier of the application  (required)
        :param str env_name: identifier of the application envbinding (required)
        :return: V1EmptyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.recycle_application_env_with_http_info(app_name, env_name, **kwargs)  # noqa: E501
        else:
            (data) = self.recycle_application_env_with_http_info(app_name, env_name, **kwargs)  # noqa: E501
            return data

    def recycle_application_env_with_http_info(self, app_name, env_name, **kwargs):  # noqa: E501
        """get application status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.recycle_application_env_with_http_info(app_name, env_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: identifier of the application  (required)
        :param str env_name: identifier of the application envbinding (required)
        :return: V1EmptyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_name', 'env_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method recycle_application_env" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `recycle_application_env`")  # noqa: E501
        # verify the required parameter 'env_name' is set
        if ('env_name' not in params or
                params['env_name'] is None):
            raise ValueError("Missing the required parameter `env_name` when calling `recycle_application_env`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['appName'] = params['app_name']  # noqa: E501
        if 'env_name' in params:
            path_params['envName'] = params['env_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ["BearerToken"]  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/applications/{appName}/envs/{envName}/recycle', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1EmptyResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reset_app_to_latest_revision(self, app_name, **kwargs):  # noqa: E501
        """reset application to latest revision  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reset_app_to_latest_revision(app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: identifier of the application  (required)
        :return: V1AppResetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reset_app_to_latest_revision_with_http_info(app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.reset_app_to_latest_revision_with_http_info(app_name, **kwargs)  # noqa: E501
            return data

    def reset_app_to_latest_revision_with_http_info(self, app_name, **kwargs):  # noqa: E501
        """reset application to latest revision  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reset_app_to_latest_revision_with_http_info(app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: identifier of the application  (required)
        :return: V1AppResetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reset_app_to_latest_revision" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `reset_app_to_latest_revision`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['appName'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ["BearerToken"]  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/applications/{appName}/reset', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1AppResetResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resume_workflow_record(self, app_name, workflow_name, record, **kwargs):  # noqa: E501
        """resume suspend workflow record  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resume_workflow_record(app_name, workflow_name, record, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: identifier of the application. (required)
        :param str workflow_name: identifier of the workflow (required)
        :param str record: identifier of the  workflow record (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.resume_workflow_record_with_http_info(app_name, workflow_name, record, **kwargs)  # noqa: E501
        else:
            (data) = self.resume_workflow_record_with_http_info(app_name, workflow_name, record, **kwargs)  # noqa: E501
            return data

    def resume_workflow_record_with_http_info(self, app_name, workflow_name, record, **kwargs):  # noqa: E501
        """resume suspend workflow record  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resume_workflow_record_with_http_info(app_name, workflow_name, record, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: identifier of the application. (required)
        :param str workflow_name: identifier of the workflow (required)
        :param str record: identifier of the  workflow record (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_name', 'workflow_name', 'record']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resume_workflow_record" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `resume_workflow_record`")  # noqa: E501
        # verify the required parameter 'workflow_name' is set
        if ('workflow_name' not in params or
                params['workflow_name'] is None):
            raise ValueError("Missing the required parameter `workflow_name` when calling `resume_workflow_record`")  # noqa: E501
        # verify the required parameter 'record' is set
        if ('record' not in params or
                params['record'] is None):
            raise ValueError("Missing the required parameter `record` when calling `resume_workflow_record`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['appName'] = params['app_name']  # noqa: E501
        if 'workflow_name' in params:
            path_params['workflowName'] = params['workflow_name']  # noqa: E501
        if 'record' in params:
            path_params['record'] = params['record']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ["BearerToken"]  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/applications/{appName}/workflows/{workflowName}/records/{record}/resume', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rollback_workflow_record(self, app_name, workflow_name, record, **kwargs):  # noqa: E501
        """rollback suspend application record  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rollback_workflow_record(app_name, workflow_name, record, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: identifier of the application. (required)
        :param str workflow_name: identifier of the workflow (required)
        :param str record: identifier of the workflow record (required)
        :param str rollback_version: identifier of the rollback revision
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.rollback_workflow_record_with_http_info(app_name, workflow_name, record, **kwargs)  # noqa: E501
        else:
            (data) = self.rollback_workflow_record_with_http_info(app_name, workflow_name, record, **kwargs)  # noqa: E501
            return data

    def rollback_workflow_record_with_http_info(self, app_name, workflow_name, record, **kwargs):  # noqa: E501
        """rollback suspend application record  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rollback_workflow_record_with_http_info(app_name, workflow_name, record, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: identifier of the application. (required)
        :param str workflow_name: identifier of the workflow (required)
        :param str record: identifier of the workflow record (required)
        :param str rollback_version: identifier of the rollback revision
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_name', 'workflow_name', 'record', 'rollback_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rollback_workflow_record" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `rollback_workflow_record`")  # noqa: E501
        # verify the required parameter 'workflow_name' is set
        if ('workflow_name' not in params or
                params['workflow_name'] is None):
            raise ValueError("Missing the required parameter `workflow_name` when calling `rollback_workflow_record`")  # noqa: E501
        # verify the required parameter 'record' is set
        if ('record' not in params or
                params['record'] is None):
            raise ValueError("Missing the required parameter `record` when calling `rollback_workflow_record`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['appName'] = params['app_name']  # noqa: E501
        if 'workflow_name' in params:
            path_params['workflowName'] = params['workflow_name']  # noqa: E501
        if 'record' in params:
            path_params['record'] = params['record']  # noqa: E501

        query_params = []
        if 'rollback_version' in params:
            query_params.append(('rollbackVersion', params['rollback_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ["BearerToken"]  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/applications/{appName}/workflows/{workflowName}/records/{record}/rollback', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def terminate_workflow_record(self, app_name, workflow_name, record, **kwargs):  # noqa: E501
        """terminate suspend workflow record  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.terminate_workflow_record(app_name, workflow_name, record, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: identifier of the application. (required)
        :param str workflow_name: identifier of the workflow (required)
        :param str record: identifier of the workflow record (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.terminate_workflow_record_with_http_info(app_name, workflow_name, record, **kwargs)  # noqa: E501
        else:
            (data) = self.terminate_workflow_record_with_http_info(app_name, workflow_name, record, **kwargs)  # noqa: E501
            return data

    def terminate_workflow_record_with_http_info(self, app_name, workflow_name, record, **kwargs):  # noqa: E501
        """terminate suspend workflow record  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.terminate_workflow_record_with_http_info(app_name, workflow_name, record, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_name: identifier of the application. (required)
        :param str workflow_name: identifier of the workflow (required)
        :param str record: identifier of the workflow record (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_name', 'workflow_name', 'record']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method terminate_workflow_record" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `terminate_workflow_record`")  # noqa: E501
        # verify the required parameter 'workflow_name' is set
        if ('workflow_name' not in params or
                params['workflow_name'] is None):
            raise ValueError("Missing the required parameter `workflow_name` when calling `terminate_workflow_record`")  # noqa: E501
        # verify the required parameter 'record' is set
        if ('record' not in params or
                params['record'] is None):
            raise ValueError("Missing the required parameter `record` when calling `terminate_workflow_record`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['appName'] = params['app_name']  # noqa: E501
        if 'workflow_name' in params:
            path_params['workflowName'] = params['workflow_name']  # noqa: E501
        if 'record' in params:
            path_params['record'] = params['record']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ["BearerToken"]  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/applications/{appName}/workflows/{workflowName}/records/{record}/terminate', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_application(self, body, app_name, **kwargs):  # noqa: E501
        """update one application   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_application(body, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1UpdateApplicationRequest body: (required)
        :param str app_name: identifier of the application  (required)
        :return: V1ApplicationBase
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_application_with_http_info(body, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.update_application_with_http_info(body, app_name, **kwargs)  # noqa: E501
            return data

    def update_application_with_http_info(self, body, app_name, **kwargs):  # noqa: E501
        """update one application   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_application_with_http_info(body, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1UpdateApplicationRequest body: (required)
        :param str app_name: identifier of the application  (required)
        :return: V1ApplicationBase
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_application" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_application`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `update_application`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['appName'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ["BearerToken"]  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/applications/{appName}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ApplicationBase',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_application_env(self, body, app_name, env_name, **kwargs):  # noqa: E501
        """set application  differences in the specified environment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_application_env(body, app_name, env_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1PutApplicationEnvBindingRequest body: (required)
        :param str app_name: identifier of the application  (required)
        :param str env_name: identifier of the envBinding  (required)
        :return: V1EnvBinding
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_application_env_with_http_info(body, app_name, env_name, **kwargs)  # noqa: E501
        else:
            (data) = self.update_application_env_with_http_info(body, app_name, env_name, **kwargs)  # noqa: E501
            return data

    def update_application_env_with_http_info(self, body, app_name, env_name, **kwargs):  # noqa: E501
        """set application  differences in the specified environment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_application_env_with_http_info(body, app_name, env_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1PutApplicationEnvBindingRequest body: (required)
        :param str app_name: identifier of the application  (required)
        :param str env_name: identifier of the envBinding  (required)
        :return: V1EnvBinding
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'app_name', 'env_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_application_env" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_application_env`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `update_application_env`")  # noqa: E501
        # verify the required parameter 'env_name' is set
        if ('env_name' not in params or
                params['env_name'] is None):
            raise ValueError("Missing the required parameter `env_name` when calling `update_application_env`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['appName'] = params['app_name']  # noqa: E501
        if 'env_name' in params:
            path_params['envName'] = params['env_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ["BearerToken"]  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/applications/{appName}/envs/{envName}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1EnvBinding',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_application_policy(self, body, app_name, policy_name, **kwargs):  # noqa: E501
        """update policy for application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_application_policy(body, app_name, policy_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1UpdatePolicyRequest body: (required)
        :param str app_name: identifier of the application (required)
        :param str policy_name: identifier of the application policy (required)
        :return: V1DetailPolicyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_application_policy_with_http_info(body, app_name, policy_name, **kwargs)  # noqa: E501
        else:
            (data) = self.update_application_policy_with_http_info(body, app_name, policy_name, **kwargs)  # noqa: E501
            return data

    def update_application_policy_with_http_info(self, body, app_name, policy_name, **kwargs):  # noqa: E501
        """update policy for application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_application_policy_with_http_info(body, app_name, policy_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1UpdatePolicyRequest body: (required)
        :param str app_name: identifier of the application (required)
        :param str policy_name: identifier of the application policy (required)
        :return: V1DetailPolicyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'app_name', 'policy_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_application_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_application_policy`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `update_application_policy`")  # noqa: E501
        # verify the required parameter 'policy_name' is set
        if ('policy_name' not in params or
                params['policy_name'] is None):
            raise ValueError("Missing the required parameter `policy_name` when calling `update_application_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['appName'] = params['app_name']  # noqa: E501
        if 'policy_name' in params:
            path_params['policyName'] = params['policy_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ["BearerToken"]  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/applications/{appName}/policies/{policyName}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1DetailPolicyResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_application_trait(self, body, app_name, comp_name, trait_type, **kwargs):  # noqa: E501
        """update trait from a component  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_application_trait(body, app_name, comp_name, trait_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1UpdateApplicationTraitRequest body: (required)
        :param str app_name: identifier of the application (required)
        :param str comp_name: identifier of the component (required)
        :param str trait_type: identifier of the type of trait (required)
        :return: V1ApplicationTrait
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_application_trait_with_http_info(body, app_name, comp_name, trait_type, **kwargs)  # noqa: E501
        else:
            (data) = self.update_application_trait_with_http_info(body, app_name, comp_name, trait_type, **kwargs)  # noqa: E501
            return data

    def update_application_trait_with_http_info(self, body, app_name, comp_name, trait_type, **kwargs):  # noqa: E501
        """update trait from a component  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_application_trait_with_http_info(body, app_name, comp_name, trait_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1UpdateApplicationTraitRequest body: (required)
        :param str app_name: identifier of the application (required)
        :param str comp_name: identifier of the component (required)
        :param str trait_type: identifier of the type of trait (required)
        :return: V1ApplicationTrait
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'app_name', 'comp_name', 'trait_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_application_trait" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_application_trait`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `update_application_trait`")  # noqa: E501
        # verify the required parameter 'comp_name' is set
        if ('comp_name' not in params or
                params['comp_name'] is None):
            raise ValueError("Missing the required parameter `comp_name` when calling `update_application_trait`")  # noqa: E501
        # verify the required parameter 'trait_type' is set
        if ('trait_type' not in params or
                params['trait_type'] is None):
            raise ValueError("Missing the required parameter `trait_type` when calling `update_application_trait`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['appName'] = params['app_name']  # noqa: E501
        if 'comp_name' in params:
            path_params['compName'] = params['comp_name']  # noqa: E501
        if 'trait_type' in params:
            path_params['traitType'] = params['trait_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ["BearerToken"]  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/applications/{appName}/components/{compName}/traits/{traitType}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ApplicationTrait',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_component(self, body, app_name, comp_name, **kwargs):  # noqa: E501
        """update component config  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_component(body, app_name, comp_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1UpdateApplicationComponentRequest body: (required)
        :param str app_name: identifier of the application (required)
        :param str comp_name: identifier of the component (required)
        :return: V1ComponentBase
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_component_with_http_info(body, app_name, comp_name, **kwargs)  # noqa: E501
        else:
            (data) = self.update_component_with_http_info(body, app_name, comp_name, **kwargs)  # noqa: E501
            return data

    def update_component_with_http_info(self, body, app_name, comp_name, **kwargs):  # noqa: E501
        """update component config  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_component_with_http_info(body, app_name, comp_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1UpdateApplicationComponentRequest body: (required)
        :param str app_name: identifier of the application (required)
        :param str comp_name: identifier of the component (required)
        :return: V1ComponentBase
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'app_name', 'comp_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_component" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_component`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `update_component`")  # noqa: E501
        # verify the required parameter 'comp_name' is set
        if ('comp_name' not in params or
                params['comp_name'] is None):
            raise ValueError("Missing the required parameter `comp_name` when calling `update_component`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['appName'] = params['app_name']  # noqa: E501
        if 'comp_name' in params:
            path_params['compName'] = params['comp_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ["BearerToken"]  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/applications/{appName}/components/{compName}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ComponentBase',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_workflow(self, body, app_name, workflow_name, **kwargs):  # noqa: E501
        """update application workflow config  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_workflow(body, app_name, workflow_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1UpdateWorkflowRequest body: (required)
        :param str app_name: identifier of the application. (required)
        :param str workflow_name: identifier of the workflow (required)
        :return: V1SimpleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_workflow_with_http_info(body, app_name, workflow_name, **kwargs)  # noqa: E501
        else:
            (data) = self.update_workflow_with_http_info(body, app_name, workflow_name, **kwargs)  # noqa: E501
            return data

    def update_workflow_with_http_info(self, body, app_name, workflow_name, **kwargs):  # noqa: E501
        """update application workflow config  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_workflow_with_http_info(body, app_name, workflow_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1UpdateWorkflowRequest body: (required)
        :param str app_name: identifier of the application. (required)
        :param str workflow_name: identifier of the workflow (required)
        :return: V1SimpleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'app_name', 'workflow_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_workflow" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_workflow`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `update_workflow`")  # noqa: E501
        # verify the required parameter 'workflow_name' is set
        if ('workflow_name' not in params or
                params['workflow_name'] is None):
            raise ValueError("Missing the required parameter `workflow_name` when calling `update_workflow`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['appName'] = params['app_name']  # noqa: E501
        if 'workflow_name' in params:
            path_params['workflowName'] = params['workflow_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ["BearerToken"]  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/applications/{appName}/workflows/{workflowName}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1SimpleResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

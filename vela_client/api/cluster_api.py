# coding: utf-8

"""
    Kubevela api doc

    Kubevela api doc  # noqa: E501

    OpenAPI spec version: v1beta1
    Contact: feedback@mail.kubevela.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from vela_client.api_client import ApiClient


class ClusterApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def connect_cloud_cluster(self, body, provider, **kwargs):  # noqa: E501
        """create cluster from cloud cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.connect_cloud_cluster(body, provider, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1ConnectCloudClusterRequest body: (required)
        :param str provider: identifier of the cloud provider (required)
        :return: V1ClusterBase
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.connect_cloud_cluster_with_http_info(body, provider, **kwargs)  # noqa: E501
        else:
            (data) = self.connect_cloud_cluster_with_http_info(body, provider, **kwargs)  # noqa: E501
            return data

    def connect_cloud_cluster_with_http_info(self, body, provider, **kwargs):  # noqa: E501
        """create cluster from cloud cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.connect_cloud_cluster_with_http_info(body, provider, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1ConnectCloudClusterRequest body: (required)
        :param str provider: identifier of the cloud provider (required)
        :return: V1ClusterBase
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'provider']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method connect_cloud_cluster" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `connect_cloud_cluster`")  # noqa: E501
        # verify the required parameter 'provider' is set
        if ('provider' not in params or
                params['provider'] is None):
            raise ValueError("Missing the required parameter `provider` when calling `connect_cloud_cluster`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'provider' in params:
            path_params['provider'] = params['provider']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/clusters/cloud_clusters/{provider}/connect', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ClusterBase',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_cloud_cluster(self, body, provider, **kwargs):  # noqa: E501
        """create cloud cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_cloud_cluster(body, provider, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1CreateCloudClusterRequest body: (required)
        :param str provider: identifier of the cloud provider (required)
        :return: V1CreateCloudClusterResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_cloud_cluster_with_http_info(body, provider, **kwargs)  # noqa: E501
        else:
            (data) = self.create_cloud_cluster_with_http_info(body, provider, **kwargs)  # noqa: E501
            return data

    def create_cloud_cluster_with_http_info(self, body, provider, **kwargs):  # noqa: E501
        """create cloud cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_cloud_cluster_with_http_info(body, provider, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1CreateCloudClusterRequest body: (required)
        :param str provider: identifier of the cloud provider (required)
        :return: V1CreateCloudClusterResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'provider']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_cloud_cluster" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_cloud_cluster`")  # noqa: E501
        # verify the required parameter 'provider' is set
        if ('provider' not in params or
                params['provider'] is None):
            raise ValueError("Missing the required parameter `provider` when calling `create_cloud_cluster`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'provider' in params:
            path_params['provider'] = params['provider']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/clusters/cloud_clusters/{provider}/create', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1CreateCloudClusterResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_kube_cluster(self, body, **kwargs):  # noqa: E501
        """create cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_kube_cluster(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1CreateClusterRequest body: (required)
        :return: V1ClusterBase
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_kube_cluster_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_kube_cluster_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_kube_cluster_with_http_info(self, body, **kwargs):  # noqa: E501
        """create cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_kube_cluster_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1CreateClusterRequest body: (required)
        :return: V1ClusterBase
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_kube_cluster" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_kube_cluster`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/clusters', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ClusterBase',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_namespace(self, body, cluster_name, **kwargs):  # noqa: E501
        """create namespace in cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_namespace(body, cluster_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1CreateClusterNamespaceRequest body: (required)
        :param str cluster_name: name of the target cluster (required)
        :return: V1CreateClusterNamespaceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_namespace_with_http_info(body, cluster_name, **kwargs)  # noqa: E501
        else:
            (data) = self.create_namespace_with_http_info(body, cluster_name, **kwargs)  # noqa: E501
            return data

    def create_namespace_with_http_info(self, body, cluster_name, **kwargs):  # noqa: E501
        """create namespace in cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_namespace_with_http_info(body, cluster_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1CreateClusterNamespaceRequest body: (required)
        :param str cluster_name: name of the target cluster (required)
        :return: V1CreateClusterNamespaceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'cluster_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_namespace" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_namespace`")  # noqa: E501
        # verify the required parameter 'cluster_name' is set
        if ('cluster_name' not in params or
                params['cluster_name'] is None):
            raise ValueError("Missing the required parameter `cluster_name` when calling `create_namespace`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_name' in params:
            path_params['clusterName'] = params['cluster_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/clusters/{clusterName}/namespaces', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1CreateClusterNamespaceResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_cloud_cluster_creation(self, provider, cloud_cluster_name, **kwargs):  # noqa: E501
        """delete cloud cluster creation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cloud_cluster_creation(provider, cloud_cluster_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str provider: identifier of the cloud provider (required)
        :param str cloud_cluster_name: identifier for cloud cluster which is creating (required)
        :return: V1CreateCloudClusterResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_cloud_cluster_creation_with_http_info(provider, cloud_cluster_name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_cloud_cluster_creation_with_http_info(provider, cloud_cluster_name, **kwargs)  # noqa: E501
            return data

    def delete_cloud_cluster_creation_with_http_info(self, provider, cloud_cluster_name, **kwargs):  # noqa: E501
        """delete cloud cluster creation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cloud_cluster_creation_with_http_info(provider, cloud_cluster_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str provider: identifier of the cloud provider (required)
        :param str cloud_cluster_name: identifier for cloud cluster which is creating (required)
        :return: V1CreateCloudClusterResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['provider', 'cloud_cluster_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_cloud_cluster_creation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'provider' is set
        if ('provider' not in params or
                params['provider'] is None):
            raise ValueError("Missing the required parameter `provider` when calling `delete_cloud_cluster_creation`")  # noqa: E501
        # verify the required parameter 'cloud_cluster_name' is set
        if ('cloud_cluster_name' not in params or
                params['cloud_cluster_name'] is None):
            raise ValueError("Missing the required parameter `cloud_cluster_name` when calling `delete_cloud_cluster_creation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'provider' in params:
            path_params['provider'] = params['provider']  # noqa: E501
        if 'cloud_cluster_name' in params:
            path_params['cloudClusterName'] = params['cloud_cluster_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/clusters/cloud_clusters/{provider}/creation/{cloudClusterName}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1CreateCloudClusterResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_kube_cluster(self, cluster_name, **kwargs):  # noqa: E501
        """delete cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_kube_cluster(cluster_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_name: identifier of the cluster (required)
        :return: V1ClusterBase
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_kube_cluster_with_http_info(cluster_name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_kube_cluster_with_http_info(cluster_name, **kwargs)  # noqa: E501
            return data

    def delete_kube_cluster_with_http_info(self, cluster_name, **kwargs):  # noqa: E501
        """delete cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_kube_cluster_with_http_info(cluster_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_name: identifier of the cluster (required)
        :return: V1ClusterBase
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_kube_cluster" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_name' is set
        if ('cluster_name' not in params or
                params['cluster_name'] is None):
            raise ValueError("Missing the required parameter `cluster_name` when calling `delete_kube_cluster`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_name' in params:
            path_params['clusterName'] = params['cluster_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/clusters/{clusterName}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ClusterBase',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cloud_cluster_creation_status(self, provider, cloud_cluster_name, **kwargs):  # noqa: E501
        """check cloud cluster create status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cloud_cluster_creation_status(provider, cloud_cluster_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str provider: identifier of the cloud provider (required)
        :param str cloud_cluster_name: identifier for cloud cluster which is creating (required)
        :return: V1CreateCloudClusterResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cloud_cluster_creation_status_with_http_info(provider, cloud_cluster_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_cloud_cluster_creation_status_with_http_info(provider, cloud_cluster_name, **kwargs)  # noqa: E501
            return data

    def get_cloud_cluster_creation_status_with_http_info(self, provider, cloud_cluster_name, **kwargs):  # noqa: E501
        """check cloud cluster create status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cloud_cluster_creation_status_with_http_info(provider, cloud_cluster_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str provider: identifier of the cloud provider (required)
        :param str cloud_cluster_name: identifier for cloud cluster which is creating (required)
        :return: V1CreateCloudClusterResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['provider', 'cloud_cluster_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cloud_cluster_creation_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'provider' is set
        if ('provider' not in params or
                params['provider'] is None):
            raise ValueError("Missing the required parameter `provider` when calling `get_cloud_cluster_creation_status`")  # noqa: E501
        # verify the required parameter 'cloud_cluster_name' is set
        if ('cloud_cluster_name' not in params or
                params['cloud_cluster_name'] is None):
            raise ValueError("Missing the required parameter `cloud_cluster_name` when calling `get_cloud_cluster_creation_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'provider' in params:
            path_params['provider'] = params['provider']  # noqa: E501
        if 'cloud_cluster_name' in params:
            path_params['cloudClusterName'] = params['cloud_cluster_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/clusters/cloud_clusters/{provider}/creation/{cloudClusterName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1CreateCloudClusterResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_kube_cluster(self, cluster_name, **kwargs):  # noqa: E501
        """detail cluster info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_kube_cluster(cluster_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_name: identifier of the cluster (required)
        :return: V1DetailClusterResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_kube_cluster_with_http_info(cluster_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_kube_cluster_with_http_info(cluster_name, **kwargs)  # noqa: E501
            return data

    def get_kube_cluster_with_http_info(self, cluster_name, **kwargs):  # noqa: E501
        """detail cluster info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_kube_cluster_with_http_info(cluster_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_name: identifier of the cluster (required)
        :return: V1DetailClusterResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_kube_cluster" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_name' is set
        if ('cluster_name' not in params or
                params['cluster_name'] is None):
            raise ValueError("Missing the required parameter `cluster_name` when calling `get_kube_cluster`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_name' in params:
            path_params['clusterName'] = params['cluster_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/clusters/{clusterName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1DetailClusterResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_cloud_cluster_creation(self, provider, **kwargs):  # noqa: E501
        """list cloud cluster creation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_cloud_cluster_creation(provider, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str provider: identifier of the cloud provider (required)
        :return: V1ListCloudClusterCreationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_cloud_cluster_creation_with_http_info(provider, **kwargs)  # noqa: E501
        else:
            (data) = self.list_cloud_cluster_creation_with_http_info(provider, **kwargs)  # noqa: E501
            return data

    def list_cloud_cluster_creation_with_http_info(self, provider, **kwargs):  # noqa: E501
        """list cloud cluster creation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_cloud_cluster_creation_with_http_info(provider, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str provider: identifier of the cloud provider (required)
        :return: V1ListCloudClusterCreationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['provider']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_cloud_cluster_creation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'provider' is set
        if ('provider' not in params or
                params['provider'] is None):
            raise ValueError("Missing the required parameter `provider` when calling `list_cloud_cluster_creation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'provider' in params:
            path_params['provider'] = params['provider']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/clusters/cloud_clusters/{provider}/creation', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ListCloudClusterCreationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_cloud_clusters(self, body, provider, **kwargs):  # noqa: E501
        """list cloud clusters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_cloud_clusters(body, provider, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1AccessKeyRequest body: (required)
        :param str provider: identifier of the cloud provider (required)
        :param int page: Page for paging
        :param int page_size: PageSize for paging
        :return: V1ListCloudClusterResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_cloud_clusters_with_http_info(body, provider, **kwargs)  # noqa: E501
        else:
            (data) = self.list_cloud_clusters_with_http_info(body, provider, **kwargs)  # noqa: E501
            return data

    def list_cloud_clusters_with_http_info(self, body, provider, **kwargs):  # noqa: E501
        """list cloud clusters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_cloud_clusters_with_http_info(body, provider, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1AccessKeyRequest body: (required)
        :param str provider: identifier of the cloud provider (required)
        :param int page: Page for paging
        :param int page_size: PageSize for paging
        :return: V1ListCloudClusterResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'provider', 'page', 'page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_cloud_clusters" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `list_cloud_clusters`")  # noqa: E501
        # verify the required parameter 'provider' is set
        if ('provider' not in params or
                params['provider'] is None):
            raise ValueError("Missing the required parameter `provider` when calling `list_cloud_clusters`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'provider' in params:
            path_params['provider'] = params['provider']  # noqa: E501

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/clusters/cloud_clusters/{provider}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ListCloudClusterResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_kube_clusters(self, **kwargs):  # noqa: E501
        """list all clusters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_kube_clusters(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: Fuzzy search based on name or description
        :param int page: Page for paging
        :param int page_size: PageSize for paging
        :return: V1SimpleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_kube_clusters_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_kube_clusters_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_kube_clusters_with_http_info(self, **kwargs):  # noqa: E501
        """list all clusters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_kube_clusters_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: Fuzzy search based on name or description
        :param int page: Page for paging
        :param int page_size: PageSize for paging
        :return: V1SimpleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['query', 'page', 'page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_kube_clusters" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'query' in params:
            query_params.append(('query', params['query']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/clusters', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1SimpleResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def modify_kube_cluster(self, body, cluster_name, **kwargs):  # noqa: E501
        """modify cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modify_kube_cluster(body, cluster_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1CreateClusterRequest body: (required)
        :param str cluster_name: identifier of the cluster (required)
        :return: V1ClusterBase
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.modify_kube_cluster_with_http_info(body, cluster_name, **kwargs)  # noqa: E501
        else:
            (data) = self.modify_kube_cluster_with_http_info(body, cluster_name, **kwargs)  # noqa: E501
            return data

    def modify_kube_cluster_with_http_info(self, body, cluster_name, **kwargs):  # noqa: E501
        """modify cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modify_kube_cluster_with_http_info(body, cluster_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1CreateClusterRequest body: (required)
        :param str cluster_name: identifier of the cluster (required)
        :return: V1ClusterBase
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'cluster_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modify_kube_cluster" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `modify_kube_cluster`")  # noqa: E501
        # verify the required parameter 'cluster_name' is set
        if ('cluster_name' not in params or
                params['cluster_name'] is None):
            raise ValueError("Missing the required parameter `cluster_name` when calling `modify_kube_cluster`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_name' in params:
            path_params['clusterName'] = params['cluster_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/clusters/{clusterName}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ClusterBase',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

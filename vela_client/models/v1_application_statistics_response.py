# coding: utf-8

"""
    Kubevela api doc

    Kubevela api doc  # noqa: E501

    OpenAPI spec version: v1beta1
    Contact: feedback@mail.kubevela.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1ApplicationStatisticsResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'env_count': 'int',
        'revision_count': 'int',
        'target_count': 'int',
        'workflow_count': 'int'
    }

    attribute_map = {
        'env_count': 'envCount',
        'revision_count': 'revisionCount',
        'target_count': 'targetCount',
        'workflow_count': 'workflowCount'
    }

    def __init__(self, env_count=None, revision_count=None, target_count=None, workflow_count=None):  # noqa: E501
        """V1ApplicationStatisticsResponse - a model defined in Swagger"""  # noqa: E501
        self._env_count = None
        self._revision_count = None
        self._target_count = None
        self._workflow_count = None
        self.discriminator = None
        self.env_count = env_count
        self.revision_count = revision_count
        self.target_count = target_count
        self.workflow_count = workflow_count

    @property
    def env_count(self):
        """Gets the env_count of this V1ApplicationStatisticsResponse.  # noqa: E501


        :return: The env_count of this V1ApplicationStatisticsResponse.  # noqa: E501
        :rtype: int
        """
        return self._env_count

    @env_count.setter
    def env_count(self, env_count):
        """Sets the env_count of this V1ApplicationStatisticsResponse.


        :param env_count: The env_count of this V1ApplicationStatisticsResponse.  # noqa: E501
        :type: int
        """
        if env_count is None:
            raise ValueError("Invalid value for `env_count`, must not be `None`")  # noqa: E501

        self._env_count = env_count

    @property
    def revision_count(self):
        """Gets the revision_count of this V1ApplicationStatisticsResponse.  # noqa: E501


        :return: The revision_count of this V1ApplicationStatisticsResponse.  # noqa: E501
        :rtype: int
        """
        return self._revision_count

    @revision_count.setter
    def revision_count(self, revision_count):
        """Sets the revision_count of this V1ApplicationStatisticsResponse.


        :param revision_count: The revision_count of this V1ApplicationStatisticsResponse.  # noqa: E501
        :type: int
        """
        if revision_count is None:
            raise ValueError("Invalid value for `revision_count`, must not be `None`")  # noqa: E501

        self._revision_count = revision_count

    @property
    def target_count(self):
        """Gets the target_count of this V1ApplicationStatisticsResponse.  # noqa: E501


        :return: The target_count of this V1ApplicationStatisticsResponse.  # noqa: E501
        :rtype: int
        """
        return self._target_count

    @target_count.setter
    def target_count(self, target_count):
        """Sets the target_count of this V1ApplicationStatisticsResponse.


        :param target_count: The target_count of this V1ApplicationStatisticsResponse.  # noqa: E501
        :type: int
        """
        if target_count is None:
            raise ValueError("Invalid value for `target_count`, must not be `None`")  # noqa: E501

        self._target_count = target_count

    @property
    def workflow_count(self):
        """Gets the workflow_count of this V1ApplicationStatisticsResponse.  # noqa: E501


        :return: The workflow_count of this V1ApplicationStatisticsResponse.  # noqa: E501
        :rtype: int
        """
        return self._workflow_count

    @workflow_count.setter
    def workflow_count(self, workflow_count):
        """Sets the workflow_count of this V1ApplicationStatisticsResponse.


        :param workflow_count: The workflow_count of this V1ApplicationStatisticsResponse.  # noqa: E501
        :type: int
        """
        if workflow_count is None:
            raise ValueError("Invalid value for `workflow_count`, must not be `None`")  # noqa: E501

        self._workflow_count = workflow_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1ApplicationStatisticsResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1ApplicationStatisticsResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

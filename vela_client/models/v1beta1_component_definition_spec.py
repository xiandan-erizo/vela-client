# coding: utf-8

"""
    Kubevela api doc

    Kubevela api doc  # noqa: E501

    OpenAPI spec version: v1beta1
    Contact: feedback@mail.kubevela.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1beta1ComponentDefinitionSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'child_resource_kinds': 'list[CommonChildResourceKind]',
        'extension': 'str',
        'pod_spec_path': 'str',
        'revision_label': 'str',
        'schematic': 'CommonSchematic',
        'status': 'CommonStatus',
        'workload': 'CommonWorkloadTypeDescriptor'
    }

    attribute_map = {
        'child_resource_kinds': 'childResourceKinds',
        'extension': 'extension',
        'pod_spec_path': 'podSpecPath',
        'revision_label': 'revisionLabel',
        'schematic': 'schematic',
        'status': 'status',
        'workload': 'workload'
    }

    def __init__(self, child_resource_kinds=None, extension=None, pod_spec_path=None, revision_label=None, schematic=None, status=None, workload=None):  # noqa: E501
        """V1beta1ComponentDefinitionSpec - a model defined in Swagger"""  # noqa: E501
        self._child_resource_kinds = None
        self._extension = None
        self._pod_spec_path = None
        self._revision_label = None
        self._schematic = None
        self._status = None
        self._workload = None
        self.discriminator = None
        if child_resource_kinds is not None:
            self.child_resource_kinds = child_resource_kinds
        if extension is not None:
            self.extension = extension
        if pod_spec_path is not None:
            self.pod_spec_path = pod_spec_path
        if revision_label is not None:
            self.revision_label = revision_label
        if schematic is not None:
            self.schematic = schematic
        if status is not None:
            self.status = status
        self.workload = workload

    @property
    def child_resource_kinds(self):
        """Gets the child_resource_kinds of this V1beta1ComponentDefinitionSpec.  # noqa: E501


        :return: The child_resource_kinds of this V1beta1ComponentDefinitionSpec.  # noqa: E501
        :rtype: list[CommonChildResourceKind]
        """
        return self._child_resource_kinds

    @child_resource_kinds.setter
    def child_resource_kinds(self, child_resource_kinds):
        """Sets the child_resource_kinds of this V1beta1ComponentDefinitionSpec.


        :param child_resource_kinds: The child_resource_kinds of this V1beta1ComponentDefinitionSpec.  # noqa: E501
        :type: list[CommonChildResourceKind]
        """

        self._child_resource_kinds = child_resource_kinds

    @property
    def extension(self):
        """Gets the extension of this V1beta1ComponentDefinitionSpec.  # noqa: E501


        :return: The extension of this V1beta1ComponentDefinitionSpec.  # noqa: E501
        :rtype: str
        """
        return self._extension

    @extension.setter
    def extension(self, extension):
        """Sets the extension of this V1beta1ComponentDefinitionSpec.


        :param extension: The extension of this V1beta1ComponentDefinitionSpec.  # noqa: E501
        :type: str
        """

        self._extension = extension

    @property
    def pod_spec_path(self):
        """Gets the pod_spec_path of this V1beta1ComponentDefinitionSpec.  # noqa: E501


        :return: The pod_spec_path of this V1beta1ComponentDefinitionSpec.  # noqa: E501
        :rtype: str
        """
        return self._pod_spec_path

    @pod_spec_path.setter
    def pod_spec_path(self, pod_spec_path):
        """Sets the pod_spec_path of this V1beta1ComponentDefinitionSpec.


        :param pod_spec_path: The pod_spec_path of this V1beta1ComponentDefinitionSpec.  # noqa: E501
        :type: str
        """

        self._pod_spec_path = pod_spec_path

    @property
    def revision_label(self):
        """Gets the revision_label of this V1beta1ComponentDefinitionSpec.  # noqa: E501


        :return: The revision_label of this V1beta1ComponentDefinitionSpec.  # noqa: E501
        :rtype: str
        """
        return self._revision_label

    @revision_label.setter
    def revision_label(self, revision_label):
        """Sets the revision_label of this V1beta1ComponentDefinitionSpec.


        :param revision_label: The revision_label of this V1beta1ComponentDefinitionSpec.  # noqa: E501
        :type: str
        """

        self._revision_label = revision_label

    @property
    def schematic(self):
        """Gets the schematic of this V1beta1ComponentDefinitionSpec.  # noqa: E501


        :return: The schematic of this V1beta1ComponentDefinitionSpec.  # noqa: E501
        :rtype: CommonSchematic
        """
        return self._schematic

    @schematic.setter
    def schematic(self, schematic):
        """Sets the schematic of this V1beta1ComponentDefinitionSpec.


        :param schematic: The schematic of this V1beta1ComponentDefinitionSpec.  # noqa: E501
        :type: CommonSchematic
        """

        self._schematic = schematic

    @property
    def status(self):
        """Gets the status of this V1beta1ComponentDefinitionSpec.  # noqa: E501


        :return: The status of this V1beta1ComponentDefinitionSpec.  # noqa: E501
        :rtype: CommonStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this V1beta1ComponentDefinitionSpec.


        :param status: The status of this V1beta1ComponentDefinitionSpec.  # noqa: E501
        :type: CommonStatus
        """

        self._status = status

    @property
    def workload(self):
        """Gets the workload of this V1beta1ComponentDefinitionSpec.  # noqa: E501


        :return: The workload of this V1beta1ComponentDefinitionSpec.  # noqa: E501
        :rtype: CommonWorkloadTypeDescriptor
        """
        return self._workload

    @workload.setter
    def workload(self, workload):
        """Sets the workload of this V1beta1ComponentDefinitionSpec.


        :param workload: The workload of this V1beta1ComponentDefinitionSpec.  # noqa: E501
        :type: CommonWorkloadTypeDescriptor
        """
        if workload is None:
            raise ValueError("Invalid value for `workload`, must not be `None`")  # noqa: E501

        self._workload = workload

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1beta1ComponentDefinitionSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1beta1ComponentDefinitionSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

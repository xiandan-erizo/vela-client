# coding: utf-8

"""
    Kubevela api doc

    Kubevela api doc  # noqa: E501

    OpenAPI spec version: v1beta1
    Contact: feedback@mail.kubevela.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1PipelineRun(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'context_name': 'str',
        'context_values': 'list[ModelValue]',
        'pipeline_name': 'str',
        'pipeline_run_name': 'str',
        'project': 'V1NameAlias',
        'record': 'int',
        'spec': 'V1alpha1WorkflowRunSpec',
        'status': 'V1alpha1WorkflowRunStatus'
    }

    attribute_map = {
        'context_name': 'contextName',
        'context_values': 'contextValues',
        'pipeline_name': 'pipelineName',
        'pipeline_run_name': 'pipelineRunName',
        'project': 'project',
        'record': 'record',
        'spec': 'spec',
        'status': 'status'
    }

    def __init__(self, context_name=None, context_values=None, pipeline_name=None, pipeline_run_name=None, project=None, record=None, spec=None, status=None):  # noqa: E501
        """V1PipelineRun - a model defined in Swagger"""  # noqa: E501
        self._context_name = None
        self._context_values = None
        self._pipeline_name = None
        self._pipeline_run_name = None
        self._project = None
        self._record = None
        self._spec = None
        self._status = None
        self.discriminator = None
        self.context_name = context_name
        self.context_values = context_values
        self.pipeline_name = pipeline_name
        self.pipeline_run_name = pipeline_run_name
        self.project = project
        self.record = record
        self.spec = spec
        self.status = status

    @property
    def context_name(self):
        """Gets the context_name of this V1PipelineRun.  # noqa: E501


        :return: The context_name of this V1PipelineRun.  # noqa: E501
        :rtype: str
        """
        return self._context_name

    @context_name.setter
    def context_name(self, context_name):
        """Sets the context_name of this V1PipelineRun.


        :param context_name: The context_name of this V1PipelineRun.  # noqa: E501
        :type: str
        """
        if context_name is None:
            raise ValueError("Invalid value for `context_name`, must not be `None`")  # noqa: E501

        self._context_name = context_name

    @property
    def context_values(self):
        """Gets the context_values of this V1PipelineRun.  # noqa: E501


        :return: The context_values of this V1PipelineRun.  # noqa: E501
        :rtype: list[ModelValue]
        """
        return self._context_values

    @context_values.setter
    def context_values(self, context_values):
        """Sets the context_values of this V1PipelineRun.


        :param context_values: The context_values of this V1PipelineRun.  # noqa: E501
        :type: list[ModelValue]
        """
        if context_values is None:
            raise ValueError("Invalid value for `context_values`, must not be `None`")  # noqa: E501

        self._context_values = context_values

    @property
    def pipeline_name(self):
        """Gets the pipeline_name of this V1PipelineRun.  # noqa: E501


        :return: The pipeline_name of this V1PipelineRun.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_name

    @pipeline_name.setter
    def pipeline_name(self, pipeline_name):
        """Sets the pipeline_name of this V1PipelineRun.


        :param pipeline_name: The pipeline_name of this V1PipelineRun.  # noqa: E501
        :type: str
        """
        if pipeline_name is None:
            raise ValueError("Invalid value for `pipeline_name`, must not be `None`")  # noqa: E501

        self._pipeline_name = pipeline_name

    @property
    def pipeline_run_name(self):
        """Gets the pipeline_run_name of this V1PipelineRun.  # noqa: E501


        :return: The pipeline_run_name of this V1PipelineRun.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_run_name

    @pipeline_run_name.setter
    def pipeline_run_name(self, pipeline_run_name):
        """Sets the pipeline_run_name of this V1PipelineRun.


        :param pipeline_run_name: The pipeline_run_name of this V1PipelineRun.  # noqa: E501
        :type: str
        """
        if pipeline_run_name is None:
            raise ValueError("Invalid value for `pipeline_run_name`, must not be `None`")  # noqa: E501

        self._pipeline_run_name = pipeline_run_name

    @property
    def project(self):
        """Gets the project of this V1PipelineRun.  # noqa: E501


        :return: The project of this V1PipelineRun.  # noqa: E501
        :rtype: V1NameAlias
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this V1PipelineRun.


        :param project: The project of this V1PipelineRun.  # noqa: E501
        :type: V1NameAlias
        """
        if project is None:
            raise ValueError("Invalid value for `project`, must not be `None`")  # noqa: E501

        self._project = project

    @property
    def record(self):
        """Gets the record of this V1PipelineRun.  # noqa: E501


        :return: The record of this V1PipelineRun.  # noqa: E501
        :rtype: int
        """
        return self._record

    @record.setter
    def record(self, record):
        """Sets the record of this V1PipelineRun.


        :param record: The record of this V1PipelineRun.  # noqa: E501
        :type: int
        """
        if record is None:
            raise ValueError("Invalid value for `record`, must not be `None`")  # noqa: E501

        self._record = record

    @property
    def spec(self):
        """Gets the spec of this V1PipelineRun.  # noqa: E501


        :return: The spec of this V1PipelineRun.  # noqa: E501
        :rtype: V1alpha1WorkflowRunSpec
        """
        return self._spec

    @spec.setter
    def spec(self, spec):
        """Sets the spec of this V1PipelineRun.


        :param spec: The spec of this V1PipelineRun.  # noqa: E501
        :type: V1alpha1WorkflowRunSpec
        """
        if spec is None:
            raise ValueError("Invalid value for `spec`, must not be `None`")  # noqa: E501

        self._spec = spec

    @property
    def status(self):
        """Gets the status of this V1PipelineRun.  # noqa: E501


        :return: The status of this V1PipelineRun.  # noqa: E501
        :rtype: V1alpha1WorkflowRunStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this V1PipelineRun.


        :param status: The status of this V1PipelineRun.  # noqa: E501
        :type: V1alpha1WorkflowRunStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1PipelineRun, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1PipelineRun):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

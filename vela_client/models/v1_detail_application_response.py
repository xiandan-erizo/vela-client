# coding: utf-8

"""
    Kubevela api doc

    Kubevela api doc  # noqa: E501

    OpenAPI spec version: v1beta1
    Contact: feedback@mail.kubevela.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1DetailApplicationResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alias': 'str',
        'create_time': 'datetime',
        'description': 'str',
        'env_bindings': 'list[str]',
        'icon': 'str',
        'labels': 'dict(str, str)',
        'name': 'str',
        'policies': 'list[str]',
        'project': 'V1ProjectBase',
        'read_only': 'bool',
        'resource_info': 'V1ApplicationResourceInfo',
        'update_time': 'datetime'
    }

    attribute_map = {
        'alias': 'alias',
        'create_time': 'createTime',
        'description': 'description',
        'env_bindings': 'envBindings',
        'icon': 'icon',
        'labels': 'labels',
        'name': 'name',
        'policies': 'policies',
        'project': 'project',
        'read_only': 'readOnly',
        'resource_info': 'resourceInfo',
        'update_time': 'updateTime'
    }

    def __init__(self, alias=None, create_time=None, description=None, env_bindings=None, icon=None, labels=None, name=None, policies=None, project=None, read_only=None, resource_info=None, update_time=None):  # noqa: E501
        """V1DetailApplicationResponse - a model defined in Swagger"""  # noqa: E501
        self._alias = None
        self._create_time = None
        self._description = None
        self._env_bindings = None
        self._icon = None
        self._labels = None
        self._name = None
        self._policies = None
        self._project = None
        self._read_only = None
        self._resource_info = None
        self._update_time = None
        self.discriminator = None
        self.alias = alias
        self.create_time = create_time
        self.description = description
        self.env_bindings = env_bindings
        self.icon = icon
        if labels is not None:
            self.labels = labels
        self.name = name
        self.policies = policies
        self.project = project
        if read_only is not None:
            self.read_only = read_only
        self.resource_info = resource_info
        self.update_time = update_time

    @property
    def alias(self):
        """Gets the alias of this V1DetailApplicationResponse.  # noqa: E501


        :return: The alias of this V1DetailApplicationResponse.  # noqa: E501
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this V1DetailApplicationResponse.


        :param alias: The alias of this V1DetailApplicationResponse.  # noqa: E501
        :type: str
        """
        if alias is None:
            raise ValueError("Invalid value for `alias`, must not be `None`")  # noqa: E501

        self._alias = alias

    @property
    def create_time(self):
        """Gets the create_time of this V1DetailApplicationResponse.  # noqa: E501


        :return: The create_time of this V1DetailApplicationResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this V1DetailApplicationResponse.


        :param create_time: The create_time of this V1DetailApplicationResponse.  # noqa: E501
        :type: datetime
        """
        if create_time is None:
            raise ValueError("Invalid value for `create_time`, must not be `None`")  # noqa: E501

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this V1DetailApplicationResponse.  # noqa: E501


        :return: The description of this V1DetailApplicationResponse.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this V1DetailApplicationResponse.


        :param description: The description of this V1DetailApplicationResponse.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def env_bindings(self):
        """Gets the env_bindings of this V1DetailApplicationResponse.  # noqa: E501


        :return: The env_bindings of this V1DetailApplicationResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._env_bindings

    @env_bindings.setter
    def env_bindings(self, env_bindings):
        """Sets the env_bindings of this V1DetailApplicationResponse.


        :param env_bindings: The env_bindings of this V1DetailApplicationResponse.  # noqa: E501
        :type: list[str]
        """
        if env_bindings is None:
            raise ValueError("Invalid value for `env_bindings`, must not be `None`")  # noqa: E501

        self._env_bindings = env_bindings

    @property
    def icon(self):
        """Gets the icon of this V1DetailApplicationResponse.  # noqa: E501


        :return: The icon of this V1DetailApplicationResponse.  # noqa: E501
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this V1DetailApplicationResponse.


        :param icon: The icon of this V1DetailApplicationResponse.  # noqa: E501
        :type: str
        """
        if icon is None:
            raise ValueError("Invalid value for `icon`, must not be `None`")  # noqa: E501

        self._icon = icon

    @property
    def labels(self):
        """Gets the labels of this V1DetailApplicationResponse.  # noqa: E501


        :return: The labels of this V1DetailApplicationResponse.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this V1DetailApplicationResponse.


        :param labels: The labels of this V1DetailApplicationResponse.  # noqa: E501
        :type: dict(str, str)
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this V1DetailApplicationResponse.  # noqa: E501


        :return: The name of this V1DetailApplicationResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V1DetailApplicationResponse.


        :param name: The name of this V1DetailApplicationResponse.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def policies(self):
        """Gets the policies of this V1DetailApplicationResponse.  # noqa: E501


        :return: The policies of this V1DetailApplicationResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._policies

    @policies.setter
    def policies(self, policies):
        """Sets the policies of this V1DetailApplicationResponse.


        :param policies: The policies of this V1DetailApplicationResponse.  # noqa: E501
        :type: list[str]
        """
        if policies is None:
            raise ValueError("Invalid value for `policies`, must not be `None`")  # noqa: E501

        self._policies = policies

    @property
    def project(self):
        """Gets the project of this V1DetailApplicationResponse.  # noqa: E501


        :return: The project of this V1DetailApplicationResponse.  # noqa: E501
        :rtype: V1ProjectBase
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this V1DetailApplicationResponse.


        :param project: The project of this V1DetailApplicationResponse.  # noqa: E501
        :type: V1ProjectBase
        """
        if project is None:
            raise ValueError("Invalid value for `project`, must not be `None`")  # noqa: E501

        self._project = project

    @property
    def read_only(self):
        """Gets the read_only of this V1DetailApplicationResponse.  # noqa: E501


        :return: The read_only of this V1DetailApplicationResponse.  # noqa: E501
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this V1DetailApplicationResponse.


        :param read_only: The read_only of this V1DetailApplicationResponse.  # noqa: E501
        :type: bool
        """

        self._read_only = read_only

    @property
    def resource_info(self):
        """Gets the resource_info of this V1DetailApplicationResponse.  # noqa: E501


        :return: The resource_info of this V1DetailApplicationResponse.  # noqa: E501
        :rtype: V1ApplicationResourceInfo
        """
        return self._resource_info

    @resource_info.setter
    def resource_info(self, resource_info):
        """Sets the resource_info of this V1DetailApplicationResponse.


        :param resource_info: The resource_info of this V1DetailApplicationResponse.  # noqa: E501
        :type: V1ApplicationResourceInfo
        """
        if resource_info is None:
            raise ValueError("Invalid value for `resource_info`, must not be `None`")  # noqa: E501

        self._resource_info = resource_info

    @property
    def update_time(self):
        """Gets the update_time of this V1DetailApplicationResponse.  # noqa: E501


        :return: The update_time of this V1DetailApplicationResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this V1DetailApplicationResponse.


        :param update_time: The update_time of this V1DetailApplicationResponse.  # noqa: E501
        :type: datetime
        """
        if update_time is None:
            raise ValueError("Invalid value for `update_time`, must not be `None`")  # noqa: E501

        self._update_time = update_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1DetailApplicationResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1DetailApplicationResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

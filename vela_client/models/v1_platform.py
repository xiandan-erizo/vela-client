# coding: utf-8

"""
    Kubevela api doc

    Kubevela api doc  # noqa: E501

    OpenAPI spec version: v1beta1
    Contact: feedback@mail.kubevela.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1Platform(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'architecture': 'str',
        'features': 'list[str]',
        'os': 'str',
        'os_features': 'list[str]',
        'os_version': 'str',
        'variant': 'str'
    }

    attribute_map = {
        'architecture': 'architecture',
        'features': 'features',
        'os': 'os',
        'os_features': 'os.features',
        'os_version': 'os.version',
        'variant': 'variant'
    }

    def __init__(self, architecture=None, features=None, os=None, os_features=None, os_version=None, variant=None):  # noqa: E501
        """V1Platform - a model defined in Swagger"""  # noqa: E501
        self._architecture = None
        self._features = None
        self._os = None
        self._os_features = None
        self._os_version = None
        self._variant = None
        self.discriminator = None
        self.architecture = architecture
        if features is not None:
            self.features = features
        self.os = os
        if os_features is not None:
            self.os_features = os_features
        if os_version is not None:
            self.os_version = os_version
        if variant is not None:
            self.variant = variant

    @property
    def architecture(self):
        """Gets the architecture of this V1Platform.  # noqa: E501


        :return: The architecture of this V1Platform.  # noqa: E501
        :rtype: str
        """
        return self._architecture

    @architecture.setter
    def architecture(self, architecture):
        """Sets the architecture of this V1Platform.


        :param architecture: The architecture of this V1Platform.  # noqa: E501
        :type: str
        """
        if architecture is None:
            raise ValueError("Invalid value for `architecture`, must not be `None`")  # noqa: E501

        self._architecture = architecture

    @property
    def features(self):
        """Gets the features of this V1Platform.  # noqa: E501


        :return: The features of this V1Platform.  # noqa: E501
        :rtype: list[str]
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this V1Platform.


        :param features: The features of this V1Platform.  # noqa: E501
        :type: list[str]
        """

        self._features = features

    @property
    def os(self):
        """Gets the os of this V1Platform.  # noqa: E501


        :return: The os of this V1Platform.  # noqa: E501
        :rtype: str
        """
        return self._os

    @os.setter
    def os(self, os):
        """Sets the os of this V1Platform.


        :param os: The os of this V1Platform.  # noqa: E501
        :type: str
        """
        if os is None:
            raise ValueError("Invalid value for `os`, must not be `None`")  # noqa: E501

        self._os = os

    @property
    def os_features(self):
        """Gets the os_features of this V1Platform.  # noqa: E501


        :return: The os_features of this V1Platform.  # noqa: E501
        :rtype: list[str]
        """
        return self._os_features

    @os_features.setter
    def os_features(self, os_features):
        """Sets the os_features of this V1Platform.


        :param os_features: The os_features of this V1Platform.  # noqa: E501
        :type: list[str]
        """

        self._os_features = os_features

    @property
    def os_version(self):
        """Gets the os_version of this V1Platform.  # noqa: E501


        :return: The os_version of this V1Platform.  # noqa: E501
        :rtype: str
        """
        return self._os_version

    @os_version.setter
    def os_version(self, os_version):
        """Sets the os_version of this V1Platform.


        :param os_version: The os_version of this V1Platform.  # noqa: E501
        :type: str
        """

        self._os_version = os_version

    @property
    def variant(self):
        """Gets the variant of this V1Platform.  # noqa: E501


        :return: The variant of this V1Platform.  # noqa: E501
        :rtype: str
        """
        return self._variant

    @variant.setter
    def variant(self, variant):
        """Sets the variant of this V1Platform.


        :param variant: The variant of this V1Platform.  # noqa: E501
        :type: str
        """

        self._variant = variant

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1Platform, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1Platform):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Kubevela api doc

    Kubevela api doc  # noqa: E501

    OpenAPI spec version: v1beta1
    Contact: feedback@mail.kubevela.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1ApplicationDeployResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'code_info': 'ModelCodeInfo',
        'create_time': 'datetime',
        'deploy_user': 'V1NameAlias',
        'env_name': 'str',
        'image_info': 'ModelImageInfo',
        'note': 'str',
        'reason': 'str',
        'record': 'V1WorkflowRecordBase',
        'status': 'str',
        'trigger_type': 'str',
        'version': 'str'
    }

    attribute_map = {
        'code_info': 'codeInfo',
        'create_time': 'createTime',
        'deploy_user': 'deployUser',
        'env_name': 'envName',
        'image_info': 'imageInfo',
        'note': 'note',
        'reason': 'reason',
        'record': 'record',
        'status': 'status',
        'trigger_type': 'triggerType',
        'version': 'version'
    }

    def __init__(self, code_info=None, create_time=None, deploy_user=None, env_name=None, image_info=None, note=None, reason=None, record=None, status=None, trigger_type=None, version=None):  # noqa: E501
        """V1ApplicationDeployResponse - a model defined in Swagger"""  # noqa: E501
        self._code_info = None
        self._create_time = None
        self._deploy_user = None
        self._env_name = None
        self._image_info = None
        self._note = None
        self._reason = None
        self._record = None
        self._status = None
        self._trigger_type = None
        self._version = None
        self.discriminator = None
        if code_info is not None:
            self.code_info = code_info
        self.create_time = create_time
        if deploy_user is not None:
            self.deploy_user = deploy_user
        self.env_name = env_name
        if image_info is not None:
            self.image_info = image_info
        self.note = note
        if reason is not None:
            self.reason = reason
        self.record = record
        self.status = status
        self.trigger_type = trigger_type
        self.version = version

    @property
    def code_info(self):
        """Gets the code_info of this V1ApplicationDeployResponse.  # noqa: E501


        :return: The code_info of this V1ApplicationDeployResponse.  # noqa: E501
        :rtype: ModelCodeInfo
        """
        return self._code_info

    @code_info.setter
    def code_info(self, code_info):
        """Sets the code_info of this V1ApplicationDeployResponse.


        :param code_info: The code_info of this V1ApplicationDeployResponse.  # noqa: E501
        :type: ModelCodeInfo
        """

        self._code_info = code_info

    @property
    def create_time(self):
        """Gets the create_time of this V1ApplicationDeployResponse.  # noqa: E501


        :return: The create_time of this V1ApplicationDeployResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this V1ApplicationDeployResponse.


        :param create_time: The create_time of this V1ApplicationDeployResponse.  # noqa: E501
        :type: datetime
        """
        if create_time is None:
            raise ValueError("Invalid value for `create_time`, must not be `None`")  # noqa: E501

        self._create_time = create_time

    @property
    def deploy_user(self):
        """Gets the deploy_user of this V1ApplicationDeployResponse.  # noqa: E501


        :return: The deploy_user of this V1ApplicationDeployResponse.  # noqa: E501
        :rtype: V1NameAlias
        """
        return self._deploy_user

    @deploy_user.setter
    def deploy_user(self, deploy_user):
        """Sets the deploy_user of this V1ApplicationDeployResponse.


        :param deploy_user: The deploy_user of this V1ApplicationDeployResponse.  # noqa: E501
        :type: V1NameAlias
        """

        self._deploy_user = deploy_user

    @property
    def env_name(self):
        """Gets the env_name of this V1ApplicationDeployResponse.  # noqa: E501


        :return: The env_name of this V1ApplicationDeployResponse.  # noqa: E501
        :rtype: str
        """
        return self._env_name

    @env_name.setter
    def env_name(self, env_name):
        """Sets the env_name of this V1ApplicationDeployResponse.


        :param env_name: The env_name of this V1ApplicationDeployResponse.  # noqa: E501
        :type: str
        """
        if env_name is None:
            raise ValueError("Invalid value for `env_name`, must not be `None`")  # noqa: E501

        self._env_name = env_name

    @property
    def image_info(self):
        """Gets the image_info of this V1ApplicationDeployResponse.  # noqa: E501


        :return: The image_info of this V1ApplicationDeployResponse.  # noqa: E501
        :rtype: ModelImageInfo
        """
        return self._image_info

    @image_info.setter
    def image_info(self, image_info):
        """Sets the image_info of this V1ApplicationDeployResponse.


        :param image_info: The image_info of this V1ApplicationDeployResponse.  # noqa: E501
        :type: ModelImageInfo
        """

        self._image_info = image_info

    @property
    def note(self):
        """Gets the note of this V1ApplicationDeployResponse.  # noqa: E501


        :return: The note of this V1ApplicationDeployResponse.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this V1ApplicationDeployResponse.


        :param note: The note of this V1ApplicationDeployResponse.  # noqa: E501
        :type: str
        """
        if note is None:
            raise ValueError("Invalid value for `note`, must not be `None`")  # noqa: E501

        self._note = note

    @property
    def reason(self):
        """Gets the reason of this V1ApplicationDeployResponse.  # noqa: E501


        :return: The reason of this V1ApplicationDeployResponse.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this V1ApplicationDeployResponse.


        :param reason: The reason of this V1ApplicationDeployResponse.  # noqa: E501
        :type: str
        """

        self._reason = reason

    @property
    def record(self):
        """Gets the record of this V1ApplicationDeployResponse.  # noqa: E501


        :return: The record of this V1ApplicationDeployResponse.  # noqa: E501
        :rtype: V1WorkflowRecordBase
        """
        return self._record

    @record.setter
    def record(self, record):
        """Sets the record of this V1ApplicationDeployResponse.


        :param record: The record of this V1ApplicationDeployResponse.  # noqa: E501
        :type: V1WorkflowRecordBase
        """
        if record is None:
            raise ValueError("Invalid value for `record`, must not be `None`")  # noqa: E501

        self._record = record

    @property
    def status(self):
        """Gets the status of this V1ApplicationDeployResponse.  # noqa: E501


        :return: The status of this V1ApplicationDeployResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this V1ApplicationDeployResponse.


        :param status: The status of this V1ApplicationDeployResponse.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def trigger_type(self):
        """Gets the trigger_type of this V1ApplicationDeployResponse.  # noqa: E501


        :return: The trigger_type of this V1ApplicationDeployResponse.  # noqa: E501
        :rtype: str
        """
        return self._trigger_type

    @trigger_type.setter
    def trigger_type(self, trigger_type):
        """Sets the trigger_type of this V1ApplicationDeployResponse.


        :param trigger_type: The trigger_type of this V1ApplicationDeployResponse.  # noqa: E501
        :type: str
        """
        if trigger_type is None:
            raise ValueError("Invalid value for `trigger_type`, must not be `None`")  # noqa: E501

        self._trigger_type = trigger_type

    @property
    def version(self):
        """Gets the version of this V1ApplicationDeployResponse.  # noqa: E501


        :return: The version of this V1ApplicationDeployResponse.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this V1ApplicationDeployResponse.


        :param version: The version of this V1ApplicationDeployResponse.  # noqa: E501
        :type: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1ApplicationDeployResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1ApplicationDeployResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

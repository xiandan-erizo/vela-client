# coding: utf-8

"""
    Kubevela api doc

    Kubevela api doc  # noqa: E501

    OpenAPI spec version: v1beta1
    Contact: feedback@mail.kubevela.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1LoginUserInfoResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alias': 'str',
        'create_time': 'datetime',
        'disabled': 'bool',
        'email': 'str',
        'last_login_time': 'datetime',
        'name': 'str',
        'platform_permissions': 'list[V1PermissionBase]',
        'project_permissions': 'dict(str, list[V1PermissionBase])',
        'projects': 'list[V1ProjectBase]'
    }

    attribute_map = {
        'alias': 'alias',
        'create_time': 'createTime',
        'disabled': 'disabled',
        'email': 'email',
        'last_login_time': 'lastLoginTime',
        'name': 'name',
        'platform_permissions': 'platformPermissions',
        'project_permissions': 'projectPermissions',
        'projects': 'projects'
    }

    def __init__(self, alias=None, create_time=None, disabled=None, email=None, last_login_time=None, name=None, platform_permissions=None, project_permissions=None, projects=None):  # noqa: E501
        """V1LoginUserInfoResponse - a model defined in Swagger"""  # noqa: E501
        self._alias = None
        self._create_time = None
        self._disabled = None
        self._email = None
        self._last_login_time = None
        self._name = None
        self._platform_permissions = None
        self._project_permissions = None
        self._projects = None
        self.discriminator = None
        if alias is not None:
            self.alias = alias
        self.create_time = create_time
        self.disabled = disabled
        self.email = email
        self.last_login_time = last_login_time
        self.name = name
        self.platform_permissions = platform_permissions
        self.project_permissions = project_permissions
        self.projects = projects

    @property
    def alias(self):
        """Gets the alias of this V1LoginUserInfoResponse.  # noqa: E501


        :return: The alias of this V1LoginUserInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this V1LoginUserInfoResponse.


        :param alias: The alias of this V1LoginUserInfoResponse.  # noqa: E501
        :type: str
        """

        self._alias = alias

    @property
    def create_time(self):
        """Gets the create_time of this V1LoginUserInfoResponse.  # noqa: E501


        :return: The create_time of this V1LoginUserInfoResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this V1LoginUserInfoResponse.


        :param create_time: The create_time of this V1LoginUserInfoResponse.  # noqa: E501
        :type: datetime
        """
        if create_time is None:
            raise ValueError("Invalid value for `create_time`, must not be `None`")  # noqa: E501

        self._create_time = create_time

    @property
    def disabled(self):
        """Gets the disabled of this V1LoginUserInfoResponse.  # noqa: E501


        :return: The disabled of this V1LoginUserInfoResponse.  # noqa: E501
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this V1LoginUserInfoResponse.


        :param disabled: The disabled of this V1LoginUserInfoResponse.  # noqa: E501
        :type: bool
        """
        if disabled is None:
            raise ValueError("Invalid value for `disabled`, must not be `None`")  # noqa: E501

        self._disabled = disabled

    @property
    def email(self):
        """Gets the email of this V1LoginUserInfoResponse.  # noqa: E501


        :return: The email of this V1LoginUserInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this V1LoginUserInfoResponse.


        :param email: The email of this V1LoginUserInfoResponse.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def last_login_time(self):
        """Gets the last_login_time of this V1LoginUserInfoResponse.  # noqa: E501


        :return: The last_login_time of this V1LoginUserInfoResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._last_login_time

    @last_login_time.setter
    def last_login_time(self, last_login_time):
        """Sets the last_login_time of this V1LoginUserInfoResponse.


        :param last_login_time: The last_login_time of this V1LoginUserInfoResponse.  # noqa: E501
        :type: datetime
        """
        if last_login_time is None:
            raise ValueError("Invalid value for `last_login_time`, must not be `None`")  # noqa: E501

        self._last_login_time = last_login_time

    @property
    def name(self):
        """Gets the name of this V1LoginUserInfoResponse.  # noqa: E501


        :return: The name of this V1LoginUserInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V1LoginUserInfoResponse.


        :param name: The name of this V1LoginUserInfoResponse.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def platform_permissions(self):
        """Gets the platform_permissions of this V1LoginUserInfoResponse.  # noqa: E501


        :return: The platform_permissions of this V1LoginUserInfoResponse.  # noqa: E501
        :rtype: list[V1PermissionBase]
        """
        return self._platform_permissions

    @platform_permissions.setter
    def platform_permissions(self, platform_permissions):
        """Sets the platform_permissions of this V1LoginUserInfoResponse.


        :param platform_permissions: The platform_permissions of this V1LoginUserInfoResponse.  # noqa: E501
        :type: list[V1PermissionBase]
        """
        if platform_permissions is None:
            raise ValueError("Invalid value for `platform_permissions`, must not be `None`")  # noqa: E501

        self._platform_permissions = platform_permissions

    @property
    def project_permissions(self):
        """Gets the project_permissions of this V1LoginUserInfoResponse.  # noqa: E501


        :return: The project_permissions of this V1LoginUserInfoResponse.  # noqa: E501
        :rtype: dict(str, list[V1PermissionBase])
        """
        return self._project_permissions

    @project_permissions.setter
    def project_permissions(self, project_permissions):
        """Sets the project_permissions of this V1LoginUserInfoResponse.


        :param project_permissions: The project_permissions of this V1LoginUserInfoResponse.  # noqa: E501
        :type: dict(str, list[V1PermissionBase])
        """
        if project_permissions is None:
            raise ValueError("Invalid value for `project_permissions`, must not be `None`")  # noqa: E501

        self._project_permissions = project_permissions

    @property
    def projects(self):
        """Gets the projects of this V1LoginUserInfoResponse.  # noqa: E501


        :return: The projects of this V1LoginUserInfoResponse.  # noqa: E501
        :rtype: list[V1ProjectBase]
        """
        return self._projects

    @projects.setter
    def projects(self, projects):
        """Sets the projects of this V1LoginUserInfoResponse.


        :param projects: The projects of this V1LoginUserInfoResponse.  # noqa: E501
        :type: list[V1ProjectBase]
        """
        if projects is None:
            raise ValueError("Invalid value for `projects`, must not be `None`")  # noqa: E501

        self._projects = projects

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1LoginUserInfoResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1LoginUserInfoResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

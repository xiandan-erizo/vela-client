# coding: utf-8

"""
    Kubevela api doc

    Kubevela api doc  # noqa: E501

    OpenAPI spec version: v1beta1
    Contact: feedback@mail.kubevela.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1UpdateWorkflowRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alias': 'str',
        'default': 'bool',
        'description': 'str',
        'steps': 'list[V1WorkflowStep]'
    }

    attribute_map = {
        'alias': 'alias',
        'default': 'default',
        'description': 'description',
        'steps': 'steps'
    }

    def __init__(self, alias=None, default=None, description=None, steps=None):  # noqa: E501
        """V1UpdateWorkflowRequest - a model defined in Swagger"""  # noqa: E501
        self._alias = None
        self._default = None
        self._description = None
        self._steps = None
        self.discriminator = None
        if alias is not None:
            self.alias = alias
        self.default = default
        if description is not None:
            self.description = description
        if steps is not None:
            self.steps = steps

    @property
    def alias(self):
        """Gets the alias of this V1UpdateWorkflowRequest.  # noqa: E501


        :return: The alias of this V1UpdateWorkflowRequest.  # noqa: E501
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this V1UpdateWorkflowRequest.


        :param alias: The alias of this V1UpdateWorkflowRequest.  # noqa: E501
        :type: str
        """

        self._alias = alias

    @property
    def default(self):
        """Gets the default of this V1UpdateWorkflowRequest.  # noqa: E501


        :return: The default of this V1UpdateWorkflowRequest.  # noqa: E501
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this V1UpdateWorkflowRequest.


        :param default: The default of this V1UpdateWorkflowRequest.  # noqa: E501
        :type: bool
        """
        if default is None:
            raise ValueError("Invalid value for `default`, must not be `None`")  # noqa: E501

        self._default = default

    @property
    def description(self):
        """Gets the description of this V1UpdateWorkflowRequest.  # noqa: E501


        :return: The description of this V1UpdateWorkflowRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this V1UpdateWorkflowRequest.


        :param description: The description of this V1UpdateWorkflowRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def steps(self):
        """Gets the steps of this V1UpdateWorkflowRequest.  # noqa: E501


        :return: The steps of this V1UpdateWorkflowRequest.  # noqa: E501
        :rtype: list[V1WorkflowStep]
        """
        return self._steps

    @steps.setter
    def steps(self, steps):
        """Sets the steps of this V1UpdateWorkflowRequest.


        :param steps: The steps of this V1UpdateWorkflowRequest.  # noqa: E501
        :type: list[V1WorkflowStep]
        """

        self._steps = steps

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1UpdateWorkflowRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1UpdateWorkflowRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

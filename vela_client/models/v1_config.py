# coding: utf-8

"""
    Kubevela api doc

    Kubevela api doc  # noqa: E501

    OpenAPI spec version: v1beta1
    Contact: feedback@mail.kubevela.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1Config(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'args_escaped': 'bool',
        'attach_stderr': 'bool',
        'attach_stdin': 'bool',
        'attach_stdout': 'bool',
        'cmd': 'list[str]',
        'domainname': 'str',
        'entrypoint': 'list[str]',
        'env': 'list[str]',
        'exposed_ports': 'dict(str, V1ConfigExposedPorts)',
        'healthcheck': 'V1HealthConfig',
        'hostname': 'str',
        'image': 'str',
        'labels': 'dict(str, str)',
        'mac_address': 'str',
        'network_disabled': 'bool',
        'on_build': 'list[str]',
        'open_stdin': 'bool',
        'shell': 'list[str]',
        'stdin_once': 'bool',
        'stop_signal': 'str',
        'tty': 'bool',
        'user': 'str',
        'volumes': 'dict(str, V1ConfigVolumes)',
        'working_dir': 'str'
    }

    attribute_map = {
        'args_escaped': 'ArgsEscaped',
        'attach_stderr': 'AttachStderr',
        'attach_stdin': 'AttachStdin',
        'attach_stdout': 'AttachStdout',
        'cmd': 'Cmd',
        'domainname': 'Domainname',
        'entrypoint': 'Entrypoint',
        'env': 'Env',
        'exposed_ports': 'ExposedPorts',
        'healthcheck': 'Healthcheck',
        'hostname': 'Hostname',
        'image': 'Image',
        'labels': 'Labels',
        'mac_address': 'MacAddress',
        'network_disabled': 'NetworkDisabled',
        'on_build': 'OnBuild',
        'open_stdin': 'OpenStdin',
        'shell': 'Shell',
        'stdin_once': 'StdinOnce',
        'stop_signal': 'StopSignal',
        'tty': 'Tty',
        'user': 'User',
        'volumes': 'Volumes',
        'working_dir': 'WorkingDir'
    }

    def __init__(self, args_escaped=None, attach_stderr=None, attach_stdin=None, attach_stdout=None, cmd=None, domainname=None, entrypoint=None, env=None, exposed_ports=None, healthcheck=None, hostname=None, image=None, labels=None, mac_address=None, network_disabled=None, on_build=None, open_stdin=None, shell=None, stdin_once=None, stop_signal=None, tty=None, user=None, volumes=None, working_dir=None):  # noqa: E501
        """V1Config - a model defined in Swagger"""  # noqa: E501
        self._args_escaped = None
        self._attach_stderr = None
        self._attach_stdin = None
        self._attach_stdout = None
        self._cmd = None
        self._domainname = None
        self._entrypoint = None
        self._env = None
        self._exposed_ports = None
        self._healthcheck = None
        self._hostname = None
        self._image = None
        self._labels = None
        self._mac_address = None
        self._network_disabled = None
        self._on_build = None
        self._open_stdin = None
        self._shell = None
        self._stdin_once = None
        self._stop_signal = None
        self._tty = None
        self._user = None
        self._volumes = None
        self._working_dir = None
        self.discriminator = None
        if args_escaped is not None:
            self.args_escaped = args_escaped
        if attach_stderr is not None:
            self.attach_stderr = attach_stderr
        if attach_stdin is not None:
            self.attach_stdin = attach_stdin
        if attach_stdout is not None:
            self.attach_stdout = attach_stdout
        if cmd is not None:
            self.cmd = cmd
        if domainname is not None:
            self.domainname = domainname
        if entrypoint is not None:
            self.entrypoint = entrypoint
        if env is not None:
            self.env = env
        if exposed_ports is not None:
            self.exposed_ports = exposed_ports
        if healthcheck is not None:
            self.healthcheck = healthcheck
        if hostname is not None:
            self.hostname = hostname
        if image is not None:
            self.image = image
        if labels is not None:
            self.labels = labels
        if mac_address is not None:
            self.mac_address = mac_address
        if network_disabled is not None:
            self.network_disabled = network_disabled
        if on_build is not None:
            self.on_build = on_build
        if open_stdin is not None:
            self.open_stdin = open_stdin
        if shell is not None:
            self.shell = shell
        if stdin_once is not None:
            self.stdin_once = stdin_once
        if stop_signal is not None:
            self.stop_signal = stop_signal
        if tty is not None:
            self.tty = tty
        if user is not None:
            self.user = user
        if volumes is not None:
            self.volumes = volumes
        if working_dir is not None:
            self.working_dir = working_dir

    @property
    def args_escaped(self):
        """Gets the args_escaped of this V1Config.  # noqa: E501


        :return: The args_escaped of this V1Config.  # noqa: E501
        :rtype: bool
        """
        return self._args_escaped

    @args_escaped.setter
    def args_escaped(self, args_escaped):
        """Sets the args_escaped of this V1Config.


        :param args_escaped: The args_escaped of this V1Config.  # noqa: E501
        :type: bool
        """

        self._args_escaped = args_escaped

    @property
    def attach_stderr(self):
        """Gets the attach_stderr of this V1Config.  # noqa: E501


        :return: The attach_stderr of this V1Config.  # noqa: E501
        :rtype: bool
        """
        return self._attach_stderr

    @attach_stderr.setter
    def attach_stderr(self, attach_stderr):
        """Sets the attach_stderr of this V1Config.


        :param attach_stderr: The attach_stderr of this V1Config.  # noqa: E501
        :type: bool
        """

        self._attach_stderr = attach_stderr

    @property
    def attach_stdin(self):
        """Gets the attach_stdin of this V1Config.  # noqa: E501


        :return: The attach_stdin of this V1Config.  # noqa: E501
        :rtype: bool
        """
        return self._attach_stdin

    @attach_stdin.setter
    def attach_stdin(self, attach_stdin):
        """Sets the attach_stdin of this V1Config.


        :param attach_stdin: The attach_stdin of this V1Config.  # noqa: E501
        :type: bool
        """

        self._attach_stdin = attach_stdin

    @property
    def attach_stdout(self):
        """Gets the attach_stdout of this V1Config.  # noqa: E501


        :return: The attach_stdout of this V1Config.  # noqa: E501
        :rtype: bool
        """
        return self._attach_stdout

    @attach_stdout.setter
    def attach_stdout(self, attach_stdout):
        """Sets the attach_stdout of this V1Config.


        :param attach_stdout: The attach_stdout of this V1Config.  # noqa: E501
        :type: bool
        """

        self._attach_stdout = attach_stdout

    @property
    def cmd(self):
        """Gets the cmd of this V1Config.  # noqa: E501


        :return: The cmd of this V1Config.  # noqa: E501
        :rtype: list[str]
        """
        return self._cmd

    @cmd.setter
    def cmd(self, cmd):
        """Sets the cmd of this V1Config.


        :param cmd: The cmd of this V1Config.  # noqa: E501
        :type: list[str]
        """

        self._cmd = cmd

    @property
    def domainname(self):
        """Gets the domainname of this V1Config.  # noqa: E501


        :return: The domainname of this V1Config.  # noqa: E501
        :rtype: str
        """
        return self._domainname

    @domainname.setter
    def domainname(self, domainname):
        """Sets the domainname of this V1Config.


        :param domainname: The domainname of this V1Config.  # noqa: E501
        :type: str
        """

        self._domainname = domainname

    @property
    def entrypoint(self):
        """Gets the entrypoint of this V1Config.  # noqa: E501


        :return: The entrypoint of this V1Config.  # noqa: E501
        :rtype: list[str]
        """
        return self._entrypoint

    @entrypoint.setter
    def entrypoint(self, entrypoint):
        """Sets the entrypoint of this V1Config.


        :param entrypoint: The entrypoint of this V1Config.  # noqa: E501
        :type: list[str]
        """

        self._entrypoint = entrypoint

    @property
    def env(self):
        """Gets the env of this V1Config.  # noqa: E501


        :return: The env of this V1Config.  # noqa: E501
        :rtype: list[str]
        """
        return self._env

    @env.setter
    def env(self, env):
        """Sets the env of this V1Config.


        :param env: The env of this V1Config.  # noqa: E501
        :type: list[str]
        """

        self._env = env

    @property
    def exposed_ports(self):
        """Gets the exposed_ports of this V1Config.  # noqa: E501


        :return: The exposed_ports of this V1Config.  # noqa: E501
        :rtype: dict(str, V1ConfigExposedPorts)
        """
        return self._exposed_ports

    @exposed_ports.setter
    def exposed_ports(self, exposed_ports):
        """Sets the exposed_ports of this V1Config.


        :param exposed_ports: The exposed_ports of this V1Config.  # noqa: E501
        :type: dict(str, V1ConfigExposedPorts)
        """

        self._exposed_ports = exposed_ports

    @property
    def healthcheck(self):
        """Gets the healthcheck of this V1Config.  # noqa: E501


        :return: The healthcheck of this V1Config.  # noqa: E501
        :rtype: V1HealthConfig
        """
        return self._healthcheck

    @healthcheck.setter
    def healthcheck(self, healthcheck):
        """Sets the healthcheck of this V1Config.


        :param healthcheck: The healthcheck of this V1Config.  # noqa: E501
        :type: V1HealthConfig
        """

        self._healthcheck = healthcheck

    @property
    def hostname(self):
        """Gets the hostname of this V1Config.  # noqa: E501


        :return: The hostname of this V1Config.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this V1Config.


        :param hostname: The hostname of this V1Config.  # noqa: E501
        :type: str
        """

        self._hostname = hostname

    @property
    def image(self):
        """Gets the image of this V1Config.  # noqa: E501


        :return: The image of this V1Config.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this V1Config.


        :param image: The image of this V1Config.  # noqa: E501
        :type: str
        """

        self._image = image

    @property
    def labels(self):
        """Gets the labels of this V1Config.  # noqa: E501


        :return: The labels of this V1Config.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this V1Config.


        :param labels: The labels of this V1Config.  # noqa: E501
        :type: dict(str, str)
        """

        self._labels = labels

    @property
    def mac_address(self):
        """Gets the mac_address of this V1Config.  # noqa: E501


        :return: The mac_address of this V1Config.  # noqa: E501
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """Sets the mac_address of this V1Config.


        :param mac_address: The mac_address of this V1Config.  # noqa: E501
        :type: str
        """

        self._mac_address = mac_address

    @property
    def network_disabled(self):
        """Gets the network_disabled of this V1Config.  # noqa: E501


        :return: The network_disabled of this V1Config.  # noqa: E501
        :rtype: bool
        """
        return self._network_disabled

    @network_disabled.setter
    def network_disabled(self, network_disabled):
        """Sets the network_disabled of this V1Config.


        :param network_disabled: The network_disabled of this V1Config.  # noqa: E501
        :type: bool
        """

        self._network_disabled = network_disabled

    @property
    def on_build(self):
        """Gets the on_build of this V1Config.  # noqa: E501


        :return: The on_build of this V1Config.  # noqa: E501
        :rtype: list[str]
        """
        return self._on_build

    @on_build.setter
    def on_build(self, on_build):
        """Sets the on_build of this V1Config.


        :param on_build: The on_build of this V1Config.  # noqa: E501
        :type: list[str]
        """

        self._on_build = on_build

    @property
    def open_stdin(self):
        """Gets the open_stdin of this V1Config.  # noqa: E501


        :return: The open_stdin of this V1Config.  # noqa: E501
        :rtype: bool
        """
        return self._open_stdin

    @open_stdin.setter
    def open_stdin(self, open_stdin):
        """Sets the open_stdin of this V1Config.


        :param open_stdin: The open_stdin of this V1Config.  # noqa: E501
        :type: bool
        """

        self._open_stdin = open_stdin

    @property
    def shell(self):
        """Gets the shell of this V1Config.  # noqa: E501


        :return: The shell of this V1Config.  # noqa: E501
        :rtype: list[str]
        """
        return self._shell

    @shell.setter
    def shell(self, shell):
        """Sets the shell of this V1Config.


        :param shell: The shell of this V1Config.  # noqa: E501
        :type: list[str]
        """

        self._shell = shell

    @property
    def stdin_once(self):
        """Gets the stdin_once of this V1Config.  # noqa: E501


        :return: The stdin_once of this V1Config.  # noqa: E501
        :rtype: bool
        """
        return self._stdin_once

    @stdin_once.setter
    def stdin_once(self, stdin_once):
        """Sets the stdin_once of this V1Config.


        :param stdin_once: The stdin_once of this V1Config.  # noqa: E501
        :type: bool
        """

        self._stdin_once = stdin_once

    @property
    def stop_signal(self):
        """Gets the stop_signal of this V1Config.  # noqa: E501


        :return: The stop_signal of this V1Config.  # noqa: E501
        :rtype: str
        """
        return self._stop_signal

    @stop_signal.setter
    def stop_signal(self, stop_signal):
        """Sets the stop_signal of this V1Config.


        :param stop_signal: The stop_signal of this V1Config.  # noqa: E501
        :type: str
        """

        self._stop_signal = stop_signal

    @property
    def tty(self):
        """Gets the tty of this V1Config.  # noqa: E501


        :return: The tty of this V1Config.  # noqa: E501
        :rtype: bool
        """
        return self._tty

    @tty.setter
    def tty(self, tty):
        """Sets the tty of this V1Config.


        :param tty: The tty of this V1Config.  # noqa: E501
        :type: bool
        """

        self._tty = tty

    @property
    def user(self):
        """Gets the user of this V1Config.  # noqa: E501


        :return: The user of this V1Config.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this V1Config.


        :param user: The user of this V1Config.  # noqa: E501
        :type: str
        """

        self._user = user

    @property
    def volumes(self):
        """Gets the volumes of this V1Config.  # noqa: E501


        :return: The volumes of this V1Config.  # noqa: E501
        :rtype: dict(str, V1ConfigVolumes)
        """
        return self._volumes

    @volumes.setter
    def volumes(self, volumes):
        """Sets the volumes of this V1Config.


        :param volumes: The volumes of this V1Config.  # noqa: E501
        :type: dict(str, V1ConfigVolumes)
        """

        self._volumes = volumes

    @property
    def working_dir(self):
        """Gets the working_dir of this V1Config.  # noqa: E501


        :return: The working_dir of this V1Config.  # noqa: E501
        :rtype: str
        """
        return self._working_dir

    @working_dir.setter
    def working_dir(self, working_dir):
        """Sets the working_dir of this V1Config.


        :param working_dir: The working_dir of this V1Config.  # noqa: E501
        :type: str
        """

        self._working_dir = working_dir

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1Config, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1Config):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

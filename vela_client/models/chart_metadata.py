# coding: utf-8

"""
    Kubevela api doc

    Kubevela api doc  # noqa: E501

    OpenAPI spec version: v1beta1
    Contact: feedback@mail.kubevela.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ChartMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'annotations': 'dict(str, str)',
        'api_version': 'str',
        'app_version': 'str',
        'condition': 'str',
        'dependencies': 'list[ChartDependency]',
        'deprecated': 'bool',
        'description': 'str',
        'home': 'str',
        'icon': 'str',
        'keywords': 'list[str]',
        'kube_version': 'str',
        'maintainers': 'list[ChartMaintainer]',
        'name': 'str',
        'sources': 'list[str]',
        'tags': 'str',
        'type': 'str',
        'version': 'str'
    }

    attribute_map = {
        'annotations': 'annotations',
        'api_version': 'apiVersion',
        'app_version': 'appVersion',
        'condition': 'condition',
        'dependencies': 'dependencies',
        'deprecated': 'deprecated',
        'description': 'description',
        'home': 'home',
        'icon': 'icon',
        'keywords': 'keywords',
        'kube_version': 'kubeVersion',
        'maintainers': 'maintainers',
        'name': 'name',
        'sources': 'sources',
        'tags': 'tags',
        'type': 'type',
        'version': 'version'
    }

    def __init__(self, annotations=None, api_version=None, app_version=None, condition=None, dependencies=None, deprecated=None, description=None, home=None, icon=None, keywords=None, kube_version=None, maintainers=None, name=None, sources=None, tags=None, type=None, version=None):  # noqa: E501
        """ChartMetadata - a model defined in Swagger"""  # noqa: E501
        self._annotations = None
        self._api_version = None
        self._app_version = None
        self._condition = None
        self._dependencies = None
        self._deprecated = None
        self._description = None
        self._home = None
        self._icon = None
        self._keywords = None
        self._kube_version = None
        self._maintainers = None
        self._name = None
        self._sources = None
        self._tags = None
        self._type = None
        self._version = None
        self.discriminator = None
        if annotations is not None:
            self.annotations = annotations
        if api_version is not None:
            self.api_version = api_version
        if app_version is not None:
            self.app_version = app_version
        if condition is not None:
            self.condition = condition
        if dependencies is not None:
            self.dependencies = dependencies
        if deprecated is not None:
            self.deprecated = deprecated
        if description is not None:
            self.description = description
        if home is not None:
            self.home = home
        if icon is not None:
            self.icon = icon
        if keywords is not None:
            self.keywords = keywords
        if kube_version is not None:
            self.kube_version = kube_version
        if maintainers is not None:
            self.maintainers = maintainers
        if name is not None:
            self.name = name
        if sources is not None:
            self.sources = sources
        if tags is not None:
            self.tags = tags
        if type is not None:
            self.type = type
        if version is not None:
            self.version = version

    @property
    def annotations(self):
        """Gets the annotations of this ChartMetadata.  # noqa: E501


        :return: The annotations of this ChartMetadata.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this ChartMetadata.


        :param annotations: The annotations of this ChartMetadata.  # noqa: E501
        :type: dict(str, str)
        """

        self._annotations = annotations

    @property
    def api_version(self):
        """Gets the api_version of this ChartMetadata.  # noqa: E501


        :return: The api_version of this ChartMetadata.  # noqa: E501
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version):
        """Sets the api_version of this ChartMetadata.


        :param api_version: The api_version of this ChartMetadata.  # noqa: E501
        :type: str
        """

        self._api_version = api_version

    @property
    def app_version(self):
        """Gets the app_version of this ChartMetadata.  # noqa: E501


        :return: The app_version of this ChartMetadata.  # noqa: E501
        :rtype: str
        """
        return self._app_version

    @app_version.setter
    def app_version(self, app_version):
        """Sets the app_version of this ChartMetadata.


        :param app_version: The app_version of this ChartMetadata.  # noqa: E501
        :type: str
        """

        self._app_version = app_version

    @property
    def condition(self):
        """Gets the condition of this ChartMetadata.  # noqa: E501


        :return: The condition of this ChartMetadata.  # noqa: E501
        :rtype: str
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this ChartMetadata.


        :param condition: The condition of this ChartMetadata.  # noqa: E501
        :type: str
        """

        self._condition = condition

    @property
    def dependencies(self):
        """Gets the dependencies of this ChartMetadata.  # noqa: E501


        :return: The dependencies of this ChartMetadata.  # noqa: E501
        :rtype: list[ChartDependency]
        """
        return self._dependencies

    @dependencies.setter
    def dependencies(self, dependencies):
        """Sets the dependencies of this ChartMetadata.


        :param dependencies: The dependencies of this ChartMetadata.  # noqa: E501
        :type: list[ChartDependency]
        """

        self._dependencies = dependencies

    @property
    def deprecated(self):
        """Gets the deprecated of this ChartMetadata.  # noqa: E501


        :return: The deprecated of this ChartMetadata.  # noqa: E501
        :rtype: bool
        """
        return self._deprecated

    @deprecated.setter
    def deprecated(self, deprecated):
        """Sets the deprecated of this ChartMetadata.


        :param deprecated: The deprecated of this ChartMetadata.  # noqa: E501
        :type: bool
        """

        self._deprecated = deprecated

    @property
    def description(self):
        """Gets the description of this ChartMetadata.  # noqa: E501


        :return: The description of this ChartMetadata.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ChartMetadata.


        :param description: The description of this ChartMetadata.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def home(self):
        """Gets the home of this ChartMetadata.  # noqa: E501


        :return: The home of this ChartMetadata.  # noqa: E501
        :rtype: str
        """
        return self._home

    @home.setter
    def home(self, home):
        """Sets the home of this ChartMetadata.


        :param home: The home of this ChartMetadata.  # noqa: E501
        :type: str
        """

        self._home = home

    @property
    def icon(self):
        """Gets the icon of this ChartMetadata.  # noqa: E501


        :return: The icon of this ChartMetadata.  # noqa: E501
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this ChartMetadata.


        :param icon: The icon of this ChartMetadata.  # noqa: E501
        :type: str
        """

        self._icon = icon

    @property
    def keywords(self):
        """Gets the keywords of this ChartMetadata.  # noqa: E501


        :return: The keywords of this ChartMetadata.  # noqa: E501
        :rtype: list[str]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this ChartMetadata.


        :param keywords: The keywords of this ChartMetadata.  # noqa: E501
        :type: list[str]
        """

        self._keywords = keywords

    @property
    def kube_version(self):
        """Gets the kube_version of this ChartMetadata.  # noqa: E501


        :return: The kube_version of this ChartMetadata.  # noqa: E501
        :rtype: str
        """
        return self._kube_version

    @kube_version.setter
    def kube_version(self, kube_version):
        """Sets the kube_version of this ChartMetadata.


        :param kube_version: The kube_version of this ChartMetadata.  # noqa: E501
        :type: str
        """

        self._kube_version = kube_version

    @property
    def maintainers(self):
        """Gets the maintainers of this ChartMetadata.  # noqa: E501


        :return: The maintainers of this ChartMetadata.  # noqa: E501
        :rtype: list[ChartMaintainer]
        """
        return self._maintainers

    @maintainers.setter
    def maintainers(self, maintainers):
        """Sets the maintainers of this ChartMetadata.


        :param maintainers: The maintainers of this ChartMetadata.  # noqa: E501
        :type: list[ChartMaintainer]
        """

        self._maintainers = maintainers

    @property
    def name(self):
        """Gets the name of this ChartMetadata.  # noqa: E501


        :return: The name of this ChartMetadata.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ChartMetadata.


        :param name: The name of this ChartMetadata.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def sources(self):
        """Gets the sources of this ChartMetadata.  # noqa: E501


        :return: The sources of this ChartMetadata.  # noqa: E501
        :rtype: list[str]
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this ChartMetadata.


        :param sources: The sources of this ChartMetadata.  # noqa: E501
        :type: list[str]
        """

        self._sources = sources

    @property
    def tags(self):
        """Gets the tags of this ChartMetadata.  # noqa: E501


        :return: The tags of this ChartMetadata.  # noqa: E501
        :rtype: str
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ChartMetadata.


        :param tags: The tags of this ChartMetadata.  # noqa: E501
        :type: str
        """

        self._tags = tags

    @property
    def type(self):
        """Gets the type of this ChartMetadata.  # noqa: E501


        :return: The type of this ChartMetadata.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ChartMetadata.


        :param type: The type of this ChartMetadata.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def version(self):
        """Gets the version of this ChartMetadata.  # noqa: E501


        :return: The version of this ChartMetadata.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ChartMetadata.


        :param version: The version of this ChartMetadata.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ChartMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChartMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

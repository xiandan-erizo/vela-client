# coding: utf-8

"""
    Kubevela api doc

    Kubevela api doc  # noqa: E501

    OpenAPI spec version: v1beta1
    Contact: feedback@mail.kubevela.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1DetailAddonResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'available_versions': 'list[str]',
        'definitions': 'list[V1AddonDefinition]',
        'dependencies': 'list[AddonDependency]',
        'deploy_to': 'AddonDeployTo',
        'description': 'str',
        'detail': 'str',
        'icon': 'str',
        'invisible': 'bool',
        'name': 'str',
        'need_namespace': 'list[str]',
        'registry_name': 'str',
        'schema': 'str',
        'system': 'AddonSystemRequirements',
        'tags': 'list[str]',
        'ui_schema': 'list[UtilsUIParameter]',
        'url': 'str',
        'version': 'str'
    }

    attribute_map = {
        'available_versions': 'availableVersions',
        'definitions': 'definitions',
        'dependencies': 'dependencies',
        'deploy_to': 'deployTo',
        'description': 'description',
        'detail': 'detail',
        'icon': 'icon',
        'invisible': 'invisible',
        'name': 'name',
        'need_namespace': 'needNamespace',
        'registry_name': 'registryName',
        'schema': 'schema',
        'system': 'system',
        'tags': 'tags',
        'ui_schema': 'uiSchema',
        'url': 'url',
        'version': 'version'
    }

    def __init__(self, available_versions=None, definitions=None, dependencies=None, deploy_to=None, description=None, detail=None, icon=None, invisible=None, name=None, need_namespace=None, registry_name=None, schema=None, system=None, tags=None, ui_schema=None, url=None, version=None):  # noqa: E501
        """V1DetailAddonResponse - a model defined in Swagger"""  # noqa: E501
        self._available_versions = None
        self._definitions = None
        self._dependencies = None
        self._deploy_to = None
        self._description = None
        self._detail = None
        self._icon = None
        self._invisible = None
        self._name = None
        self._need_namespace = None
        self._registry_name = None
        self._schema = None
        self._system = None
        self._tags = None
        self._ui_schema = None
        self._url = None
        self._version = None
        self.discriminator = None
        self.available_versions = available_versions
        self.definitions = definitions
        if dependencies is not None:
            self.dependencies = dependencies
        if deploy_to is not None:
            self.deploy_to = deploy_to
        self.description = description
        if detail is not None:
            self.detail = detail
        self.icon = icon
        self.invisible = invisible
        self.name = name
        if need_namespace is not None:
            self.need_namespace = need_namespace
        if registry_name is not None:
            self.registry_name = registry_name
        self.schema = schema
        if system is not None:
            self.system = system
        if tags is not None:
            self.tags = tags
        self.ui_schema = ui_schema
        if url is not None:
            self.url = url
        self.version = version

    @property
    def available_versions(self):
        """Gets the available_versions of this V1DetailAddonResponse.  # noqa: E501


        :return: The available_versions of this V1DetailAddonResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._available_versions

    @available_versions.setter
    def available_versions(self, available_versions):
        """Sets the available_versions of this V1DetailAddonResponse.


        :param available_versions: The available_versions of this V1DetailAddonResponse.  # noqa: E501
        :type: list[str]
        """
        if available_versions is None:
            raise ValueError("Invalid value for `available_versions`, must not be `None`")  # noqa: E501

        self._available_versions = available_versions

    @property
    def definitions(self):
        """Gets the definitions of this V1DetailAddonResponse.  # noqa: E501


        :return: The definitions of this V1DetailAddonResponse.  # noqa: E501
        :rtype: list[V1AddonDefinition]
        """
        return self._definitions

    @definitions.setter
    def definitions(self, definitions):
        """Sets the definitions of this V1DetailAddonResponse.


        :param definitions: The definitions of this V1DetailAddonResponse.  # noqa: E501
        :type: list[V1AddonDefinition]
        """
        if definitions is None:
            raise ValueError("Invalid value for `definitions`, must not be `None`")  # noqa: E501

        self._definitions = definitions

    @property
    def dependencies(self):
        """Gets the dependencies of this V1DetailAddonResponse.  # noqa: E501


        :return: The dependencies of this V1DetailAddonResponse.  # noqa: E501
        :rtype: list[AddonDependency]
        """
        return self._dependencies

    @dependencies.setter
    def dependencies(self, dependencies):
        """Sets the dependencies of this V1DetailAddonResponse.


        :param dependencies: The dependencies of this V1DetailAddonResponse.  # noqa: E501
        :type: list[AddonDependency]
        """

        self._dependencies = dependencies

    @property
    def deploy_to(self):
        """Gets the deploy_to of this V1DetailAddonResponse.  # noqa: E501


        :return: The deploy_to of this V1DetailAddonResponse.  # noqa: E501
        :rtype: AddonDeployTo
        """
        return self._deploy_to

    @deploy_to.setter
    def deploy_to(self, deploy_to):
        """Sets the deploy_to of this V1DetailAddonResponse.


        :param deploy_to: The deploy_to of this V1DetailAddonResponse.  # noqa: E501
        :type: AddonDeployTo
        """

        self._deploy_to = deploy_to

    @property
    def description(self):
        """Gets the description of this V1DetailAddonResponse.  # noqa: E501


        :return: The description of this V1DetailAddonResponse.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this V1DetailAddonResponse.


        :param description: The description of this V1DetailAddonResponse.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def detail(self):
        """Gets the detail of this V1DetailAddonResponse.  # noqa: E501


        :return: The detail of this V1DetailAddonResponse.  # noqa: E501
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this V1DetailAddonResponse.


        :param detail: The detail of this V1DetailAddonResponse.  # noqa: E501
        :type: str
        """

        self._detail = detail

    @property
    def icon(self):
        """Gets the icon of this V1DetailAddonResponse.  # noqa: E501


        :return: The icon of this V1DetailAddonResponse.  # noqa: E501
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this V1DetailAddonResponse.


        :param icon: The icon of this V1DetailAddonResponse.  # noqa: E501
        :type: str
        """
        if icon is None:
            raise ValueError("Invalid value for `icon`, must not be `None`")  # noqa: E501

        self._icon = icon

    @property
    def invisible(self):
        """Gets the invisible of this V1DetailAddonResponse.  # noqa: E501


        :return: The invisible of this V1DetailAddonResponse.  # noqa: E501
        :rtype: bool
        """
        return self._invisible

    @invisible.setter
    def invisible(self, invisible):
        """Sets the invisible of this V1DetailAddonResponse.


        :param invisible: The invisible of this V1DetailAddonResponse.  # noqa: E501
        :type: bool
        """
        if invisible is None:
            raise ValueError("Invalid value for `invisible`, must not be `None`")  # noqa: E501

        self._invisible = invisible

    @property
    def name(self):
        """Gets the name of this V1DetailAddonResponse.  # noqa: E501


        :return: The name of this V1DetailAddonResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V1DetailAddonResponse.


        :param name: The name of this V1DetailAddonResponse.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def need_namespace(self):
        """Gets the need_namespace of this V1DetailAddonResponse.  # noqa: E501


        :return: The need_namespace of this V1DetailAddonResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._need_namespace

    @need_namespace.setter
    def need_namespace(self, need_namespace):
        """Sets the need_namespace of this V1DetailAddonResponse.


        :param need_namespace: The need_namespace of this V1DetailAddonResponse.  # noqa: E501
        :type: list[str]
        """

        self._need_namespace = need_namespace

    @property
    def registry_name(self):
        """Gets the registry_name of this V1DetailAddonResponse.  # noqa: E501


        :return: The registry_name of this V1DetailAddonResponse.  # noqa: E501
        :rtype: str
        """
        return self._registry_name

    @registry_name.setter
    def registry_name(self, registry_name):
        """Sets the registry_name of this V1DetailAddonResponse.


        :param registry_name: The registry_name of this V1DetailAddonResponse.  # noqa: E501
        :type: str
        """

        self._registry_name = registry_name

    @property
    def schema(self):
        """Gets the schema of this V1DetailAddonResponse.  # noqa: E501


        :return: The schema of this V1DetailAddonResponse.  # noqa: E501
        :rtype: str
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """Sets the schema of this V1DetailAddonResponse.


        :param schema: The schema of this V1DetailAddonResponse.  # noqa: E501
        :type: str
        """
        if schema is None:
            raise ValueError("Invalid value for `schema`, must not be `None`")  # noqa: E501

        self._schema = schema

    @property
    def system(self):
        """Gets the system of this V1DetailAddonResponse.  # noqa: E501


        :return: The system of this V1DetailAddonResponse.  # noqa: E501
        :rtype: AddonSystemRequirements
        """
        return self._system

    @system.setter
    def system(self, system):
        """Sets the system of this V1DetailAddonResponse.


        :param system: The system of this V1DetailAddonResponse.  # noqa: E501
        :type: AddonSystemRequirements
        """

        self._system = system

    @property
    def tags(self):
        """Gets the tags of this V1DetailAddonResponse.  # noqa: E501


        :return: The tags of this V1DetailAddonResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this V1DetailAddonResponse.


        :param tags: The tags of this V1DetailAddonResponse.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def ui_schema(self):
        """Gets the ui_schema of this V1DetailAddonResponse.  # noqa: E501


        :return: The ui_schema of this V1DetailAddonResponse.  # noqa: E501
        :rtype: list[UtilsUIParameter]
        """
        return self._ui_schema

    @ui_schema.setter
    def ui_schema(self, ui_schema):
        """Sets the ui_schema of this V1DetailAddonResponse.


        :param ui_schema: The ui_schema of this V1DetailAddonResponse.  # noqa: E501
        :type: list[UtilsUIParameter]
        """
        if ui_schema is None:
            raise ValueError("Invalid value for `ui_schema`, must not be `None`")  # noqa: E501

        self._ui_schema = ui_schema

    @property
    def url(self):
        """Gets the url of this V1DetailAddonResponse.  # noqa: E501


        :return: The url of this V1DetailAddonResponse.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this V1DetailAddonResponse.


        :param url: The url of this V1DetailAddonResponse.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def version(self):
        """Gets the version of this V1DetailAddonResponse.  # noqa: E501


        :return: The version of this V1DetailAddonResponse.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this V1DetailAddonResponse.


        :param version: The version of this V1DetailAddonResponse.  # noqa: E501
        :type: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1DetailAddonResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1DetailAddonResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

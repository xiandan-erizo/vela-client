# coding: utf-8

"""
    Kubevela api doc

    Kubevela api doc  # noqa: E501

    OpenAPI spec version: v1beta1
    Contact: feedback@mail.kubevela.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1AppCompareResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'base_app_yaml': 'str',
        'diff_report': 'str',
        'is_diff': 'bool',
        'target_app_yaml': 'str'
    }

    attribute_map = {
        'base_app_yaml': 'baseAppYAML',
        'diff_report': 'diffReport',
        'is_diff': 'isDiff',
        'target_app_yaml': 'targetAppYAML'
    }

    def __init__(self, base_app_yaml=None, diff_report=None, is_diff=None, target_app_yaml=None):  # noqa: E501
        """V1AppCompareResponse - a model defined in Swagger"""  # noqa: E501
        self._base_app_yaml = None
        self._diff_report = None
        self._is_diff = None
        self._target_app_yaml = None
        self.discriminator = None
        self.base_app_yaml = base_app_yaml
        self.diff_report = diff_report
        self.is_diff = is_diff
        self.target_app_yaml = target_app_yaml

    @property
    def base_app_yaml(self):
        """Gets the base_app_yaml of this V1AppCompareResponse.  # noqa: E501


        :return: The base_app_yaml of this V1AppCompareResponse.  # noqa: E501
        :rtype: str
        """
        return self._base_app_yaml

    @base_app_yaml.setter
    def base_app_yaml(self, base_app_yaml):
        """Sets the base_app_yaml of this V1AppCompareResponse.


        :param base_app_yaml: The base_app_yaml of this V1AppCompareResponse.  # noqa: E501
        :type: str
        """
        if base_app_yaml is None:
            raise ValueError("Invalid value for `base_app_yaml`, must not be `None`")  # noqa: E501

        self._base_app_yaml = base_app_yaml

    @property
    def diff_report(self):
        """Gets the diff_report of this V1AppCompareResponse.  # noqa: E501


        :return: The diff_report of this V1AppCompareResponse.  # noqa: E501
        :rtype: str
        """
        return self._diff_report

    @diff_report.setter
    def diff_report(self, diff_report):
        """Sets the diff_report of this V1AppCompareResponse.


        :param diff_report: The diff_report of this V1AppCompareResponse.  # noqa: E501
        :type: str
        """
        if diff_report is None:
            raise ValueError("Invalid value for `diff_report`, must not be `None`")  # noqa: E501

        self._diff_report = diff_report

    @property
    def is_diff(self):
        """Gets the is_diff of this V1AppCompareResponse.  # noqa: E501


        :return: The is_diff of this V1AppCompareResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_diff

    @is_diff.setter
    def is_diff(self, is_diff):
        """Sets the is_diff of this V1AppCompareResponse.


        :param is_diff: The is_diff of this V1AppCompareResponse.  # noqa: E501
        :type: bool
        """
        if is_diff is None:
            raise ValueError("Invalid value for `is_diff`, must not be `None`")  # noqa: E501

        self._is_diff = is_diff

    @property
    def target_app_yaml(self):
        """Gets the target_app_yaml of this V1AppCompareResponse.  # noqa: E501


        :return: The target_app_yaml of this V1AppCompareResponse.  # noqa: E501
        :rtype: str
        """
        return self._target_app_yaml

    @target_app_yaml.setter
    def target_app_yaml(self, target_app_yaml):
        """Sets the target_app_yaml of this V1AppCompareResponse.


        :param target_app_yaml: The target_app_yaml of this V1AppCompareResponse.  # noqa: E501
        :type: str
        """
        if target_app_yaml is None:
            raise ValueError("Invalid value for `target_app_yaml`, must not be `None`")  # noqa: E501

        self._target_app_yaml = target_app_yaml

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1AppCompareResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1AppCompareResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

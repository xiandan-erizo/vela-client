# coding: utf-8

"""
    Kubevela api doc

    Kubevela api doc  # noqa: E501

    OpenAPI spec version: v1beta1
    Contact: feedback@mail.kubevela.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1Manifest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'annotations': 'dict(str, str)',
        'config': 'V1Descriptor',
        'layers': 'list[V1Descriptor]',
        'media_type': 'str',
        'schema_version': 'int'
    }

    attribute_map = {
        'annotations': 'annotations',
        'config': 'config',
        'layers': 'layers',
        'media_type': 'mediaType',
        'schema_version': 'schemaVersion'
    }

    def __init__(self, annotations=None, config=None, layers=None, media_type=None, schema_version=None):  # noqa: E501
        """V1Manifest - a model defined in Swagger"""  # noqa: E501
        self._annotations = None
        self._config = None
        self._layers = None
        self._media_type = None
        self._schema_version = None
        self.discriminator = None
        if annotations is not None:
            self.annotations = annotations
        self.config = config
        self.layers = layers
        if media_type is not None:
            self.media_type = media_type
        self.schema_version = schema_version

    @property
    def annotations(self):
        """Gets the annotations of this V1Manifest.  # noqa: E501


        :return: The annotations of this V1Manifest.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this V1Manifest.


        :param annotations: The annotations of this V1Manifest.  # noqa: E501
        :type: dict(str, str)
        """

        self._annotations = annotations

    @property
    def config(self):
        """Gets the config of this V1Manifest.  # noqa: E501


        :return: The config of this V1Manifest.  # noqa: E501
        :rtype: V1Descriptor
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this V1Manifest.


        :param config: The config of this V1Manifest.  # noqa: E501
        :type: V1Descriptor
        """
        if config is None:
            raise ValueError("Invalid value for `config`, must not be `None`")  # noqa: E501

        self._config = config

    @property
    def layers(self):
        """Gets the layers of this V1Manifest.  # noqa: E501


        :return: The layers of this V1Manifest.  # noqa: E501
        :rtype: list[V1Descriptor]
        """
        return self._layers

    @layers.setter
    def layers(self, layers):
        """Sets the layers of this V1Manifest.


        :param layers: The layers of this V1Manifest.  # noqa: E501
        :type: list[V1Descriptor]
        """
        if layers is None:
            raise ValueError("Invalid value for `layers`, must not be `None`")  # noqa: E501

        self._layers = layers

    @property
    def media_type(self):
        """Gets the media_type of this V1Manifest.  # noqa: E501


        :return: The media_type of this V1Manifest.  # noqa: E501
        :rtype: str
        """
        return self._media_type

    @media_type.setter
    def media_type(self, media_type):
        """Sets the media_type of this V1Manifest.


        :param media_type: The media_type of this V1Manifest.  # noqa: E501
        :type: str
        """

        self._media_type = media_type

    @property
    def schema_version(self):
        """Gets the schema_version of this V1Manifest.  # noqa: E501


        :return: The schema_version of this V1Manifest.  # noqa: E501
        :rtype: int
        """
        return self._schema_version

    @schema_version.setter
    def schema_version(self, schema_version):
        """Sets the schema_version of this V1Manifest.


        :param schema_version: The schema_version of this V1Manifest.  # noqa: E501
        :type: int
        """
        if schema_version is None:
            raise ValueError("Invalid value for `schema_version`, must not be `None`")  # noqa: E501

        self._schema_version = schema_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1Manifest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1Manifest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

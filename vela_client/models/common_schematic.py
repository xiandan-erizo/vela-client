# coding: utf-8

"""
    Kubevela api doc

    Kubevela api doc  # noqa: E501

    OpenAPI spec version: v1beta1
    Contact: feedback@mail.kubevela.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CommonSchematic(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cue': 'CommonCUE',
        'helm': 'CommonHelm',
        'kube': 'CommonKube',
        'terraform': 'CommonTerraform'
    }

    attribute_map = {
        'cue': 'cue',
        'helm': 'helm',
        'kube': 'kube',
        'terraform': 'terraform'
    }

    def __init__(self, cue=None, helm=None, kube=None, terraform=None):  # noqa: E501
        """CommonSchematic - a model defined in Swagger"""  # noqa: E501
        self._cue = None
        self._helm = None
        self._kube = None
        self._terraform = None
        self.discriminator = None
        if cue is not None:
            self.cue = cue
        if helm is not None:
            self.helm = helm
        if kube is not None:
            self.kube = kube
        if terraform is not None:
            self.terraform = terraform

    @property
    def cue(self):
        """Gets the cue of this CommonSchematic.  # noqa: E501


        :return: The cue of this CommonSchematic.  # noqa: E501
        :rtype: CommonCUE
        """
        return self._cue

    @cue.setter
    def cue(self, cue):
        """Sets the cue of this CommonSchematic.


        :param cue: The cue of this CommonSchematic.  # noqa: E501
        :type: CommonCUE
        """

        self._cue = cue

    @property
    def helm(self):
        """Gets the helm of this CommonSchematic.  # noqa: E501


        :return: The helm of this CommonSchematic.  # noqa: E501
        :rtype: CommonHelm
        """
        return self._helm

    @helm.setter
    def helm(self, helm):
        """Sets the helm of this CommonSchematic.


        :param helm: The helm of this CommonSchematic.  # noqa: E501
        :type: CommonHelm
        """

        self._helm = helm

    @property
    def kube(self):
        """Gets the kube of this CommonSchematic.  # noqa: E501


        :return: The kube of this CommonSchematic.  # noqa: E501
        :rtype: CommonKube
        """
        return self._kube

    @kube.setter
    def kube(self, kube):
        """Sets the kube of this CommonSchematic.


        :param kube: The kube of this CommonSchematic.  # noqa: E501
        :type: CommonKube
        """

        self._kube = kube

    @property
    def terraform(self):
        """Gets the terraform of this CommonSchematic.  # noqa: E501


        :return: The terraform of this CommonSchematic.  # noqa: E501
        :rtype: CommonTerraform
        """
        return self._terraform

    @terraform.setter
    def terraform(self, terraform):
        """Sets the terraform of this CommonSchematic.


        :param terraform: The terraform of this CommonSchematic.  # noqa: E501
        :type: CommonTerraform
        """

        self._terraform = terraform

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CommonSchematic, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CommonSchematic):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

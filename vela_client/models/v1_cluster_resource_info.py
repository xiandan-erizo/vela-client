# coding: utf-8

"""
    Kubevela api doc

    Kubevela api doc  # noqa: E501

    OpenAPI spec version: v1beta1
    Contact: feedback@mail.kubevela.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1ClusterResourceInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cpu_capacity': 'int',
        'cpu_used': 'int',
        'gpu_capacity': 'int',
        'gpu_used': 'int',
        'master_number': 'int',
        'memory_capacity': 'int',
        'memory_used': 'int',
        'pod_capacity': 'int',
        'pod_used': 'int',
        'storage_class_list': 'list[str]',
        'worker_number': 'int'
    }

    attribute_map = {
        'cpu_capacity': 'cpuCapacity',
        'cpu_used': 'cpuUsed',
        'gpu_capacity': 'gpuCapacity',
        'gpu_used': 'gpuUsed',
        'master_number': 'masterNumber',
        'memory_capacity': 'memoryCapacity',
        'memory_used': 'memoryUsed',
        'pod_capacity': 'podCapacity',
        'pod_used': 'podUsed',
        'storage_class_list': 'storageClassList',
        'worker_number': 'workerNumber'
    }

    def __init__(self, cpu_capacity=None, cpu_used=None, gpu_capacity=None, gpu_used=None, master_number=None, memory_capacity=None, memory_used=None, pod_capacity=None, pod_used=None, storage_class_list=None, worker_number=None):  # noqa: E501
        """V1ClusterResourceInfo - a model defined in Swagger"""  # noqa: E501
        self._cpu_capacity = None
        self._cpu_used = None
        self._gpu_capacity = None
        self._gpu_used = None
        self._master_number = None
        self._memory_capacity = None
        self._memory_used = None
        self._pod_capacity = None
        self._pod_used = None
        self._storage_class_list = None
        self._worker_number = None
        self.discriminator = None
        self.cpu_capacity = cpu_capacity
        self.cpu_used = cpu_used
        if gpu_capacity is not None:
            self.gpu_capacity = gpu_capacity
        if gpu_used is not None:
            self.gpu_used = gpu_used
        self.master_number = master_number
        self.memory_capacity = memory_capacity
        self.memory_used = memory_used
        self.pod_capacity = pod_capacity
        self.pod_used = pod_used
        if storage_class_list is not None:
            self.storage_class_list = storage_class_list
        self.worker_number = worker_number

    @property
    def cpu_capacity(self):
        """Gets the cpu_capacity of this V1ClusterResourceInfo.  # noqa: E501


        :return: The cpu_capacity of this V1ClusterResourceInfo.  # noqa: E501
        :rtype: int
        """
        return self._cpu_capacity

    @cpu_capacity.setter
    def cpu_capacity(self, cpu_capacity):
        """Sets the cpu_capacity of this V1ClusterResourceInfo.


        :param cpu_capacity: The cpu_capacity of this V1ClusterResourceInfo.  # noqa: E501
        :type: int
        """
        if cpu_capacity is None:
            raise ValueError("Invalid value for `cpu_capacity`, must not be `None`")  # noqa: E501

        self._cpu_capacity = cpu_capacity

    @property
    def cpu_used(self):
        """Gets the cpu_used of this V1ClusterResourceInfo.  # noqa: E501


        :return: The cpu_used of this V1ClusterResourceInfo.  # noqa: E501
        :rtype: int
        """
        return self._cpu_used

    @cpu_used.setter
    def cpu_used(self, cpu_used):
        """Sets the cpu_used of this V1ClusterResourceInfo.


        :param cpu_used: The cpu_used of this V1ClusterResourceInfo.  # noqa: E501
        :type: int
        """
        if cpu_used is None:
            raise ValueError("Invalid value for `cpu_used`, must not be `None`")  # noqa: E501

        self._cpu_used = cpu_used

    @property
    def gpu_capacity(self):
        """Gets the gpu_capacity of this V1ClusterResourceInfo.  # noqa: E501


        :return: The gpu_capacity of this V1ClusterResourceInfo.  # noqa: E501
        :rtype: int
        """
        return self._gpu_capacity

    @gpu_capacity.setter
    def gpu_capacity(self, gpu_capacity):
        """Sets the gpu_capacity of this V1ClusterResourceInfo.


        :param gpu_capacity: The gpu_capacity of this V1ClusterResourceInfo.  # noqa: E501
        :type: int
        """

        self._gpu_capacity = gpu_capacity

    @property
    def gpu_used(self):
        """Gets the gpu_used of this V1ClusterResourceInfo.  # noqa: E501


        :return: The gpu_used of this V1ClusterResourceInfo.  # noqa: E501
        :rtype: int
        """
        return self._gpu_used

    @gpu_used.setter
    def gpu_used(self, gpu_used):
        """Sets the gpu_used of this V1ClusterResourceInfo.


        :param gpu_used: The gpu_used of this V1ClusterResourceInfo.  # noqa: E501
        :type: int
        """

        self._gpu_used = gpu_used

    @property
    def master_number(self):
        """Gets the master_number of this V1ClusterResourceInfo.  # noqa: E501


        :return: The master_number of this V1ClusterResourceInfo.  # noqa: E501
        :rtype: int
        """
        return self._master_number

    @master_number.setter
    def master_number(self, master_number):
        """Sets the master_number of this V1ClusterResourceInfo.


        :param master_number: The master_number of this V1ClusterResourceInfo.  # noqa: E501
        :type: int
        """
        if master_number is None:
            raise ValueError("Invalid value for `master_number`, must not be `None`")  # noqa: E501

        self._master_number = master_number

    @property
    def memory_capacity(self):
        """Gets the memory_capacity of this V1ClusterResourceInfo.  # noqa: E501


        :return: The memory_capacity of this V1ClusterResourceInfo.  # noqa: E501
        :rtype: int
        """
        return self._memory_capacity

    @memory_capacity.setter
    def memory_capacity(self, memory_capacity):
        """Sets the memory_capacity of this V1ClusterResourceInfo.


        :param memory_capacity: The memory_capacity of this V1ClusterResourceInfo.  # noqa: E501
        :type: int
        """
        if memory_capacity is None:
            raise ValueError("Invalid value for `memory_capacity`, must not be `None`")  # noqa: E501

        self._memory_capacity = memory_capacity

    @property
    def memory_used(self):
        """Gets the memory_used of this V1ClusterResourceInfo.  # noqa: E501


        :return: The memory_used of this V1ClusterResourceInfo.  # noqa: E501
        :rtype: int
        """
        return self._memory_used

    @memory_used.setter
    def memory_used(self, memory_used):
        """Sets the memory_used of this V1ClusterResourceInfo.


        :param memory_used: The memory_used of this V1ClusterResourceInfo.  # noqa: E501
        :type: int
        """
        if memory_used is None:
            raise ValueError("Invalid value for `memory_used`, must not be `None`")  # noqa: E501

        self._memory_used = memory_used

    @property
    def pod_capacity(self):
        """Gets the pod_capacity of this V1ClusterResourceInfo.  # noqa: E501


        :return: The pod_capacity of this V1ClusterResourceInfo.  # noqa: E501
        :rtype: int
        """
        return self._pod_capacity

    @pod_capacity.setter
    def pod_capacity(self, pod_capacity):
        """Sets the pod_capacity of this V1ClusterResourceInfo.


        :param pod_capacity: The pod_capacity of this V1ClusterResourceInfo.  # noqa: E501
        :type: int
        """
        if pod_capacity is None:
            raise ValueError("Invalid value for `pod_capacity`, must not be `None`")  # noqa: E501

        self._pod_capacity = pod_capacity

    @property
    def pod_used(self):
        """Gets the pod_used of this V1ClusterResourceInfo.  # noqa: E501


        :return: The pod_used of this V1ClusterResourceInfo.  # noqa: E501
        :rtype: int
        """
        return self._pod_used

    @pod_used.setter
    def pod_used(self, pod_used):
        """Sets the pod_used of this V1ClusterResourceInfo.


        :param pod_used: The pod_used of this V1ClusterResourceInfo.  # noqa: E501
        :type: int
        """
        if pod_used is None:
            raise ValueError("Invalid value for `pod_used`, must not be `None`")  # noqa: E501

        self._pod_used = pod_used

    @property
    def storage_class_list(self):
        """Gets the storage_class_list of this V1ClusterResourceInfo.  # noqa: E501


        :return: The storage_class_list of this V1ClusterResourceInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._storage_class_list

    @storage_class_list.setter
    def storage_class_list(self, storage_class_list):
        """Sets the storage_class_list of this V1ClusterResourceInfo.


        :param storage_class_list: The storage_class_list of this V1ClusterResourceInfo.  # noqa: E501
        :type: list[str]
        """

        self._storage_class_list = storage_class_list

    @property
    def worker_number(self):
        """Gets the worker_number of this V1ClusterResourceInfo.  # noqa: E501


        :return: The worker_number of this V1ClusterResourceInfo.  # noqa: E501
        :rtype: int
        """
        return self._worker_number

    @worker_number.setter
    def worker_number(self, worker_number):
        """Sets the worker_number of this V1ClusterResourceInfo.


        :param worker_number: The worker_number of this V1ClusterResourceInfo.  # noqa: E501
        :type: int
        """
        if worker_number is None:
            raise ValueError("Invalid value for `worker_number`, must not be `None`")  # noqa: E501

        self._worker_number = worker_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1ClusterResourceInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1ClusterResourceInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

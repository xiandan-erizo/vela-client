# coding: utf-8

"""
    Kubevela api doc

    Kubevela api doc  # noqa: E501

    OpenAPI spec version: v1beta1
    Contact: feedback@mail.kubevela.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1alpha1WorkflowRunSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'context': 'str',
        'mode': 'V1alpha1WorkflowExecuteMode',
        'workflow_ref': 'str',
        'workflow_spec': 'V1alpha1WorkflowSpec'
    }

    attribute_map = {
        'context': 'context',
        'mode': 'mode',
        'workflow_ref': 'workflowRef',
        'workflow_spec': 'workflowSpec'
    }

    def __init__(self, context=None, mode=None, workflow_ref=None, workflow_spec=None):  # noqa: E501
        """V1alpha1WorkflowRunSpec - a model defined in Swagger"""  # noqa: E501
        self._context = None
        self._mode = None
        self._workflow_ref = None
        self._workflow_spec = None
        self.discriminator = None
        if context is not None:
            self.context = context
        if mode is not None:
            self.mode = mode
        if workflow_ref is not None:
            self.workflow_ref = workflow_ref
        if workflow_spec is not None:
            self.workflow_spec = workflow_spec

    @property
    def context(self):
        """Gets the context of this V1alpha1WorkflowRunSpec.  # noqa: E501


        :return: The context of this V1alpha1WorkflowRunSpec.  # noqa: E501
        :rtype: str
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this V1alpha1WorkflowRunSpec.


        :param context: The context of this V1alpha1WorkflowRunSpec.  # noqa: E501
        :type: str
        """

        self._context = context

    @property
    def mode(self):
        """Gets the mode of this V1alpha1WorkflowRunSpec.  # noqa: E501


        :return: The mode of this V1alpha1WorkflowRunSpec.  # noqa: E501
        :rtype: V1alpha1WorkflowExecuteMode
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this V1alpha1WorkflowRunSpec.


        :param mode: The mode of this V1alpha1WorkflowRunSpec.  # noqa: E501
        :type: V1alpha1WorkflowExecuteMode
        """

        self._mode = mode

    @property
    def workflow_ref(self):
        """Gets the workflow_ref of this V1alpha1WorkflowRunSpec.  # noqa: E501


        :return: The workflow_ref of this V1alpha1WorkflowRunSpec.  # noqa: E501
        :rtype: str
        """
        return self._workflow_ref

    @workflow_ref.setter
    def workflow_ref(self, workflow_ref):
        """Sets the workflow_ref of this V1alpha1WorkflowRunSpec.


        :param workflow_ref: The workflow_ref of this V1alpha1WorkflowRunSpec.  # noqa: E501
        :type: str
        """

        self._workflow_ref = workflow_ref

    @property
    def workflow_spec(self):
        """Gets the workflow_spec of this V1alpha1WorkflowRunSpec.  # noqa: E501


        :return: The workflow_spec of this V1alpha1WorkflowRunSpec.  # noqa: E501
        :rtype: V1alpha1WorkflowSpec
        """
        return self._workflow_spec

    @workflow_spec.setter
    def workflow_spec(self, workflow_spec):
        """Sets the workflow_spec of this V1alpha1WorkflowRunSpec.


        :param workflow_spec: The workflow_spec of this V1alpha1WorkflowRunSpec.  # noqa: E501
        :type: V1alpha1WorkflowSpec
        """

        self._workflow_spec = workflow_spec

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1alpha1WorkflowRunSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1alpha1WorkflowRunSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

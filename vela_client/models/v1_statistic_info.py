# coding: utf-8

"""
    Kubevela api doc

    Kubevela api doc  # noqa: E501

    OpenAPI spec version: v1beta1
    Contact: feedback@mail.kubevela.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1StatisticInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'app_count': 'str',
        'cluster_count': 'str',
        'component_definition_top_list': 'list[str]',
        'enable_addon_list': 'dict(str, str)',
        'policy_definition_top_list': 'list[str]',
        'trait_definition_top_list': 'list[str]',
        'update_time': 'datetime',
        'workflow_definition_top_list': 'list[str]'
    }

    attribute_map = {
        'app_count': 'appCount',
        'cluster_count': 'clusterCount',
        'component_definition_top_list': 'componentDefinitionTopList',
        'enable_addon_list': 'enableAddonList',
        'policy_definition_top_list': 'policyDefinitionTopList',
        'trait_definition_top_list': 'traitDefinitionTopList',
        'update_time': 'updateTime',
        'workflow_definition_top_list': 'workflowDefinitionTopList'
    }

    def __init__(self, app_count=None, cluster_count=None, component_definition_top_list=None, enable_addon_list=None, policy_definition_top_list=None, trait_definition_top_list=None, update_time=None, workflow_definition_top_list=None):  # noqa: E501
        """V1StatisticInfo - a model defined in Swagger"""  # noqa: E501
        self._app_count = None
        self._cluster_count = None
        self._component_definition_top_list = None
        self._enable_addon_list = None
        self._policy_definition_top_list = None
        self._trait_definition_top_list = None
        self._update_time = None
        self._workflow_definition_top_list = None
        self.discriminator = None
        if app_count is not None:
            self.app_count = app_count
        if cluster_count is not None:
            self.cluster_count = cluster_count
        if component_definition_top_list is not None:
            self.component_definition_top_list = component_definition_top_list
        if enable_addon_list is not None:
            self.enable_addon_list = enable_addon_list
        if policy_definition_top_list is not None:
            self.policy_definition_top_list = policy_definition_top_list
        if trait_definition_top_list is not None:
            self.trait_definition_top_list = trait_definition_top_list
        if update_time is not None:
            self.update_time = update_time
        if workflow_definition_top_list is not None:
            self.workflow_definition_top_list = workflow_definition_top_list

    @property
    def app_count(self):
        """Gets the app_count of this V1StatisticInfo.  # noqa: E501


        :return: The app_count of this V1StatisticInfo.  # noqa: E501
        :rtype: str
        """
        return self._app_count

    @app_count.setter
    def app_count(self, app_count):
        """Sets the app_count of this V1StatisticInfo.


        :param app_count: The app_count of this V1StatisticInfo.  # noqa: E501
        :type: str
        """

        self._app_count = app_count

    @property
    def cluster_count(self):
        """Gets the cluster_count of this V1StatisticInfo.  # noqa: E501


        :return: The cluster_count of this V1StatisticInfo.  # noqa: E501
        :rtype: str
        """
        return self._cluster_count

    @cluster_count.setter
    def cluster_count(self, cluster_count):
        """Sets the cluster_count of this V1StatisticInfo.


        :param cluster_count: The cluster_count of this V1StatisticInfo.  # noqa: E501
        :type: str
        """

        self._cluster_count = cluster_count

    @property
    def component_definition_top_list(self):
        """Gets the component_definition_top_list of this V1StatisticInfo.  # noqa: E501


        :return: The component_definition_top_list of this V1StatisticInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._component_definition_top_list

    @component_definition_top_list.setter
    def component_definition_top_list(self, component_definition_top_list):
        """Sets the component_definition_top_list of this V1StatisticInfo.


        :param component_definition_top_list: The component_definition_top_list of this V1StatisticInfo.  # noqa: E501
        :type: list[str]
        """

        self._component_definition_top_list = component_definition_top_list

    @property
    def enable_addon_list(self):
        """Gets the enable_addon_list of this V1StatisticInfo.  # noqa: E501


        :return: The enable_addon_list of this V1StatisticInfo.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._enable_addon_list

    @enable_addon_list.setter
    def enable_addon_list(self, enable_addon_list):
        """Sets the enable_addon_list of this V1StatisticInfo.


        :param enable_addon_list: The enable_addon_list of this V1StatisticInfo.  # noqa: E501
        :type: dict(str, str)
        """

        self._enable_addon_list = enable_addon_list

    @property
    def policy_definition_top_list(self):
        """Gets the policy_definition_top_list of this V1StatisticInfo.  # noqa: E501


        :return: The policy_definition_top_list of this V1StatisticInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._policy_definition_top_list

    @policy_definition_top_list.setter
    def policy_definition_top_list(self, policy_definition_top_list):
        """Sets the policy_definition_top_list of this V1StatisticInfo.


        :param policy_definition_top_list: The policy_definition_top_list of this V1StatisticInfo.  # noqa: E501
        :type: list[str]
        """

        self._policy_definition_top_list = policy_definition_top_list

    @property
    def trait_definition_top_list(self):
        """Gets the trait_definition_top_list of this V1StatisticInfo.  # noqa: E501


        :return: The trait_definition_top_list of this V1StatisticInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._trait_definition_top_list

    @trait_definition_top_list.setter
    def trait_definition_top_list(self, trait_definition_top_list):
        """Sets the trait_definition_top_list of this V1StatisticInfo.


        :param trait_definition_top_list: The trait_definition_top_list of this V1StatisticInfo.  # noqa: E501
        :type: list[str]
        """

        self._trait_definition_top_list = trait_definition_top_list

    @property
    def update_time(self):
        """Gets the update_time of this V1StatisticInfo.  # noqa: E501


        :return: The update_time of this V1StatisticInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this V1StatisticInfo.


        :param update_time: The update_time of this V1StatisticInfo.  # noqa: E501
        :type: datetime
        """

        self._update_time = update_time

    @property
    def workflow_definition_top_list(self):
        """Gets the workflow_definition_top_list of this V1StatisticInfo.  # noqa: E501


        :return: The workflow_definition_top_list of this V1StatisticInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._workflow_definition_top_list

    @workflow_definition_top_list.setter
    def workflow_definition_top_list(self, workflow_definition_top_list):
        """Sets the workflow_definition_top_list of this V1StatisticInfo.


        :param workflow_definition_top_list: The workflow_definition_top_list of this V1StatisticInfo.  # noqa: E501
        :type: list[str]
        """

        self._workflow_definition_top_list = workflow_definition_top_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1StatisticInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1StatisticInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

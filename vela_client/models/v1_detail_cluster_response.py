# coding: utf-8

"""
    Kubevela api doc

    Kubevela api doc  # noqa: E501

    OpenAPI spec version: v1beta1
    Contact: feedback@mail.kubevela.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1DetailClusterResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alias': 'str',
        'api_server_url': 'str',
        'create_time': 'datetime',
        'dashboard_url': 'str',
        'description': 'str',
        'icon': 'str',
        'kube_config': 'str',
        'kube_config_secret': 'str',
        'labels': 'dict(str, str)',
        'name': 'str',
        'provider': 'ModelProviderInfo',
        'reason': 'str',
        'resource_info': 'V1ClusterResourceInfo',
        'status': 'str',
        'update_time': 'datetime'
    }

    attribute_map = {
        'alias': 'alias',
        'api_server_url': 'apiServerURL',
        'create_time': 'createTime',
        'dashboard_url': 'dashboardURL',
        'description': 'description',
        'icon': 'icon',
        'kube_config': 'kubeConfig',
        'kube_config_secret': 'kubeConfigSecret',
        'labels': 'labels',
        'name': 'name',
        'provider': 'provider',
        'reason': 'reason',
        'resource_info': 'resourceInfo',
        'status': 'status',
        'update_time': 'updateTime'
    }

    def __init__(self, alias=None, api_server_url=None, create_time=None, dashboard_url=None, description=None, icon=None, kube_config=None, kube_config_secret=None, labels=None, name=None, provider=None, reason=None, resource_info=None, status=None, update_time=None):  # noqa: E501
        """V1DetailClusterResponse - a model defined in Swagger"""  # noqa: E501
        self._alias = None
        self._api_server_url = None
        self._create_time = None
        self._dashboard_url = None
        self._description = None
        self._icon = None
        self._kube_config = None
        self._kube_config_secret = None
        self._labels = None
        self._name = None
        self._provider = None
        self._reason = None
        self._resource_info = None
        self._status = None
        self._update_time = None
        self.discriminator = None
        self.alias = alias
        self.api_server_url = api_server_url
        self.create_time = create_time
        self.dashboard_url = dashboard_url
        self.description = description
        self.icon = icon
        self.kube_config = kube_config
        self.kube_config_secret = kube_config_secret
        self.labels = labels
        self.name = name
        self.provider = provider
        self.reason = reason
        self.resource_info = resource_info
        self.status = status
        self.update_time = update_time

    @property
    def alias(self):
        """Gets the alias of this V1DetailClusterResponse.  # noqa: E501


        :return: The alias of this V1DetailClusterResponse.  # noqa: E501
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this V1DetailClusterResponse.


        :param alias: The alias of this V1DetailClusterResponse.  # noqa: E501
        :type: str
        """
        if alias is None:
            raise ValueError("Invalid value for `alias`, must not be `None`")  # noqa: E501

        self._alias = alias

    @property
    def api_server_url(self):
        """Gets the api_server_url of this V1DetailClusterResponse.  # noqa: E501


        :return: The api_server_url of this V1DetailClusterResponse.  # noqa: E501
        :rtype: str
        """
        return self._api_server_url

    @api_server_url.setter
    def api_server_url(self, api_server_url):
        """Sets the api_server_url of this V1DetailClusterResponse.


        :param api_server_url: The api_server_url of this V1DetailClusterResponse.  # noqa: E501
        :type: str
        """
        if api_server_url is None:
            raise ValueError("Invalid value for `api_server_url`, must not be `None`")  # noqa: E501

        self._api_server_url = api_server_url

    @property
    def create_time(self):
        """Gets the create_time of this V1DetailClusterResponse.  # noqa: E501


        :return: The create_time of this V1DetailClusterResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this V1DetailClusterResponse.


        :param create_time: The create_time of this V1DetailClusterResponse.  # noqa: E501
        :type: datetime
        """
        if create_time is None:
            raise ValueError("Invalid value for `create_time`, must not be `None`")  # noqa: E501

        self._create_time = create_time

    @property
    def dashboard_url(self):
        """Gets the dashboard_url of this V1DetailClusterResponse.  # noqa: E501


        :return: The dashboard_url of this V1DetailClusterResponse.  # noqa: E501
        :rtype: str
        """
        return self._dashboard_url

    @dashboard_url.setter
    def dashboard_url(self, dashboard_url):
        """Sets the dashboard_url of this V1DetailClusterResponse.


        :param dashboard_url: The dashboard_url of this V1DetailClusterResponse.  # noqa: E501
        :type: str
        """
        if dashboard_url is None:
            raise ValueError("Invalid value for `dashboard_url`, must not be `None`")  # noqa: E501

        self._dashboard_url = dashboard_url

    @property
    def description(self):
        """Gets the description of this V1DetailClusterResponse.  # noqa: E501


        :return: The description of this V1DetailClusterResponse.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this V1DetailClusterResponse.


        :param description: The description of this V1DetailClusterResponse.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def icon(self):
        """Gets the icon of this V1DetailClusterResponse.  # noqa: E501


        :return: The icon of this V1DetailClusterResponse.  # noqa: E501
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this V1DetailClusterResponse.


        :param icon: The icon of this V1DetailClusterResponse.  # noqa: E501
        :type: str
        """
        if icon is None:
            raise ValueError("Invalid value for `icon`, must not be `None`")  # noqa: E501

        self._icon = icon

    @property
    def kube_config(self):
        """Gets the kube_config of this V1DetailClusterResponse.  # noqa: E501


        :return: The kube_config of this V1DetailClusterResponse.  # noqa: E501
        :rtype: str
        """
        return self._kube_config

    @kube_config.setter
    def kube_config(self, kube_config):
        """Sets the kube_config of this V1DetailClusterResponse.


        :param kube_config: The kube_config of this V1DetailClusterResponse.  # noqa: E501
        :type: str
        """
        if kube_config is None:
            raise ValueError("Invalid value for `kube_config`, must not be `None`")  # noqa: E501

        self._kube_config = kube_config

    @property
    def kube_config_secret(self):
        """Gets the kube_config_secret of this V1DetailClusterResponse.  # noqa: E501


        :return: The kube_config_secret of this V1DetailClusterResponse.  # noqa: E501
        :rtype: str
        """
        return self._kube_config_secret

    @kube_config_secret.setter
    def kube_config_secret(self, kube_config_secret):
        """Sets the kube_config_secret of this V1DetailClusterResponse.


        :param kube_config_secret: The kube_config_secret of this V1DetailClusterResponse.  # noqa: E501
        :type: str
        """
        if kube_config_secret is None:
            raise ValueError("Invalid value for `kube_config_secret`, must not be `None`")  # noqa: E501

        self._kube_config_secret = kube_config_secret

    @property
    def labels(self):
        """Gets the labels of this V1DetailClusterResponse.  # noqa: E501


        :return: The labels of this V1DetailClusterResponse.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this V1DetailClusterResponse.


        :param labels: The labels of this V1DetailClusterResponse.  # noqa: E501
        :type: dict(str, str)
        """
        if labels is None:
            raise ValueError("Invalid value for `labels`, must not be `None`")  # noqa: E501

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this V1DetailClusterResponse.  # noqa: E501


        :return: The name of this V1DetailClusterResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V1DetailClusterResponse.


        :param name: The name of this V1DetailClusterResponse.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def provider(self):
        """Gets the provider of this V1DetailClusterResponse.  # noqa: E501


        :return: The provider of this V1DetailClusterResponse.  # noqa: E501
        :rtype: ModelProviderInfo
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this V1DetailClusterResponse.


        :param provider: The provider of this V1DetailClusterResponse.  # noqa: E501
        :type: ModelProviderInfo
        """
        if provider is None:
            raise ValueError("Invalid value for `provider`, must not be `None`")  # noqa: E501

        self._provider = provider

    @property
    def reason(self):
        """Gets the reason of this V1DetailClusterResponse.  # noqa: E501


        :return: The reason of this V1DetailClusterResponse.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this V1DetailClusterResponse.


        :param reason: The reason of this V1DetailClusterResponse.  # noqa: E501
        :type: str
        """
        if reason is None:
            raise ValueError("Invalid value for `reason`, must not be `None`")  # noqa: E501

        self._reason = reason

    @property
    def resource_info(self):
        """Gets the resource_info of this V1DetailClusterResponse.  # noqa: E501


        :return: The resource_info of this V1DetailClusterResponse.  # noqa: E501
        :rtype: V1ClusterResourceInfo
        """
        return self._resource_info

    @resource_info.setter
    def resource_info(self, resource_info):
        """Sets the resource_info of this V1DetailClusterResponse.


        :param resource_info: The resource_info of this V1DetailClusterResponse.  # noqa: E501
        :type: V1ClusterResourceInfo
        """
        if resource_info is None:
            raise ValueError("Invalid value for `resource_info`, must not be `None`")  # noqa: E501

        self._resource_info = resource_info

    @property
    def status(self):
        """Gets the status of this V1DetailClusterResponse.  # noqa: E501


        :return: The status of this V1DetailClusterResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this V1DetailClusterResponse.


        :param status: The status of this V1DetailClusterResponse.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def update_time(self):
        """Gets the update_time of this V1DetailClusterResponse.  # noqa: E501


        :return: The update_time of this V1DetailClusterResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this V1DetailClusterResponse.


        :param update_time: The update_time of this V1DetailClusterResponse.  # noqa: E501
        :type: datetime
        """
        if update_time is None:
            raise ValueError("Invalid value for `update_time`, must not be `None`")  # noqa: E501

        self._update_time = update_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1DetailClusterResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1DetailClusterResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

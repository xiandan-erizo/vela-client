# coding: utf-8

"""
    Kubevela api doc

    Kubevela api doc  # noqa: E501

    OpenAPI spec version: v1beta1
    Contact: feedback@mail.kubevela.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1beta1PolicyDefinitionSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'definition_ref': 'CommonDefinitionReference',
        'manage_health_check': 'bool',
        'schematic': 'CommonSchematic'
    }

    attribute_map = {
        'definition_ref': 'definitionRef',
        'manage_health_check': 'manageHealthCheck',
        'schematic': 'schematic'
    }

    def __init__(self, definition_ref=None, manage_health_check=None, schematic=None):  # noqa: E501
        """V1beta1PolicyDefinitionSpec - a model defined in Swagger"""  # noqa: E501
        self._definition_ref = None
        self._manage_health_check = None
        self._schematic = None
        self.discriminator = None
        if definition_ref is not None:
            self.definition_ref = definition_ref
        if manage_health_check is not None:
            self.manage_health_check = manage_health_check
        if schematic is not None:
            self.schematic = schematic

    @property
    def definition_ref(self):
        """Gets the definition_ref of this V1beta1PolicyDefinitionSpec.  # noqa: E501


        :return: The definition_ref of this V1beta1PolicyDefinitionSpec.  # noqa: E501
        :rtype: CommonDefinitionReference
        """
        return self._definition_ref

    @definition_ref.setter
    def definition_ref(self, definition_ref):
        """Sets the definition_ref of this V1beta1PolicyDefinitionSpec.


        :param definition_ref: The definition_ref of this V1beta1PolicyDefinitionSpec.  # noqa: E501
        :type: CommonDefinitionReference
        """

        self._definition_ref = definition_ref

    @property
    def manage_health_check(self):
        """Gets the manage_health_check of this V1beta1PolicyDefinitionSpec.  # noqa: E501


        :return: The manage_health_check of this V1beta1PolicyDefinitionSpec.  # noqa: E501
        :rtype: bool
        """
        return self._manage_health_check

    @manage_health_check.setter
    def manage_health_check(self, manage_health_check):
        """Sets the manage_health_check of this V1beta1PolicyDefinitionSpec.


        :param manage_health_check: The manage_health_check of this V1beta1PolicyDefinitionSpec.  # noqa: E501
        :type: bool
        """

        self._manage_health_check = manage_health_check

    @property
    def schematic(self):
        """Gets the schematic of this V1beta1PolicyDefinitionSpec.  # noqa: E501


        :return: The schematic of this V1beta1PolicyDefinitionSpec.  # noqa: E501
        :rtype: CommonSchematic
        """
        return self._schematic

    @schematic.setter
    def schematic(self, schematic):
        """Sets the schematic of this V1beta1PolicyDefinitionSpec.


        :param schematic: The schematic of this V1beta1PolicyDefinitionSpec.  # noqa: E501
        :type: CommonSchematic
        """

        self._schematic = schematic

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1beta1PolicyDefinitionSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1beta1PolicyDefinitionSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

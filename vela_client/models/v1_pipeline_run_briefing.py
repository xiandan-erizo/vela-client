# coding: utf-8

"""
    Kubevela api doc

    Kubevela api doc  # noqa: E501

    OpenAPI spec version: v1beta1
    Contact: feedback@mail.kubevela.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1PipelineRunBriefing(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'context_name': 'str',
        'context_values': 'list[ModelValue]',
        'end_time': 'str',
        'finished': 'bool',
        'message': 'str',
        'phase': 'str',
        'pipeline_run_name': 'str',
        'start_time': 'str'
    }

    attribute_map = {
        'context_name': 'contextName',
        'context_values': 'contextValues',
        'end_time': 'endTime',
        'finished': 'finished',
        'message': 'message',
        'phase': 'phase',
        'pipeline_run_name': 'pipelineRunName',
        'start_time': 'startTime'
    }

    def __init__(self, context_name=None, context_values=None, end_time=None, finished=None, message=None, phase=None, pipeline_run_name=None, start_time=None):  # noqa: E501
        """V1PipelineRunBriefing - a model defined in Swagger"""  # noqa: E501
        self._context_name = None
        self._context_values = None
        self._end_time = None
        self._finished = None
        self._message = None
        self._phase = None
        self._pipeline_run_name = None
        self._start_time = None
        self.discriminator = None
        self.context_name = context_name
        self.context_values = context_values
        self.end_time = end_time
        self.finished = finished
        self.message = message
        self.phase = phase
        self.pipeline_run_name = pipeline_run_name
        self.start_time = start_time

    @property
    def context_name(self):
        """Gets the context_name of this V1PipelineRunBriefing.  # noqa: E501


        :return: The context_name of this V1PipelineRunBriefing.  # noqa: E501
        :rtype: str
        """
        return self._context_name

    @context_name.setter
    def context_name(self, context_name):
        """Sets the context_name of this V1PipelineRunBriefing.


        :param context_name: The context_name of this V1PipelineRunBriefing.  # noqa: E501
        :type: str
        """
        if context_name is None:
            raise ValueError("Invalid value for `context_name`, must not be `None`")  # noqa: E501

        self._context_name = context_name

    @property
    def context_values(self):
        """Gets the context_values of this V1PipelineRunBriefing.  # noqa: E501


        :return: The context_values of this V1PipelineRunBriefing.  # noqa: E501
        :rtype: list[ModelValue]
        """
        return self._context_values

    @context_values.setter
    def context_values(self, context_values):
        """Sets the context_values of this V1PipelineRunBriefing.


        :param context_values: The context_values of this V1PipelineRunBriefing.  # noqa: E501
        :type: list[ModelValue]
        """
        if context_values is None:
            raise ValueError("Invalid value for `context_values`, must not be `None`")  # noqa: E501

        self._context_values = context_values

    @property
    def end_time(self):
        """Gets the end_time of this V1PipelineRunBriefing.  # noqa: E501


        :return: The end_time of this V1PipelineRunBriefing.  # noqa: E501
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this V1PipelineRunBriefing.


        :param end_time: The end_time of this V1PipelineRunBriefing.  # noqa: E501
        :type: str
        """
        if end_time is None:
            raise ValueError("Invalid value for `end_time`, must not be `None`")  # noqa: E501

        self._end_time = end_time

    @property
    def finished(self):
        """Gets the finished of this V1PipelineRunBriefing.  # noqa: E501


        :return: The finished of this V1PipelineRunBriefing.  # noqa: E501
        :rtype: bool
        """
        return self._finished

    @finished.setter
    def finished(self, finished):
        """Sets the finished of this V1PipelineRunBriefing.


        :param finished: The finished of this V1PipelineRunBriefing.  # noqa: E501
        :type: bool
        """
        if finished is None:
            raise ValueError("Invalid value for `finished`, must not be `None`")  # noqa: E501

        self._finished = finished

    @property
    def message(self):
        """Gets the message of this V1PipelineRunBriefing.  # noqa: E501


        :return: The message of this V1PipelineRunBriefing.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this V1PipelineRunBriefing.


        :param message: The message of this V1PipelineRunBriefing.  # noqa: E501
        :type: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def phase(self):
        """Gets the phase of this V1PipelineRunBriefing.  # noqa: E501


        :return: The phase of this V1PipelineRunBriefing.  # noqa: E501
        :rtype: str
        """
        return self._phase

    @phase.setter
    def phase(self, phase):
        """Sets the phase of this V1PipelineRunBriefing.


        :param phase: The phase of this V1PipelineRunBriefing.  # noqa: E501
        :type: str
        """
        if phase is None:
            raise ValueError("Invalid value for `phase`, must not be `None`")  # noqa: E501

        self._phase = phase

    @property
    def pipeline_run_name(self):
        """Gets the pipeline_run_name of this V1PipelineRunBriefing.  # noqa: E501


        :return: The pipeline_run_name of this V1PipelineRunBriefing.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_run_name

    @pipeline_run_name.setter
    def pipeline_run_name(self, pipeline_run_name):
        """Sets the pipeline_run_name of this V1PipelineRunBriefing.


        :param pipeline_run_name: The pipeline_run_name of this V1PipelineRunBriefing.  # noqa: E501
        :type: str
        """
        if pipeline_run_name is None:
            raise ValueError("Invalid value for `pipeline_run_name`, must not be `None`")  # noqa: E501

        self._pipeline_run_name = pipeline_run_name

    @property
    def start_time(self):
        """Gets the start_time of this V1PipelineRunBriefing.  # noqa: E501


        :return: The start_time of this V1PipelineRunBriefing.  # noqa: E501
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this V1PipelineRunBriefing.


        :param start_time: The start_time of this V1PipelineRunBriefing.  # noqa: E501
        :type: str
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")  # noqa: E501

        self._start_time = start_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1PipelineRunBriefing, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1PipelineRunBriefing):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

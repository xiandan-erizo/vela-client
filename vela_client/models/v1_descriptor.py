# coding: utf-8

"""
    Kubevela api doc

    Kubevela api doc  # noqa: E501

    OpenAPI spec version: v1beta1
    Contact: feedback@mail.kubevela.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1Descriptor(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'annotations': 'dict(str, str)',
        'data': 'str',
        'digest': 'str',
        'media_type': 'str',
        'platform': 'V1Platform',
        'size': 'int',
        'urls': 'list[str]'
    }

    attribute_map = {
        'annotations': 'annotations',
        'data': 'data',
        'digest': 'digest',
        'media_type': 'mediaType',
        'platform': 'platform',
        'size': 'size',
        'urls': 'urls'
    }

    def __init__(self, annotations=None, data=None, digest=None, media_type=None, platform=None, size=None, urls=None):  # noqa: E501
        """V1Descriptor - a model defined in Swagger"""  # noqa: E501
        self._annotations = None
        self._data = None
        self._digest = None
        self._media_type = None
        self._platform = None
        self._size = None
        self._urls = None
        self.discriminator = None
        if annotations is not None:
            self.annotations = annotations
        if data is not None:
            self.data = data
        self.digest = digest
        self.media_type = media_type
        if platform is not None:
            self.platform = platform
        self.size = size
        if urls is not None:
            self.urls = urls

    @property
    def annotations(self):
        """Gets the annotations of this V1Descriptor.  # noqa: E501


        :return: The annotations of this V1Descriptor.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this V1Descriptor.


        :param annotations: The annotations of this V1Descriptor.  # noqa: E501
        :type: dict(str, str)
        """

        self._annotations = annotations

    @property
    def data(self):
        """Gets the data of this V1Descriptor.  # noqa: E501


        :return: The data of this V1Descriptor.  # noqa: E501
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this V1Descriptor.


        :param data: The data of this V1Descriptor.  # noqa: E501
        :type: str
        """

        self._data = data

    @property
    def digest(self):
        """Gets the digest of this V1Descriptor.  # noqa: E501


        :return: The digest of this V1Descriptor.  # noqa: E501
        :rtype: str
        """
        return self._digest

    @digest.setter
    def digest(self, digest):
        """Sets the digest of this V1Descriptor.


        :param digest: The digest of this V1Descriptor.  # noqa: E501
        :type: str
        """
        if digest is None:
            raise ValueError("Invalid value for `digest`, must not be `None`")  # noqa: E501

        self._digest = digest

    @property
    def media_type(self):
        """Gets the media_type of this V1Descriptor.  # noqa: E501


        :return: The media_type of this V1Descriptor.  # noqa: E501
        :rtype: str
        """
        return self._media_type

    @media_type.setter
    def media_type(self, media_type):
        """Sets the media_type of this V1Descriptor.


        :param media_type: The media_type of this V1Descriptor.  # noqa: E501
        :type: str
        """
        if media_type is None:
            raise ValueError("Invalid value for `media_type`, must not be `None`")  # noqa: E501

        self._media_type = media_type

    @property
    def platform(self):
        """Gets the platform of this V1Descriptor.  # noqa: E501


        :return: The platform of this V1Descriptor.  # noqa: E501
        :rtype: V1Platform
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this V1Descriptor.


        :param platform: The platform of this V1Descriptor.  # noqa: E501
        :type: V1Platform
        """

        self._platform = platform

    @property
    def size(self):
        """Gets the size of this V1Descriptor.  # noqa: E501


        :return: The size of this V1Descriptor.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this V1Descriptor.


        :param size: The size of this V1Descriptor.  # noqa: E501
        :type: int
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")  # noqa: E501

        self._size = size

    @property
    def urls(self):
        """Gets the urls of this V1Descriptor.  # noqa: E501


        :return: The urls of this V1Descriptor.  # noqa: E501
        :rtype: list[str]
        """
        return self._urls

    @urls.setter
    def urls(self, urls):
        """Sets the urls of this V1Descriptor.


        :param urls: The urls of this V1Descriptor.  # noqa: E501
        :type: list[str]
        """

        self._urls = urls

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1Descriptor, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1Descriptor):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

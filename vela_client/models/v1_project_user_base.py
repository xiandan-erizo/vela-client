# coding: utf-8

"""
    Kubevela api doc

    Kubevela api doc  # noqa: E501

    OpenAPI spec version: v1beta1
    Contact: feedback@mail.kubevela.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1ProjectUserBase(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alias': 'str',
        'create_time': 'datetime',
        'name': 'str',
        'update_time': 'datetime',
        'user_roles': 'list[str]'
    }

    attribute_map = {
        'alias': 'alias',
        'create_time': 'createTime',
        'name': 'name',
        'update_time': 'updateTime',
        'user_roles': 'userRoles'
    }

    def __init__(self, alias=None, create_time=None, name=None, update_time=None, user_roles=None):  # noqa: E501
        """V1ProjectUserBase - a model defined in Swagger"""  # noqa: E501
        self._alias = None
        self._create_time = None
        self._name = None
        self._update_time = None
        self._user_roles = None
        self.discriminator = None
        self.alias = alias
        self.create_time = create_time
        self.name = name
        self.update_time = update_time
        self.user_roles = user_roles

    @property
    def alias(self):
        """Gets the alias of this V1ProjectUserBase.  # noqa: E501


        :return: The alias of this V1ProjectUserBase.  # noqa: E501
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this V1ProjectUserBase.


        :param alias: The alias of this V1ProjectUserBase.  # noqa: E501
        :type: str
        """
        if alias is None:
            raise ValueError("Invalid value for `alias`, must not be `None`")  # noqa: E501

        self._alias = alias

    @property
    def create_time(self):
        """Gets the create_time of this V1ProjectUserBase.  # noqa: E501


        :return: The create_time of this V1ProjectUserBase.  # noqa: E501
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this V1ProjectUserBase.


        :param create_time: The create_time of this V1ProjectUserBase.  # noqa: E501
        :type: datetime
        """
        if create_time is None:
            raise ValueError("Invalid value for `create_time`, must not be `None`")  # noqa: E501

        self._create_time = create_time

    @property
    def name(self):
        """Gets the name of this V1ProjectUserBase.  # noqa: E501


        :return: The name of this V1ProjectUserBase.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V1ProjectUserBase.


        :param name: The name of this V1ProjectUserBase.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def update_time(self):
        """Gets the update_time of this V1ProjectUserBase.  # noqa: E501


        :return: The update_time of this V1ProjectUserBase.  # noqa: E501
        :rtype: datetime
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this V1ProjectUserBase.


        :param update_time: The update_time of this V1ProjectUserBase.  # noqa: E501
        :type: datetime
        """
        if update_time is None:
            raise ValueError("Invalid value for `update_time`, must not be `None`")  # noqa: E501

        self._update_time = update_time

    @property
    def user_roles(self):
        """Gets the user_roles of this V1ProjectUserBase.  # noqa: E501


        :return: The user_roles of this V1ProjectUserBase.  # noqa: E501
        :rtype: list[str]
        """
        return self._user_roles

    @user_roles.setter
    def user_roles(self, user_roles):
        """Sets the user_roles of this V1ProjectUserBase.


        :param user_roles: The user_roles of this V1ProjectUserBase.  # noqa: E501
        :type: list[str]
        """
        if user_roles is None:
            raise ValueError("Invalid value for `user_roles`, must not be `None`")  # noqa: E501

        self._user_roles = user_roles

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1ProjectUserBase, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1ProjectUserBase):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

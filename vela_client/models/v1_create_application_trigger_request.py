# coding: utf-8

"""
    Kubevela api doc

    Kubevela api doc  # noqa: E501

    OpenAPI spec version: v1beta1
    Contact: feedback@mail.kubevela.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1CreateApplicationTriggerRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alias': 'str',
        'component_name': 'str',
        'description': 'str',
        'name': 'str',
        'payload_type': 'str',
        'registry': 'str',
        'type': 'str',
        'workflow_name': 'str'
    }

    attribute_map = {
        'alias': 'alias',
        'component_name': 'componentName',
        'description': 'description',
        'name': 'name',
        'payload_type': 'payloadType',
        'registry': 'registry',
        'type': 'type',
        'workflow_name': 'workflowName'
    }

    def __init__(self, alias=None, component_name=None, description=None, name=None, payload_type=None, registry=None, type=None, workflow_name=None):  # noqa: E501
        """V1CreateApplicationTriggerRequest - a model defined in Swagger"""  # noqa: E501
        self._alias = None
        self._component_name = None
        self._description = None
        self._name = None
        self._payload_type = None
        self._registry = None
        self._type = None
        self._workflow_name = None
        self.discriminator = None
        if alias is not None:
            self.alias = alias
        if component_name is not None:
            self.component_name = component_name
        if description is not None:
            self.description = description
        self.name = name
        self.payload_type = payload_type
        if registry is not None:
            self.registry = registry
        self.type = type
        self.workflow_name = workflow_name

    @property
    def alias(self):
        """Gets the alias of this V1CreateApplicationTriggerRequest.  # noqa: E501


        :return: The alias of this V1CreateApplicationTriggerRequest.  # noqa: E501
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this V1CreateApplicationTriggerRequest.


        :param alias: The alias of this V1CreateApplicationTriggerRequest.  # noqa: E501
        :type: str
        """

        self._alias = alias

    @property
    def component_name(self):
        """Gets the component_name of this V1CreateApplicationTriggerRequest.  # noqa: E501


        :return: The component_name of this V1CreateApplicationTriggerRequest.  # noqa: E501
        :rtype: str
        """
        return self._component_name

    @component_name.setter
    def component_name(self, component_name):
        """Sets the component_name of this V1CreateApplicationTriggerRequest.


        :param component_name: The component_name of this V1CreateApplicationTriggerRequest.  # noqa: E501
        :type: str
        """

        self._component_name = component_name

    @property
    def description(self):
        """Gets the description of this V1CreateApplicationTriggerRequest.  # noqa: E501


        :return: The description of this V1CreateApplicationTriggerRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this V1CreateApplicationTriggerRequest.


        :param description: The description of this V1CreateApplicationTriggerRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this V1CreateApplicationTriggerRequest.  # noqa: E501


        :return: The name of this V1CreateApplicationTriggerRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V1CreateApplicationTriggerRequest.


        :param name: The name of this V1CreateApplicationTriggerRequest.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def payload_type(self):
        """Gets the payload_type of this V1CreateApplicationTriggerRequest.  # noqa: E501


        :return: The payload_type of this V1CreateApplicationTriggerRequest.  # noqa: E501
        :rtype: str
        """
        return self._payload_type

    @payload_type.setter
    def payload_type(self, payload_type):
        """Sets the payload_type of this V1CreateApplicationTriggerRequest.


        :param payload_type: The payload_type of this V1CreateApplicationTriggerRequest.  # noqa: E501
        :type: str
        """
        if payload_type is None:
            raise ValueError("Invalid value for `payload_type`, must not be `None`")  # noqa: E501

        self._payload_type = payload_type

    @property
    def registry(self):
        """Gets the registry of this V1CreateApplicationTriggerRequest.  # noqa: E501


        :return: The registry of this V1CreateApplicationTriggerRequest.  # noqa: E501
        :rtype: str
        """
        return self._registry

    @registry.setter
    def registry(self, registry):
        """Sets the registry of this V1CreateApplicationTriggerRequest.


        :param registry: The registry of this V1CreateApplicationTriggerRequest.  # noqa: E501
        :type: str
        """

        self._registry = registry

    @property
    def type(self):
        """Gets the type of this V1CreateApplicationTriggerRequest.  # noqa: E501


        :return: The type of this V1CreateApplicationTriggerRequest.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this V1CreateApplicationTriggerRequest.


        :param type: The type of this V1CreateApplicationTriggerRequest.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def workflow_name(self):
        """Gets the workflow_name of this V1CreateApplicationTriggerRequest.  # noqa: E501


        :return: The workflow_name of this V1CreateApplicationTriggerRequest.  # noqa: E501
        :rtype: str
        """
        return self._workflow_name

    @workflow_name.setter
    def workflow_name(self, workflow_name):
        """Sets the workflow_name of this V1CreateApplicationTriggerRequest.


        :param workflow_name: The workflow_name of this V1CreateApplicationTriggerRequest.  # noqa: E501
        :type: str
        """
        if workflow_name is None:
            raise ValueError("Invalid value for `workflow_name`, must not be `None`")  # noqa: E501

        self._workflow_name = workflow_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1CreateApplicationTriggerRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1CreateApplicationTriggerRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

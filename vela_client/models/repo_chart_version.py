# coding: utf-8

"""
    Kubevela api doc

    Kubevela api doc  # noqa: E501

    OpenAPI spec version: v1beta1
    Contact: feedback@mail.kubevela.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RepoChartVersion(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'metadata': 'ChartMetadata',
        'checksum': 'str',
        'created': 'datetime',
        'digest': 'str',
        'engine': 'str',
        'removed': 'bool',
        'tiller_version': 'str',
        'url': 'str',
        'urls': 'list[str]'
    }

    attribute_map = {
        'metadata': 'Metadata',
        'checksum': 'checksum',
        'created': 'created',
        'digest': 'digest',
        'engine': 'engine',
        'removed': 'removed',
        'tiller_version': 'tillerVersion',
        'url': 'url',
        'urls': 'urls'
    }

    def __init__(self, metadata=None, checksum=None, created=None, digest=None, engine=None, removed=None, tiller_version=None, url=None, urls=None):  # noqa: E501
        """RepoChartVersion - a model defined in Swagger"""  # noqa: E501
        self._metadata = None
        self._checksum = None
        self._created = None
        self._digest = None
        self._engine = None
        self._removed = None
        self._tiller_version = None
        self._url = None
        self._urls = None
        self.discriminator = None
        self.metadata = metadata
        if checksum is not None:
            self.checksum = checksum
        if created is not None:
            self.created = created
        if digest is not None:
            self.digest = digest
        if engine is not None:
            self.engine = engine
        if removed is not None:
            self.removed = removed
        if tiller_version is not None:
            self.tiller_version = tiller_version
        if url is not None:
            self.url = url
        self.urls = urls

    @property
    def metadata(self):
        """Gets the metadata of this RepoChartVersion.  # noqa: E501


        :return: The metadata of this RepoChartVersion.  # noqa: E501
        :rtype: ChartMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this RepoChartVersion.


        :param metadata: The metadata of this RepoChartVersion.  # noqa: E501
        :type: ChartMetadata
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")  # noqa: E501

        self._metadata = metadata

    @property
    def checksum(self):
        """Gets the checksum of this RepoChartVersion.  # noqa: E501


        :return: The checksum of this RepoChartVersion.  # noqa: E501
        :rtype: str
        """
        return self._checksum

    @checksum.setter
    def checksum(self, checksum):
        """Sets the checksum of this RepoChartVersion.


        :param checksum: The checksum of this RepoChartVersion.  # noqa: E501
        :type: str
        """

        self._checksum = checksum

    @property
    def created(self):
        """Gets the created of this RepoChartVersion.  # noqa: E501


        :return: The created of this RepoChartVersion.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this RepoChartVersion.


        :param created: The created of this RepoChartVersion.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def digest(self):
        """Gets the digest of this RepoChartVersion.  # noqa: E501


        :return: The digest of this RepoChartVersion.  # noqa: E501
        :rtype: str
        """
        return self._digest

    @digest.setter
    def digest(self, digest):
        """Sets the digest of this RepoChartVersion.


        :param digest: The digest of this RepoChartVersion.  # noqa: E501
        :type: str
        """

        self._digest = digest

    @property
    def engine(self):
        """Gets the engine of this RepoChartVersion.  # noqa: E501


        :return: The engine of this RepoChartVersion.  # noqa: E501
        :rtype: str
        """
        return self._engine

    @engine.setter
    def engine(self, engine):
        """Sets the engine of this RepoChartVersion.


        :param engine: The engine of this RepoChartVersion.  # noqa: E501
        :type: str
        """

        self._engine = engine

    @property
    def removed(self):
        """Gets the removed of this RepoChartVersion.  # noqa: E501


        :return: The removed of this RepoChartVersion.  # noqa: E501
        :rtype: bool
        """
        return self._removed

    @removed.setter
    def removed(self, removed):
        """Sets the removed of this RepoChartVersion.


        :param removed: The removed of this RepoChartVersion.  # noqa: E501
        :type: bool
        """

        self._removed = removed

    @property
    def tiller_version(self):
        """Gets the tiller_version of this RepoChartVersion.  # noqa: E501


        :return: The tiller_version of this RepoChartVersion.  # noqa: E501
        :rtype: str
        """
        return self._tiller_version

    @tiller_version.setter
    def tiller_version(self, tiller_version):
        """Sets the tiller_version of this RepoChartVersion.


        :param tiller_version: The tiller_version of this RepoChartVersion.  # noqa: E501
        :type: str
        """

        self._tiller_version = tiller_version

    @property
    def url(self):
        """Gets the url of this RepoChartVersion.  # noqa: E501


        :return: The url of this RepoChartVersion.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this RepoChartVersion.


        :param url: The url of this RepoChartVersion.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def urls(self):
        """Gets the urls of this RepoChartVersion.  # noqa: E501


        :return: The urls of this RepoChartVersion.  # noqa: E501
        :rtype: list[str]
        """
        return self._urls

    @urls.setter
    def urls(self, urls):
        """Sets the urls of this RepoChartVersion.


        :param urls: The urls of this RepoChartVersion.  # noqa: E501
        :type: list[str]
        """
        if urls is None:
            raise ValueError("Invalid value for `urls`, must not be `None`")  # noqa: E501

        self._urls = urls

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RepoChartVersion, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RepoChartVersion):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Kubevela api doc

    Kubevela api doc  # noqa: E501

    OpenAPI spec version: v1beta1
    Contact: feedback@mail.kubevela.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1TargetBase(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alias': 'str',
        'app_num': 'int',
        'cluster': 'V1ClusterTarget',
        'cluster_alias': 'str',
        'create_time': 'datetime',
        'description': 'str',
        'name': 'str',
        'project': 'V1NameAlias',
        'update_time': 'datetime',
        'variable': 'object'
    }

    attribute_map = {
        'alias': 'alias',
        'app_num': 'appNum',
        'cluster': 'cluster',
        'cluster_alias': 'clusterAlias',
        'create_time': 'createTime',
        'description': 'description',
        'name': 'name',
        'project': 'project',
        'update_time': 'updateTime',
        'variable': 'variable'
    }

    def __init__(self, alias=None, app_num=None, cluster=None, cluster_alias=None, create_time=None, description=None, name=None, project=None, update_time=None, variable=None):  # noqa: E501
        """V1TargetBase - a model defined in Swagger"""  # noqa: E501
        self._alias = None
        self._app_num = None
        self._cluster = None
        self._cluster_alias = None
        self._create_time = None
        self._description = None
        self._name = None
        self._project = None
        self._update_time = None
        self._variable = None
        self.discriminator = None
        if alias is not None:
            self.alias = alias
        if app_num is not None:
            self.app_num = app_num
        if cluster is not None:
            self.cluster = cluster
        if cluster_alias is not None:
            self.cluster_alias = cluster_alias
        self.create_time = create_time
        if description is not None:
            self.description = description
        self.name = name
        self.project = project
        self.update_time = update_time
        if variable is not None:
            self.variable = variable

    @property
    def alias(self):
        """Gets the alias of this V1TargetBase.  # noqa: E501


        :return: The alias of this V1TargetBase.  # noqa: E501
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this V1TargetBase.


        :param alias: The alias of this V1TargetBase.  # noqa: E501
        :type: str
        """

        self._alias = alias

    @property
    def app_num(self):
        """Gets the app_num of this V1TargetBase.  # noqa: E501


        :return: The app_num of this V1TargetBase.  # noqa: E501
        :rtype: int
        """
        return self._app_num

    @app_num.setter
    def app_num(self, app_num):
        """Sets the app_num of this V1TargetBase.


        :param app_num: The app_num of this V1TargetBase.  # noqa: E501
        :type: int
        """

        self._app_num = app_num

    @property
    def cluster(self):
        """Gets the cluster of this V1TargetBase.  # noqa: E501


        :return: The cluster of this V1TargetBase.  # noqa: E501
        :rtype: V1ClusterTarget
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this V1TargetBase.


        :param cluster: The cluster of this V1TargetBase.  # noqa: E501
        :type: V1ClusterTarget
        """

        self._cluster = cluster

    @property
    def cluster_alias(self):
        """Gets the cluster_alias of this V1TargetBase.  # noqa: E501


        :return: The cluster_alias of this V1TargetBase.  # noqa: E501
        :rtype: str
        """
        return self._cluster_alias

    @cluster_alias.setter
    def cluster_alias(self, cluster_alias):
        """Sets the cluster_alias of this V1TargetBase.


        :param cluster_alias: The cluster_alias of this V1TargetBase.  # noqa: E501
        :type: str
        """

        self._cluster_alias = cluster_alias

    @property
    def create_time(self):
        """Gets the create_time of this V1TargetBase.  # noqa: E501


        :return: The create_time of this V1TargetBase.  # noqa: E501
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this V1TargetBase.


        :param create_time: The create_time of this V1TargetBase.  # noqa: E501
        :type: datetime
        """
        if create_time is None:
            raise ValueError("Invalid value for `create_time`, must not be `None`")  # noqa: E501

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this V1TargetBase.  # noqa: E501


        :return: The description of this V1TargetBase.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this V1TargetBase.


        :param description: The description of this V1TargetBase.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this V1TargetBase.  # noqa: E501


        :return: The name of this V1TargetBase.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V1TargetBase.


        :param name: The name of this V1TargetBase.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def project(self):
        """Gets the project of this V1TargetBase.  # noqa: E501


        :return: The project of this V1TargetBase.  # noqa: E501
        :rtype: V1NameAlias
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this V1TargetBase.


        :param project: The project of this V1TargetBase.  # noqa: E501
        :type: V1NameAlias
        """
        if project is None:
            raise ValueError("Invalid value for `project`, must not be `None`")  # noqa: E501

        self._project = project

    @property
    def update_time(self):
        """Gets the update_time of this V1TargetBase.  # noqa: E501


        :return: The update_time of this V1TargetBase.  # noqa: E501
        :rtype: datetime
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this V1TargetBase.


        :param update_time: The update_time of this V1TargetBase.  # noqa: E501
        :type: datetime
        """
        if update_time is None:
            raise ValueError("Invalid value for `update_time`, must not be `None`")  # noqa: E501

        self._update_time = update_time

    @property
    def variable(self):
        """Gets the variable of this V1TargetBase.  # noqa: E501


        :return: The variable of this V1TargetBase.  # noqa: E501
        :rtype: object
        """
        return self._variable

    @variable.setter
    def variable(self, variable):
        """Sets the variable of this V1TargetBase.


        :param variable: The variable of this V1TargetBase.  # noqa: E501
        :type: object
        """

        self._variable = variable

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1TargetBase, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1TargetBase):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Kubevela api doc

    Kubevela api doc  # noqa: E501

    OpenAPI spec version: v1beta1
    Contact: feedback@mail.kubevela.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CommonAppStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'applied_resources': 'list[CommonClusterObjectReference]',
        'components': 'list[V1ObjectReference]',
        'conditions': 'list[ConditionCondition]',
        'latest_revision': 'CommonRevision',
        'observed_generation': 'int',
        'policy': 'list[CommonPolicyStatus]',
        'services': 'list[CommonApplicationComponentStatus]',
        'status': 'str',
        'workflow': 'CommonWorkflowStatus'
    }

    attribute_map = {
        'applied_resources': 'appliedResources',
        'components': 'components',
        'conditions': 'conditions',
        'latest_revision': 'latestRevision',
        'observed_generation': 'observedGeneration',
        'policy': 'policy',
        'services': 'services',
        'status': 'status',
        'workflow': 'workflow'
    }

    def __init__(self, applied_resources=None, components=None, conditions=None, latest_revision=None, observed_generation=None, policy=None, services=None, status=None, workflow=None):  # noqa: E501
        """CommonAppStatus - a model defined in Swagger"""  # noqa: E501
        self._applied_resources = None
        self._components = None
        self._conditions = None
        self._latest_revision = None
        self._observed_generation = None
        self._policy = None
        self._services = None
        self._status = None
        self._workflow = None
        self.discriminator = None
        if applied_resources is not None:
            self.applied_resources = applied_resources
        if components is not None:
            self.components = components
        if conditions is not None:
            self.conditions = conditions
        if latest_revision is not None:
            self.latest_revision = latest_revision
        if observed_generation is not None:
            self.observed_generation = observed_generation
        if policy is not None:
            self.policy = policy
        if services is not None:
            self.services = services
        if status is not None:
            self.status = status
        if workflow is not None:
            self.workflow = workflow

    @property
    def applied_resources(self):
        """Gets the applied_resources of this CommonAppStatus.  # noqa: E501


        :return: The applied_resources of this CommonAppStatus.  # noqa: E501
        :rtype: list[CommonClusterObjectReference]
        """
        return self._applied_resources

    @applied_resources.setter
    def applied_resources(self, applied_resources):
        """Sets the applied_resources of this CommonAppStatus.


        :param applied_resources: The applied_resources of this CommonAppStatus.  # noqa: E501
        :type: list[CommonClusterObjectReference]
        """

        self._applied_resources = applied_resources

    @property
    def components(self):
        """Gets the components of this CommonAppStatus.  # noqa: E501


        :return: The components of this CommonAppStatus.  # noqa: E501
        :rtype: list[V1ObjectReference]
        """
        return self._components

    @components.setter
    def components(self, components):
        """Sets the components of this CommonAppStatus.


        :param components: The components of this CommonAppStatus.  # noqa: E501
        :type: list[V1ObjectReference]
        """

        self._components = components

    @property
    def conditions(self):
        """Gets the conditions of this CommonAppStatus.  # noqa: E501


        :return: The conditions of this CommonAppStatus.  # noqa: E501
        :rtype: list[ConditionCondition]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this CommonAppStatus.


        :param conditions: The conditions of this CommonAppStatus.  # noqa: E501
        :type: list[ConditionCondition]
        """

        self._conditions = conditions

    @property
    def latest_revision(self):
        """Gets the latest_revision of this CommonAppStatus.  # noqa: E501


        :return: The latest_revision of this CommonAppStatus.  # noqa: E501
        :rtype: CommonRevision
        """
        return self._latest_revision

    @latest_revision.setter
    def latest_revision(self, latest_revision):
        """Sets the latest_revision of this CommonAppStatus.


        :param latest_revision: The latest_revision of this CommonAppStatus.  # noqa: E501
        :type: CommonRevision
        """

        self._latest_revision = latest_revision

    @property
    def observed_generation(self):
        """Gets the observed_generation of this CommonAppStatus.  # noqa: E501


        :return: The observed_generation of this CommonAppStatus.  # noqa: E501
        :rtype: int
        """
        return self._observed_generation

    @observed_generation.setter
    def observed_generation(self, observed_generation):
        """Sets the observed_generation of this CommonAppStatus.


        :param observed_generation: The observed_generation of this CommonAppStatus.  # noqa: E501
        :type: int
        """

        self._observed_generation = observed_generation

    @property
    def policy(self):
        """Gets the policy of this CommonAppStatus.  # noqa: E501


        :return: The policy of this CommonAppStatus.  # noqa: E501
        :rtype: list[CommonPolicyStatus]
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this CommonAppStatus.


        :param policy: The policy of this CommonAppStatus.  # noqa: E501
        :type: list[CommonPolicyStatus]
        """

        self._policy = policy

    @property
    def services(self):
        """Gets the services of this CommonAppStatus.  # noqa: E501


        :return: The services of this CommonAppStatus.  # noqa: E501
        :rtype: list[CommonApplicationComponentStatus]
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this CommonAppStatus.


        :param services: The services of this CommonAppStatus.  # noqa: E501
        :type: list[CommonApplicationComponentStatus]
        """

        self._services = services

    @property
    def status(self):
        """Gets the status of this CommonAppStatus.  # noqa: E501


        :return: The status of this CommonAppStatus.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CommonAppStatus.


        :param status: The status of this CommonAppStatus.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def workflow(self):
        """Gets the workflow of this CommonAppStatus.  # noqa: E501


        :return: The workflow of this CommonAppStatus.  # noqa: E501
        :rtype: CommonWorkflowStatus
        """
        return self._workflow

    @workflow.setter
    def workflow(self, workflow):
        """Sets the workflow of this CommonAppStatus.


        :param workflow: The workflow of this CommonAppStatus.  # noqa: E501
        :type: CommonWorkflowStatus
        """

        self._workflow = workflow

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CommonAppStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CommonAppStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

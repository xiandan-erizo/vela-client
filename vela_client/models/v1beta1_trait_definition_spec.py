# coding: utf-8

"""
    Kubevela api doc

    Kubevela api doc  # noqa: E501

    OpenAPI spec version: v1beta1
    Contact: feedback@mail.kubevela.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1beta1TraitDefinitionSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'applies_to_workloads': 'list[str]',
        'conflicts_with': 'list[str]',
        'control_plane_only': 'bool',
        'definition_ref': 'CommonDefinitionReference',
        'extension': 'str',
        'manage_workload': 'bool',
        'pod_disruptive': 'bool',
        'revision_enabled': 'bool',
        'schematic': 'CommonSchematic',
        'stage': 'str',
        'status': 'CommonStatus',
        'workload_ref_path': 'str'
    }

    attribute_map = {
        'applies_to_workloads': 'appliesToWorkloads',
        'conflicts_with': 'conflictsWith',
        'control_plane_only': 'controlPlaneOnly',
        'definition_ref': 'definitionRef',
        'extension': 'extension',
        'manage_workload': 'manageWorkload',
        'pod_disruptive': 'podDisruptive',
        'revision_enabled': 'revisionEnabled',
        'schematic': 'schematic',
        'stage': 'stage',
        'status': 'status',
        'workload_ref_path': 'workloadRefPath'
    }

    def __init__(self, applies_to_workloads=None, conflicts_with=None, control_plane_only=None, definition_ref=None, extension=None, manage_workload=None, pod_disruptive=None, revision_enabled=None, schematic=None, stage=None, status=None, workload_ref_path=None):  # noqa: E501
        """V1beta1TraitDefinitionSpec - a model defined in Swagger"""  # noqa: E501
        self._applies_to_workloads = None
        self._conflicts_with = None
        self._control_plane_only = None
        self._definition_ref = None
        self._extension = None
        self._manage_workload = None
        self._pod_disruptive = None
        self._revision_enabled = None
        self._schematic = None
        self._stage = None
        self._status = None
        self._workload_ref_path = None
        self.discriminator = None
        if applies_to_workloads is not None:
            self.applies_to_workloads = applies_to_workloads
        if conflicts_with is not None:
            self.conflicts_with = conflicts_with
        if control_plane_only is not None:
            self.control_plane_only = control_plane_only
        if definition_ref is not None:
            self.definition_ref = definition_ref
        if extension is not None:
            self.extension = extension
        if manage_workload is not None:
            self.manage_workload = manage_workload
        if pod_disruptive is not None:
            self.pod_disruptive = pod_disruptive
        if revision_enabled is not None:
            self.revision_enabled = revision_enabled
        if schematic is not None:
            self.schematic = schematic
        if stage is not None:
            self.stage = stage
        if status is not None:
            self.status = status
        if workload_ref_path is not None:
            self.workload_ref_path = workload_ref_path

    @property
    def applies_to_workloads(self):
        """Gets the applies_to_workloads of this V1beta1TraitDefinitionSpec.  # noqa: E501


        :return: The applies_to_workloads of this V1beta1TraitDefinitionSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._applies_to_workloads

    @applies_to_workloads.setter
    def applies_to_workloads(self, applies_to_workloads):
        """Sets the applies_to_workloads of this V1beta1TraitDefinitionSpec.


        :param applies_to_workloads: The applies_to_workloads of this V1beta1TraitDefinitionSpec.  # noqa: E501
        :type: list[str]
        """

        self._applies_to_workloads = applies_to_workloads

    @property
    def conflicts_with(self):
        """Gets the conflicts_with of this V1beta1TraitDefinitionSpec.  # noqa: E501


        :return: The conflicts_with of this V1beta1TraitDefinitionSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._conflicts_with

    @conflicts_with.setter
    def conflicts_with(self, conflicts_with):
        """Sets the conflicts_with of this V1beta1TraitDefinitionSpec.


        :param conflicts_with: The conflicts_with of this V1beta1TraitDefinitionSpec.  # noqa: E501
        :type: list[str]
        """

        self._conflicts_with = conflicts_with

    @property
    def control_plane_only(self):
        """Gets the control_plane_only of this V1beta1TraitDefinitionSpec.  # noqa: E501


        :return: The control_plane_only of this V1beta1TraitDefinitionSpec.  # noqa: E501
        :rtype: bool
        """
        return self._control_plane_only

    @control_plane_only.setter
    def control_plane_only(self, control_plane_only):
        """Sets the control_plane_only of this V1beta1TraitDefinitionSpec.


        :param control_plane_only: The control_plane_only of this V1beta1TraitDefinitionSpec.  # noqa: E501
        :type: bool
        """

        self._control_plane_only = control_plane_only

    @property
    def definition_ref(self):
        """Gets the definition_ref of this V1beta1TraitDefinitionSpec.  # noqa: E501


        :return: The definition_ref of this V1beta1TraitDefinitionSpec.  # noqa: E501
        :rtype: CommonDefinitionReference
        """
        return self._definition_ref

    @definition_ref.setter
    def definition_ref(self, definition_ref):
        """Sets the definition_ref of this V1beta1TraitDefinitionSpec.


        :param definition_ref: The definition_ref of this V1beta1TraitDefinitionSpec.  # noqa: E501
        :type: CommonDefinitionReference
        """

        self._definition_ref = definition_ref

    @property
    def extension(self):
        """Gets the extension of this V1beta1TraitDefinitionSpec.  # noqa: E501


        :return: The extension of this V1beta1TraitDefinitionSpec.  # noqa: E501
        :rtype: str
        """
        return self._extension

    @extension.setter
    def extension(self, extension):
        """Sets the extension of this V1beta1TraitDefinitionSpec.


        :param extension: The extension of this V1beta1TraitDefinitionSpec.  # noqa: E501
        :type: str
        """

        self._extension = extension

    @property
    def manage_workload(self):
        """Gets the manage_workload of this V1beta1TraitDefinitionSpec.  # noqa: E501


        :return: The manage_workload of this V1beta1TraitDefinitionSpec.  # noqa: E501
        :rtype: bool
        """
        return self._manage_workload

    @manage_workload.setter
    def manage_workload(self, manage_workload):
        """Sets the manage_workload of this V1beta1TraitDefinitionSpec.


        :param manage_workload: The manage_workload of this V1beta1TraitDefinitionSpec.  # noqa: E501
        :type: bool
        """

        self._manage_workload = manage_workload

    @property
    def pod_disruptive(self):
        """Gets the pod_disruptive of this V1beta1TraitDefinitionSpec.  # noqa: E501


        :return: The pod_disruptive of this V1beta1TraitDefinitionSpec.  # noqa: E501
        :rtype: bool
        """
        return self._pod_disruptive

    @pod_disruptive.setter
    def pod_disruptive(self, pod_disruptive):
        """Sets the pod_disruptive of this V1beta1TraitDefinitionSpec.


        :param pod_disruptive: The pod_disruptive of this V1beta1TraitDefinitionSpec.  # noqa: E501
        :type: bool
        """

        self._pod_disruptive = pod_disruptive

    @property
    def revision_enabled(self):
        """Gets the revision_enabled of this V1beta1TraitDefinitionSpec.  # noqa: E501


        :return: The revision_enabled of this V1beta1TraitDefinitionSpec.  # noqa: E501
        :rtype: bool
        """
        return self._revision_enabled

    @revision_enabled.setter
    def revision_enabled(self, revision_enabled):
        """Sets the revision_enabled of this V1beta1TraitDefinitionSpec.


        :param revision_enabled: The revision_enabled of this V1beta1TraitDefinitionSpec.  # noqa: E501
        :type: bool
        """

        self._revision_enabled = revision_enabled

    @property
    def schematic(self):
        """Gets the schematic of this V1beta1TraitDefinitionSpec.  # noqa: E501


        :return: The schematic of this V1beta1TraitDefinitionSpec.  # noqa: E501
        :rtype: CommonSchematic
        """
        return self._schematic

    @schematic.setter
    def schematic(self, schematic):
        """Sets the schematic of this V1beta1TraitDefinitionSpec.


        :param schematic: The schematic of this V1beta1TraitDefinitionSpec.  # noqa: E501
        :type: CommonSchematic
        """

        self._schematic = schematic

    @property
    def stage(self):
        """Gets the stage of this V1beta1TraitDefinitionSpec.  # noqa: E501


        :return: The stage of this V1beta1TraitDefinitionSpec.  # noqa: E501
        :rtype: str
        """
        return self._stage

    @stage.setter
    def stage(self, stage):
        """Sets the stage of this V1beta1TraitDefinitionSpec.


        :param stage: The stage of this V1beta1TraitDefinitionSpec.  # noqa: E501
        :type: str
        """

        self._stage = stage

    @property
    def status(self):
        """Gets the status of this V1beta1TraitDefinitionSpec.  # noqa: E501


        :return: The status of this V1beta1TraitDefinitionSpec.  # noqa: E501
        :rtype: CommonStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this V1beta1TraitDefinitionSpec.


        :param status: The status of this V1beta1TraitDefinitionSpec.  # noqa: E501
        :type: CommonStatus
        """

        self._status = status

    @property
    def workload_ref_path(self):
        """Gets the workload_ref_path of this V1beta1TraitDefinitionSpec.  # noqa: E501


        :return: The workload_ref_path of this V1beta1TraitDefinitionSpec.  # noqa: E501
        :rtype: str
        """
        return self._workload_ref_path

    @workload_ref_path.setter
    def workload_ref_path(self, workload_ref_path):
        """Sets the workload_ref_path of this V1beta1TraitDefinitionSpec.


        :param workload_ref_path: The workload_ref_path of this V1beta1TraitDefinitionSpec.  # noqa: E501
        :type: str
        """

        self._workload_ref_path = workload_ref_path

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1beta1TraitDefinitionSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1beta1TraitDefinitionSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

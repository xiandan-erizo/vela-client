# coding: utf-8

"""
    Kubevela api doc

    Kubevela api doc  # noqa: E501

    OpenAPI spec version: v1beta1
    Contact: feedback@mail.kubevela.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UtilsUIParameter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'additional': 'bool',
        'additional_parameter': 'UtilsUIParameter',
        'conditions': 'list[UtilsCondition]',
        'description': 'str',
        'disable': 'bool',
        'json_key': 'str',
        'label': 'str',
        'sort': 'int',
        'style': 'UtilsStyle',
        'sub_parameter_group_option': 'list[UtilsGroupOption]',
        'sub_parameters': 'list[UtilsUIParameter]',
        'ui_type': 'str',
        'validate': 'UtilsValidate'
    }

    attribute_map = {
        'additional': 'additional',
        'additional_parameter': 'additionalParameter',
        'conditions': 'conditions',
        'description': 'description',
        'disable': 'disable',
        'json_key': 'jsonKey',
        'label': 'label',
        'sort': 'sort',
        'style': 'style',
        'sub_parameter_group_option': 'subParameterGroupOption',
        'sub_parameters': 'subParameters',
        'ui_type': 'uiType',
        'validate': 'validate'
    }

    def __init__(self, additional=None, additional_parameter=None, conditions=None, description=None, disable=None, json_key=None, label=None, sort=None, style=None, sub_parameter_group_option=None, sub_parameters=None, ui_type=None, validate=None):  # noqa: E501
        """UtilsUIParameter - a model defined in Swagger"""  # noqa: E501
        self._additional = None
        self._additional_parameter = None
        self._conditions = None
        self._description = None
        self._disable = None
        self._json_key = None
        self._label = None
        self._sort = None
        self._style = None
        self._sub_parameter_group_option = None
        self._sub_parameters = None
        self._ui_type = None
        self._validate = None
        self.discriminator = None
        if additional is not None:
            self.additional = additional
        if additional_parameter is not None:
            self.additional_parameter = additional_parameter
        if conditions is not None:
            self.conditions = conditions
        self.description = description
        if disable is not None:
            self.disable = disable
        self.json_key = json_key
        self.label = label
        self.sort = sort
        if style is not None:
            self.style = style
        if sub_parameter_group_option is not None:
            self.sub_parameter_group_option = sub_parameter_group_option
        if sub_parameters is not None:
            self.sub_parameters = sub_parameters
        self.ui_type = ui_type
        if validate is not None:
            self.validate = validate

    @property
    def additional(self):
        """Gets the additional of this UtilsUIParameter.  # noqa: E501


        :return: The additional of this UtilsUIParameter.  # noqa: E501
        :rtype: bool
        """
        return self._additional

    @additional.setter
    def additional(self, additional):
        """Sets the additional of this UtilsUIParameter.


        :param additional: The additional of this UtilsUIParameter.  # noqa: E501
        :type: bool
        """

        self._additional = additional

    @property
    def additional_parameter(self):
        """Gets the additional_parameter of this UtilsUIParameter.  # noqa: E501


        :return: The additional_parameter of this UtilsUIParameter.  # noqa: E501
        :rtype: UtilsUIParameter
        """
        return self._additional_parameter

    @additional_parameter.setter
    def additional_parameter(self, additional_parameter):
        """Sets the additional_parameter of this UtilsUIParameter.


        :param additional_parameter: The additional_parameter of this UtilsUIParameter.  # noqa: E501
        :type: UtilsUIParameter
        """

        self._additional_parameter = additional_parameter

    @property
    def conditions(self):
        """Gets the conditions of this UtilsUIParameter.  # noqa: E501


        :return: The conditions of this UtilsUIParameter.  # noqa: E501
        :rtype: list[UtilsCondition]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this UtilsUIParameter.


        :param conditions: The conditions of this UtilsUIParameter.  # noqa: E501
        :type: list[UtilsCondition]
        """

        self._conditions = conditions

    @property
    def description(self):
        """Gets the description of this UtilsUIParameter.  # noqa: E501


        :return: The description of this UtilsUIParameter.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UtilsUIParameter.


        :param description: The description of this UtilsUIParameter.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def disable(self):
        """Gets the disable of this UtilsUIParameter.  # noqa: E501


        :return: The disable of this UtilsUIParameter.  # noqa: E501
        :rtype: bool
        """
        return self._disable

    @disable.setter
    def disable(self, disable):
        """Sets the disable of this UtilsUIParameter.


        :param disable: The disable of this UtilsUIParameter.  # noqa: E501
        :type: bool
        """

        self._disable = disable

    @property
    def json_key(self):
        """Gets the json_key of this UtilsUIParameter.  # noqa: E501


        :return: The json_key of this UtilsUIParameter.  # noqa: E501
        :rtype: str
        """
        return self._json_key

    @json_key.setter
    def json_key(self, json_key):
        """Sets the json_key of this UtilsUIParameter.


        :param json_key: The json_key of this UtilsUIParameter.  # noqa: E501
        :type: str
        """
        if json_key is None:
            raise ValueError("Invalid value for `json_key`, must not be `None`")  # noqa: E501

        self._json_key = json_key

    @property
    def label(self):
        """Gets the label of this UtilsUIParameter.  # noqa: E501


        :return: The label of this UtilsUIParameter.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this UtilsUIParameter.


        :param label: The label of this UtilsUIParameter.  # noqa: E501
        :type: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")  # noqa: E501

        self._label = label

    @property
    def sort(self):
        """Gets the sort of this UtilsUIParameter.  # noqa: E501


        :return: The sort of this UtilsUIParameter.  # noqa: E501
        :rtype: int
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this UtilsUIParameter.


        :param sort: The sort of this UtilsUIParameter.  # noqa: E501
        :type: int
        """
        if sort is None:
            raise ValueError("Invalid value for `sort`, must not be `None`")  # noqa: E501

        self._sort = sort

    @property
    def style(self):
        """Gets the style of this UtilsUIParameter.  # noqa: E501


        :return: The style of this UtilsUIParameter.  # noqa: E501
        :rtype: UtilsStyle
        """
        return self._style

    @style.setter
    def style(self, style):
        """Sets the style of this UtilsUIParameter.


        :param style: The style of this UtilsUIParameter.  # noqa: E501
        :type: UtilsStyle
        """

        self._style = style

    @property
    def sub_parameter_group_option(self):
        """Gets the sub_parameter_group_option of this UtilsUIParameter.  # noqa: E501


        :return: The sub_parameter_group_option of this UtilsUIParameter.  # noqa: E501
        :rtype: list[UtilsGroupOption]
        """
        return self._sub_parameter_group_option

    @sub_parameter_group_option.setter
    def sub_parameter_group_option(self, sub_parameter_group_option):
        """Sets the sub_parameter_group_option of this UtilsUIParameter.


        :param sub_parameter_group_option: The sub_parameter_group_option of this UtilsUIParameter.  # noqa: E501
        :type: list[UtilsGroupOption]
        """

        self._sub_parameter_group_option = sub_parameter_group_option

    @property
    def sub_parameters(self):
        """Gets the sub_parameters of this UtilsUIParameter.  # noqa: E501


        :return: The sub_parameters of this UtilsUIParameter.  # noqa: E501
        :rtype: list[UtilsUIParameter]
        """
        return self._sub_parameters

    @sub_parameters.setter
    def sub_parameters(self, sub_parameters):
        """Sets the sub_parameters of this UtilsUIParameter.


        :param sub_parameters: The sub_parameters of this UtilsUIParameter.  # noqa: E501
        :type: list[UtilsUIParameter]
        """

        self._sub_parameters = sub_parameters

    @property
    def ui_type(self):
        """Gets the ui_type of this UtilsUIParameter.  # noqa: E501


        :return: The ui_type of this UtilsUIParameter.  # noqa: E501
        :rtype: str
        """
        return self._ui_type

    @ui_type.setter
    def ui_type(self, ui_type):
        """Sets the ui_type of this UtilsUIParameter.


        :param ui_type: The ui_type of this UtilsUIParameter.  # noqa: E501
        :type: str
        """
        if ui_type is None:
            raise ValueError("Invalid value for `ui_type`, must not be `None`")  # noqa: E501

        self._ui_type = ui_type

    @property
    def validate(self):
        """Gets the validate of this UtilsUIParameter.  # noqa: E501


        :return: The validate of this UtilsUIParameter.  # noqa: E501
        :rtype: UtilsValidate
        """
        return self._validate

    @validate.setter
    def validate(self, validate):
        """Sets the validate of this UtilsUIParameter.


        :param validate: The validate of this UtilsUIParameter.  # noqa: E501
        :type: UtilsValidate
        """

        self._validate = validate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UtilsUIParameter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UtilsUIParameter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

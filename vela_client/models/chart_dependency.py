# coding: utf-8

"""
    Kubevela api doc

    Kubevela api doc  # noqa: E501

    OpenAPI spec version: v1beta1
    Contact: feedback@mail.kubevela.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ChartDependency(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alias': 'str',
        'condition': 'str',
        'enabled': 'bool',
        'import_values': 'list[ChartDependencyImportValues]',
        'name': 'str',
        'repository': 'str',
        'tags': 'list[str]',
        'version': 'str'
    }

    attribute_map = {
        'alias': 'alias',
        'condition': 'condition',
        'enabled': 'enabled',
        'import_values': 'import-values',
        'name': 'name',
        'repository': 'repository',
        'tags': 'tags',
        'version': 'version'
    }

    def __init__(self, alias=None, condition=None, enabled=None, import_values=None, name=None, repository=None, tags=None, version=None):  # noqa: E501
        """ChartDependency - a model defined in Swagger"""  # noqa: E501
        self._alias = None
        self._condition = None
        self._enabled = None
        self._import_values = None
        self._name = None
        self._repository = None
        self._tags = None
        self._version = None
        self.discriminator = None
        if alias is not None:
            self.alias = alias
        if condition is not None:
            self.condition = condition
        if enabled is not None:
            self.enabled = enabled
        if import_values is not None:
            self.import_values = import_values
        self.name = name
        self.repository = repository
        if tags is not None:
            self.tags = tags
        if version is not None:
            self.version = version

    @property
    def alias(self):
        """Gets the alias of this ChartDependency.  # noqa: E501


        :return: The alias of this ChartDependency.  # noqa: E501
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this ChartDependency.


        :param alias: The alias of this ChartDependency.  # noqa: E501
        :type: str
        """

        self._alias = alias

    @property
    def condition(self):
        """Gets the condition of this ChartDependency.  # noqa: E501


        :return: The condition of this ChartDependency.  # noqa: E501
        :rtype: str
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this ChartDependency.


        :param condition: The condition of this ChartDependency.  # noqa: E501
        :type: str
        """

        self._condition = condition

    @property
    def enabled(self):
        """Gets the enabled of this ChartDependency.  # noqa: E501


        :return: The enabled of this ChartDependency.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ChartDependency.


        :param enabled: The enabled of this ChartDependency.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def import_values(self):
        """Gets the import_values of this ChartDependency.  # noqa: E501


        :return: The import_values of this ChartDependency.  # noqa: E501
        :rtype: list[ChartDependencyImportValues]
        """
        return self._import_values

    @import_values.setter
    def import_values(self, import_values):
        """Sets the import_values of this ChartDependency.


        :param import_values: The import_values of this ChartDependency.  # noqa: E501
        :type: list[ChartDependencyImportValues]
        """

        self._import_values = import_values

    @property
    def name(self):
        """Gets the name of this ChartDependency.  # noqa: E501


        :return: The name of this ChartDependency.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ChartDependency.


        :param name: The name of this ChartDependency.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def repository(self):
        """Gets the repository of this ChartDependency.  # noqa: E501


        :return: The repository of this ChartDependency.  # noqa: E501
        :rtype: str
        """
        return self._repository

    @repository.setter
    def repository(self, repository):
        """Sets the repository of this ChartDependency.


        :param repository: The repository of this ChartDependency.  # noqa: E501
        :type: str
        """
        if repository is None:
            raise ValueError("Invalid value for `repository`, must not be `None`")  # noqa: E501

        self._repository = repository

    @property
    def tags(self):
        """Gets the tags of this ChartDependency.  # noqa: E501


        :return: The tags of this ChartDependency.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ChartDependency.


        :param tags: The tags of this ChartDependency.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def version(self):
        """Gets the version of this ChartDependency.  # noqa: E501


        :return: The version of this ChartDependency.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ChartDependency.


        :param version: The version of this ChartDependency.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ChartDependency, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChartDependency):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

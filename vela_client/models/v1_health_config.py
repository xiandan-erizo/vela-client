# coding: utf-8

"""
    Kubevela api doc

    Kubevela api doc  # noqa: E501

    OpenAPI spec version: v1beta1
    Contact: feedback@mail.kubevela.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1HealthConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'interval': 'int',
        'retries': 'int',
        'start_period': 'int',
        'test': 'list[str]',
        'timeout': 'int'
    }

    attribute_map = {
        'interval': 'Interval',
        'retries': 'Retries',
        'start_period': 'StartPeriod',
        'test': 'Test',
        'timeout': 'Timeout'
    }

    def __init__(self, interval=None, retries=None, start_period=None, test=None, timeout=None):  # noqa: E501
        """V1HealthConfig - a model defined in Swagger"""  # noqa: E501
        self._interval = None
        self._retries = None
        self._start_period = None
        self._test = None
        self._timeout = None
        self.discriminator = None
        if interval is not None:
            self.interval = interval
        if retries is not None:
            self.retries = retries
        if start_period is not None:
            self.start_period = start_period
        if test is not None:
            self.test = test
        if timeout is not None:
            self.timeout = timeout

    @property
    def interval(self):
        """Gets the interval of this V1HealthConfig.  # noqa: E501


        :return: The interval of this V1HealthConfig.  # noqa: E501
        :rtype: int
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this V1HealthConfig.


        :param interval: The interval of this V1HealthConfig.  # noqa: E501
        :type: int
        """

        self._interval = interval

    @property
    def retries(self):
        """Gets the retries of this V1HealthConfig.  # noqa: E501


        :return: The retries of this V1HealthConfig.  # noqa: E501
        :rtype: int
        """
        return self._retries

    @retries.setter
    def retries(self, retries):
        """Sets the retries of this V1HealthConfig.


        :param retries: The retries of this V1HealthConfig.  # noqa: E501
        :type: int
        """

        self._retries = retries

    @property
    def start_period(self):
        """Gets the start_period of this V1HealthConfig.  # noqa: E501


        :return: The start_period of this V1HealthConfig.  # noqa: E501
        :rtype: int
        """
        return self._start_period

    @start_period.setter
    def start_period(self, start_period):
        """Sets the start_period of this V1HealthConfig.


        :param start_period: The start_period of this V1HealthConfig.  # noqa: E501
        :type: int
        """

        self._start_period = start_period

    @property
    def test(self):
        """Gets the test of this V1HealthConfig.  # noqa: E501


        :return: The test of this V1HealthConfig.  # noqa: E501
        :rtype: list[str]
        """
        return self._test

    @test.setter
    def test(self, test):
        """Sets the test of this V1HealthConfig.


        :param test: The test of this V1HealthConfig.  # noqa: E501
        :type: list[str]
        """

        self._test = test

    @property
    def timeout(self):
        """Gets the timeout of this V1HealthConfig.  # noqa: E501


        :return: The timeout of this V1HealthConfig.  # noqa: E501
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this V1HealthConfig.


        :param timeout: The timeout of this V1HealthConfig.  # noqa: E501
        :type: int
        """

        self._timeout = timeout

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1HealthConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1HealthConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

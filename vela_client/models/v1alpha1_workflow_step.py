# coding: utf-8

"""
    Kubevela api doc

    Kubevela api doc  # noqa: E501

    OpenAPI spec version: v1beta1
    Contact: feedback@mail.kubevela.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1alpha1WorkflowStep(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'depends_on': 'list[str]',
        '_if': 'str',
        'inputs': 'list[V1alpha1InputItem]',
        'meta': 'V1alpha1WorkflowStepMeta',
        'name': 'str',
        'outputs': 'list[V1alpha1OutputItem]',
        'properties': 'str',
        'sub_steps': 'list[V1alpha1WorkflowStepBase]',
        'timeout': 'str',
        'type': 'str'
    }

    attribute_map = {
        'depends_on': 'dependsOn',
        '_if': 'if',
        'inputs': 'inputs',
        'meta': 'meta',
        'name': 'name',
        'outputs': 'outputs',
        'properties': 'properties',
        'sub_steps': 'subSteps',
        'timeout': 'timeout',
        'type': 'type'
    }

    def __init__(self, depends_on=None, _if=None, inputs=None, meta=None, name=None, outputs=None, properties=None, sub_steps=None, timeout=None, type=None):  # noqa: E501
        """V1alpha1WorkflowStep - a model defined in Swagger"""  # noqa: E501
        self._depends_on = None
        self.__if = None
        self._inputs = None
        self._meta = None
        self._name = None
        self._outputs = None
        self._properties = None
        self._sub_steps = None
        self._timeout = None
        self._type = None
        self.discriminator = None
        if depends_on is not None:
            self.depends_on = depends_on
        if _if is not None:
            self._if = _if
        if inputs is not None:
            self.inputs = inputs
        if meta is not None:
            self.meta = meta
        if name is not None:
            self.name = name
        if outputs is not None:
            self.outputs = outputs
        if properties is not None:
            self.properties = properties
        if sub_steps is not None:
            self.sub_steps = sub_steps
        if timeout is not None:
            self.timeout = timeout
        self.type = type

    @property
    def depends_on(self):
        """Gets the depends_on of this V1alpha1WorkflowStep.  # noqa: E501


        :return: The depends_on of this V1alpha1WorkflowStep.  # noqa: E501
        :rtype: list[str]
        """
        return self._depends_on

    @depends_on.setter
    def depends_on(self, depends_on):
        """Sets the depends_on of this V1alpha1WorkflowStep.


        :param depends_on: The depends_on of this V1alpha1WorkflowStep.  # noqa: E501
        :type: list[str]
        """

        self._depends_on = depends_on

    @property
    def _if(self):
        """Gets the _if of this V1alpha1WorkflowStep.  # noqa: E501


        :return: The _if of this V1alpha1WorkflowStep.  # noqa: E501
        :rtype: str
        """
        return self.__if

    @_if.setter
    def _if(self, _if):
        """Sets the _if of this V1alpha1WorkflowStep.


        :param _if: The _if of this V1alpha1WorkflowStep.  # noqa: E501
        :type: str
        """

        self.__if = _if

    @property
    def inputs(self):
        """Gets the inputs of this V1alpha1WorkflowStep.  # noqa: E501


        :return: The inputs of this V1alpha1WorkflowStep.  # noqa: E501
        :rtype: list[V1alpha1InputItem]
        """
        return self._inputs

    @inputs.setter
    def inputs(self, inputs):
        """Sets the inputs of this V1alpha1WorkflowStep.


        :param inputs: The inputs of this V1alpha1WorkflowStep.  # noqa: E501
        :type: list[V1alpha1InputItem]
        """

        self._inputs = inputs

    @property
    def meta(self):
        """Gets the meta of this V1alpha1WorkflowStep.  # noqa: E501


        :return: The meta of this V1alpha1WorkflowStep.  # noqa: E501
        :rtype: V1alpha1WorkflowStepMeta
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this V1alpha1WorkflowStep.


        :param meta: The meta of this V1alpha1WorkflowStep.  # noqa: E501
        :type: V1alpha1WorkflowStepMeta
        """

        self._meta = meta

    @property
    def name(self):
        """Gets the name of this V1alpha1WorkflowStep.  # noqa: E501


        :return: The name of this V1alpha1WorkflowStep.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V1alpha1WorkflowStep.


        :param name: The name of this V1alpha1WorkflowStep.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def outputs(self):
        """Gets the outputs of this V1alpha1WorkflowStep.  # noqa: E501


        :return: The outputs of this V1alpha1WorkflowStep.  # noqa: E501
        :rtype: list[V1alpha1OutputItem]
        """
        return self._outputs

    @outputs.setter
    def outputs(self, outputs):
        """Sets the outputs of this V1alpha1WorkflowStep.


        :param outputs: The outputs of this V1alpha1WorkflowStep.  # noqa: E501
        :type: list[V1alpha1OutputItem]
        """

        self._outputs = outputs

    @property
    def properties(self):
        """Gets the properties of this V1alpha1WorkflowStep.  # noqa: E501


        :return: The properties of this V1alpha1WorkflowStep.  # noqa: E501
        :rtype: str
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this V1alpha1WorkflowStep.


        :param properties: The properties of this V1alpha1WorkflowStep.  # noqa: E501
        :type: str
        """

        self._properties = properties

    @property
    def sub_steps(self):
        """Gets the sub_steps of this V1alpha1WorkflowStep.  # noqa: E501


        :return: The sub_steps of this V1alpha1WorkflowStep.  # noqa: E501
        :rtype: list[V1alpha1WorkflowStepBase]
        """
        return self._sub_steps

    @sub_steps.setter
    def sub_steps(self, sub_steps):
        """Sets the sub_steps of this V1alpha1WorkflowStep.


        :param sub_steps: The sub_steps of this V1alpha1WorkflowStep.  # noqa: E501
        :type: list[V1alpha1WorkflowStepBase]
        """

        self._sub_steps = sub_steps

    @property
    def timeout(self):
        """Gets the timeout of this V1alpha1WorkflowStep.  # noqa: E501


        :return: The timeout of this V1alpha1WorkflowStep.  # noqa: E501
        :rtype: str
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this V1alpha1WorkflowStep.


        :param timeout: The timeout of this V1alpha1WorkflowStep.  # noqa: E501
        :type: str
        """

        self._timeout = timeout

    @property
    def type(self):
        """Gets the type of this V1alpha1WorkflowStep.  # noqa: E501


        :return: The type of this V1alpha1WorkflowStep.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this V1alpha1WorkflowStep.


        :param type: The type of this V1alpha1WorkflowStep.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1alpha1WorkflowStep, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1alpha1WorkflowStep):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

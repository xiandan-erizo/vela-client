# coding: utf-8

"""
    Kubevela api doc

    Kubevela api doc  # noqa: E501

    OpenAPI spec version: v1beta1
    Contact: feedback@mail.kubevela.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1InputVar(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_from': 'str',
        'from_step': 'str',
        'parameter_key': 'str',
        'value': 'str'
    }

    attribute_map = {
        '_from': 'from',
        'from_step': 'fromStep',
        'parameter_key': 'parameterKey',
        'value': 'value'
    }

    def __init__(self, _from=None, from_step=None, parameter_key=None, value=None):  # noqa: E501
        """V1InputVar - a model defined in Swagger"""  # noqa: E501
        self.__from = None
        self._from_step = None
        self._parameter_key = None
        self._value = None
        self.discriminator = None
        self._from = _from
        self.from_step = from_step
        self.parameter_key = parameter_key
        self.value = value

    @property
    def _from(self):
        """Gets the _from of this V1InputVar.  # noqa: E501


        :return: The _from of this V1InputVar.  # noqa: E501
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this V1InputVar.


        :param _from: The _from of this V1InputVar.  # noqa: E501
        :type: str
        """
        if _from is None:
            raise ValueError("Invalid value for `_from`, must not be `None`")  # noqa: E501

        self.__from = _from

    @property
    def from_step(self):
        """Gets the from_step of this V1InputVar.  # noqa: E501


        :return: The from_step of this V1InputVar.  # noqa: E501
        :rtype: str
        """
        return self._from_step

    @from_step.setter
    def from_step(self, from_step):
        """Sets the from_step of this V1InputVar.


        :param from_step: The from_step of this V1InputVar.  # noqa: E501
        :type: str
        """
        if from_step is None:
            raise ValueError("Invalid value for `from_step`, must not be `None`")  # noqa: E501

        self._from_step = from_step

    @property
    def parameter_key(self):
        """Gets the parameter_key of this V1InputVar.  # noqa: E501


        :return: The parameter_key of this V1InputVar.  # noqa: E501
        :rtype: str
        """
        return self._parameter_key

    @parameter_key.setter
    def parameter_key(self, parameter_key):
        """Sets the parameter_key of this V1InputVar.


        :param parameter_key: The parameter_key of this V1InputVar.  # noqa: E501
        :type: str
        """
        if parameter_key is None:
            raise ValueError("Invalid value for `parameter_key`, must not be `None`")  # noqa: E501

        self._parameter_key = parameter_key

    @property
    def value(self):
        """Gets the value of this V1InputVar.  # noqa: E501


        :return: The value of this V1InputVar.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this V1InputVar.


        :param value: The value of this V1InputVar.  # noqa: E501
        :type: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1InputVar, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1InputVar):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

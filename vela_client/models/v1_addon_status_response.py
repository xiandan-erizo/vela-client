# coding: utf-8

"""
    Kubevela api doc

    Kubevela api doc  # noqa: E501

    OpenAPI spec version: v1beta1
    Contact: feedback@mail.kubevela.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1AddonStatusResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'all_clusters': 'list[V1NameAlias]',
        'app_status': 'CommonAppStatus',
        'args': 'object',
        'clusters': 'dict(str, V1AddonStatusResponseClusters)',
        'enabling_progress': 'V1EnablingProgress',
        'installed_version': 'str',
        'name': 'str',
        'phase': 'str'
    }

    attribute_map = {
        'all_clusters': 'allClusters',
        'app_status': 'appStatus',
        'args': 'args',
        'clusters': 'clusters',
        'enabling_progress': 'enabling_progress',
        'installed_version': 'installedVersion',
        'name': 'name',
        'phase': 'phase'
    }

    def __init__(self, all_clusters=None, app_status=None, args=None, clusters=None, enabling_progress=None, installed_version=None, name=None, phase=None):  # noqa: E501
        """V1AddonStatusResponse - a model defined in Swagger"""  # noqa: E501
        self._all_clusters = None
        self._app_status = None
        self._args = None
        self._clusters = None
        self._enabling_progress = None
        self._installed_version = None
        self._name = None
        self._phase = None
        self.discriminator = None
        if all_clusters is not None:
            self.all_clusters = all_clusters
        if app_status is not None:
            self.app_status = app_status
        self.args = args
        if clusters is not None:
            self.clusters = clusters
        if enabling_progress is not None:
            self.enabling_progress = enabling_progress
        if installed_version is not None:
            self.installed_version = installed_version
        self.name = name
        self.phase = phase

    @property
    def all_clusters(self):
        """Gets the all_clusters of this V1AddonStatusResponse.  # noqa: E501


        :return: The all_clusters of this V1AddonStatusResponse.  # noqa: E501
        :rtype: list[V1NameAlias]
        """
        return self._all_clusters

    @all_clusters.setter
    def all_clusters(self, all_clusters):
        """Sets the all_clusters of this V1AddonStatusResponse.


        :param all_clusters: The all_clusters of this V1AddonStatusResponse.  # noqa: E501
        :type: list[V1NameAlias]
        """

        self._all_clusters = all_clusters

    @property
    def app_status(self):
        """Gets the app_status of this V1AddonStatusResponse.  # noqa: E501


        :return: The app_status of this V1AddonStatusResponse.  # noqa: E501
        :rtype: CommonAppStatus
        """
        return self._app_status

    @app_status.setter
    def app_status(self, app_status):
        """Sets the app_status of this V1AddonStatusResponse.


        :param app_status: The app_status of this V1AddonStatusResponse.  # noqa: E501
        :type: CommonAppStatus
        """

        self._app_status = app_status

    @property
    def args(self):
        """Gets the args of this V1AddonStatusResponse.  # noqa: E501


        :return: The args of this V1AddonStatusResponse.  # noqa: E501
        :rtype: object
        """
        return self._args

    @args.setter
    def args(self, args):
        """Sets the args of this V1AddonStatusResponse.


        :param args: The args of this V1AddonStatusResponse.  # noqa: E501
        :type: object
        """
        if args is None:
            raise ValueError("Invalid value for `args`, must not be `None`")  # noqa: E501

        self._args = args

    @property
    def clusters(self):
        """Gets the clusters of this V1AddonStatusResponse.  # noqa: E501


        :return: The clusters of this V1AddonStatusResponse.  # noqa: E501
        :rtype: dict(str, V1AddonStatusResponseClusters)
        """
        return self._clusters

    @clusters.setter
    def clusters(self, clusters):
        """Sets the clusters of this V1AddonStatusResponse.


        :param clusters: The clusters of this V1AddonStatusResponse.  # noqa: E501
        :type: dict(str, V1AddonStatusResponseClusters)
        """

        self._clusters = clusters

    @property
    def enabling_progress(self):
        """Gets the enabling_progress of this V1AddonStatusResponse.  # noqa: E501


        :return: The enabling_progress of this V1AddonStatusResponse.  # noqa: E501
        :rtype: V1EnablingProgress
        """
        return self._enabling_progress

    @enabling_progress.setter
    def enabling_progress(self, enabling_progress):
        """Sets the enabling_progress of this V1AddonStatusResponse.


        :param enabling_progress: The enabling_progress of this V1AddonStatusResponse.  # noqa: E501
        :type: V1EnablingProgress
        """

        self._enabling_progress = enabling_progress

    @property
    def installed_version(self):
        """Gets the installed_version of this V1AddonStatusResponse.  # noqa: E501


        :return: The installed_version of this V1AddonStatusResponse.  # noqa: E501
        :rtype: str
        """
        return self._installed_version

    @installed_version.setter
    def installed_version(self, installed_version):
        """Sets the installed_version of this V1AddonStatusResponse.


        :param installed_version: The installed_version of this V1AddonStatusResponse.  # noqa: E501
        :type: str
        """

        self._installed_version = installed_version

    @property
    def name(self):
        """Gets the name of this V1AddonStatusResponse.  # noqa: E501


        :return: The name of this V1AddonStatusResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V1AddonStatusResponse.


        :param name: The name of this V1AddonStatusResponse.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def phase(self):
        """Gets the phase of this V1AddonStatusResponse.  # noqa: E501


        :return: The phase of this V1AddonStatusResponse.  # noqa: E501
        :rtype: str
        """
        return self._phase

    @phase.setter
    def phase(self, phase):
        """Sets the phase of this V1AddonStatusResponse.


        :param phase: The phase of this V1AddonStatusResponse.  # noqa: E501
        :type: str
        """
        if phase is None:
            raise ValueError("Invalid value for `phase`, must not be `None`")  # noqa: E501

        self._phase = phase

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1AddonStatusResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1AddonStatusResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

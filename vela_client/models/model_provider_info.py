# coding: utf-8

"""
    Kubevela api doc

    Kubevela api doc  # noqa: E501

    OpenAPI spec version: v1beta1
    Contact: feedback@mail.kubevela.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ModelProviderInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cluster_id': 'str',
        'cluster_name': 'str',
        'labels': 'dict(str, str)',
        'provider': 'str',
        'region_id': 'str',
        'vpc_id': 'str',
        'zone': 'str',
        'zone_id': 'str'
    }

    attribute_map = {
        'cluster_id': 'clusterID',
        'cluster_name': 'clusterName',
        'labels': 'labels',
        'provider': 'provider',
        'region_id': 'regionID',
        'vpc_id': 'vpcID',
        'zone': 'zone',
        'zone_id': 'zoneID'
    }

    def __init__(self, cluster_id=None, cluster_name=None, labels=None, provider=None, region_id=None, vpc_id=None, zone=None, zone_id=None):  # noqa: E501
        """ModelProviderInfo - a model defined in Swagger"""  # noqa: E501
        self._cluster_id = None
        self._cluster_name = None
        self._labels = None
        self._provider = None
        self._region_id = None
        self._vpc_id = None
        self._zone = None
        self._zone_id = None
        self.discriminator = None
        self.cluster_id = cluster_id
        if cluster_name is not None:
            self.cluster_name = cluster_name
        self.labels = labels
        self.provider = provider
        if region_id is not None:
            self.region_id = region_id
        if vpc_id is not None:
            self.vpc_id = vpc_id
        if zone is not None:
            self.zone = zone
        if zone_id is not None:
            self.zone_id = zone_id

    @property
    def cluster_id(self):
        """Gets the cluster_id of this ModelProviderInfo.  # noqa: E501


        :return: The cluster_id of this ModelProviderInfo.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this ModelProviderInfo.


        :param cluster_id: The cluster_id of this ModelProviderInfo.  # noqa: E501
        :type: str
        """
        if cluster_id is None:
            raise ValueError("Invalid value for `cluster_id`, must not be `None`")  # noqa: E501

        self._cluster_id = cluster_id

    @property
    def cluster_name(self):
        """Gets the cluster_name of this ModelProviderInfo.  # noqa: E501


        :return: The cluster_name of this ModelProviderInfo.  # noqa: E501
        :rtype: str
        """
        return self._cluster_name

    @cluster_name.setter
    def cluster_name(self, cluster_name):
        """Sets the cluster_name of this ModelProviderInfo.


        :param cluster_name: The cluster_name of this ModelProviderInfo.  # noqa: E501
        :type: str
        """

        self._cluster_name = cluster_name

    @property
    def labels(self):
        """Gets the labels of this ModelProviderInfo.  # noqa: E501


        :return: The labels of this ModelProviderInfo.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this ModelProviderInfo.


        :param labels: The labels of this ModelProviderInfo.  # noqa: E501
        :type: dict(str, str)
        """
        if labels is None:
            raise ValueError("Invalid value for `labels`, must not be `None`")  # noqa: E501

        self._labels = labels

    @property
    def provider(self):
        """Gets the provider of this ModelProviderInfo.  # noqa: E501


        :return: The provider of this ModelProviderInfo.  # noqa: E501
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this ModelProviderInfo.


        :param provider: The provider of this ModelProviderInfo.  # noqa: E501
        :type: str
        """
        if provider is None:
            raise ValueError("Invalid value for `provider`, must not be `None`")  # noqa: E501

        self._provider = provider

    @property
    def region_id(self):
        """Gets the region_id of this ModelProviderInfo.  # noqa: E501


        :return: The region_id of this ModelProviderInfo.  # noqa: E501
        :rtype: str
        """
        return self._region_id

    @region_id.setter
    def region_id(self, region_id):
        """Sets the region_id of this ModelProviderInfo.


        :param region_id: The region_id of this ModelProviderInfo.  # noqa: E501
        :type: str
        """

        self._region_id = region_id

    @property
    def vpc_id(self):
        """Gets the vpc_id of this ModelProviderInfo.  # noqa: E501


        :return: The vpc_id of this ModelProviderInfo.  # noqa: E501
        :rtype: str
        """
        return self._vpc_id

    @vpc_id.setter
    def vpc_id(self, vpc_id):
        """Sets the vpc_id of this ModelProviderInfo.


        :param vpc_id: The vpc_id of this ModelProviderInfo.  # noqa: E501
        :type: str
        """

        self._vpc_id = vpc_id

    @property
    def zone(self):
        """Gets the zone of this ModelProviderInfo.  # noqa: E501


        :return: The zone of this ModelProviderInfo.  # noqa: E501
        :rtype: str
        """
        return self._zone

    @zone.setter
    def zone(self, zone):
        """Sets the zone of this ModelProviderInfo.


        :param zone: The zone of this ModelProviderInfo.  # noqa: E501
        :type: str
        """

        self._zone = zone

    @property
    def zone_id(self):
        """Gets the zone_id of this ModelProviderInfo.  # noqa: E501


        :return: The zone_id of this ModelProviderInfo.  # noqa: E501
        :rtype: str
        """
        return self._zone_id

    @zone_id.setter
    def zone_id(self, zone_id):
        """Sets the zone_id of this ModelProviderInfo.


        :param zone_id: The zone_id of this ModelProviderInfo.  # noqa: E501
        :type: str
        """

        self._zone_id = zone_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelProviderInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelProviderInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
